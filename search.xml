<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql执行建表语句报1064</title>
    <url>/2021/0521/mysql-1064.html</url>
    <content><![CDATA[<blockquote>
<p>最近自己准备写个项目玩儿，并且准备采用docker来部署下，看下devops的效果；说干就干，尼玛采用了flyway插件，项目启动时建表语句却执行失败，老是报1064；找了些帖子都没解决，偶然发现这个坑点，记录于此；</p>
</blockquote>
<h3 id="建表脚本"><a href="#建表脚本" class="headerlink" title="建表脚本"></a>建表脚本</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_family_test`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_family_test`</span><br><span class="line">(</span><br><span class="line">    `id`                 <span class="type">int</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `family_type`        <span class="type">int</span>(<span class="number">3</span>)          COMMENT <span class="string">&#x27;家庭成员类型&#x27;</span>,</span><br><span class="line">    `family_type_name`   <span class="type">varchar</span>(<span class="number">10</span>)     COMMENT <span class="string">&#x27;家庭成员名称&#x27;</span>,</span><br><span class="line">    `delete_flag`        <span class="type">int</span>(<span class="number">1</span>)       <span class="keyword">default</span>  <span class="string">&#x27;0&#x27;</span>   COMMENT <span class="string">&#x27;删除标识，0未删除 1已删除&#x27;</span>,</span><br><span class="line">    `created_by`         <span class="type">varchar</span>(<span class="number">20</span>)  COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `created_time`       datetime     COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `updated_by`         <span class="type">varchar</span>(<span class="number">20</span>)  COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `updated_time`       datetime     COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin;</span><br></pre></td></tr></table></figure></div>
<p>尼玛这哪里有问题，狗日的。项目启动时，flyway执行这个脚本时就是报错；不信邪的我，拿着sql去数据库执行发现，还真是报错；<code>1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39; int(11)      NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;, &#39; at line 3, Time: 0.000000s</code><br>看这意思是mysql版本的问题，吓的我赶紧去看了下我本地安装的mysql版本；<br><a href="https://imgtu.com/i/g7kCxs"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/21/g7kCxs.png"
                      alt="5.7.28"
                ></a><br>5.7的版本，应该是大家都在用的版本，肯定不会有问题的；那么出问题的点还是在这个脚本上；可是我左看右看尼玛这脚本究竟哪里有问题呢！</p>
<h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p><a href="https://imgtu.com/i/g7kFrq"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/21/g7kFrq.png"
                      alt="报错截图"
                ></a><br>就想着尝试调整下脚本间的间距，居然就ok了，特么的找谁说理去；<br><a href="https://imgtu.com/i/g7knG4"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/21/g7knG4.png"
                      alt="对比成功截图"
                ></a></p>
<blockquote>
<p>小结：mysql建表时，字段和表面都加上“&#96;”号，且sql尽量聚合一点，不然错都不知道错哪里了！可怜的我找了一个多小时！坑爹啊，后面还是用建表工具生成这类的建表的sql吧；</p>
</blockquote>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>一个bug引发的对于mysql语句的探究</title>
    <url>/2021/0423/bug-for-mysql.html</url>
    <content><![CDATA[<blockquote>
<p>mysql 子查询加<code>limit</code> 和不加<code>limit</code>区别居然这么大</p>
</blockquote>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>最近改了一个bug ,原有的系统是经过测试的，但是去年底负责这个系统的人离职了，然后环境切换后各种问题又爆粗来了，而手头目前没啥活儿的我就接过了锅，当然走的时候也不是和我交接的…废话不多说，说多了就是背锅侠了；我们还是来看问题：</p>
<p>测试反馈治理系统首页统计治理数据总量始终显示为0，对应业务是某个角色对应的部门下面对应的数据源中对应的表被清洗，而被清洗表的数据总量会汇总统计出来，现在问题是没统计到，提了bug挂在我名下；那能怎么办，可以肯定的是业务流程之前是没问题的（之前整个系统业务是测过一遍的），就需要扒代码看查询逻辑了；</p>
<p>梳理下对应的业务逻辑如下：登录用户-&gt;对应角色-&gt;对应部门-&gt;对应数据源-&gt;对应库-&gt;对应表-&gt;对应表被创建定时调度任务(xxl job)-&gt;调度任务触发对应的治理平台的执行器-&gt; 数据进行清洗筛选入库</p>
<p>好了，整个流程就是酱紫；话说执行器里的锅是真的大，200多行的方法家常便饭，最长的有500多行的。。。看着头大，看了看手边的《重构改善既有代码的设计》，我特么重构个xx，这面向过程编码的代码看着都脑阔疼，还是不能抱怨，生活不易请善待自己；</p>
<h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>找到对应的接口，发现汇总的是一个查询出来的allNum字段，看看对应的查询语句:</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t.report_id,</span><br><span class="line">t.meet_data + t.no_meet_data allNum</span><br><span class="line">FROM</span><br><span class="line">report_detail t</span><br><span class="line">LEFT JOIN monitor_report t1 ON t1.id = t.report_id</span><br><span class="line">WHERE</span><br><span class="line">t1.data_state = 1</span><br><span class="line">AND t.data_state = 1</span><br><span class="line">GROUP BY</span><br><span class="line">t.report_id</span><br><span class="line">ORDER BY</span><br><span class="line">t.create_date DESC</span><br></pre></td></tr></table></figure></div>

<p>执行下看看查询结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/22/JtH16P.png"
                     
                ></p>
<p>我们修改下sql 加个日期，看看查询结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/22/Jt7tR1.png"
                     
                ></p>
<p>很明显，<code>report_id</code>为9的 数据总量是有为3的，至于为什么查出来多条，完全是执行器里面的逻辑，被调度一次就往表里塞一条数据导致的…还是就事论事，其实按这个sql 层面来理解，就是需要取出某个report_id 下最新时间点的那条数据。可惜这个sql写错了，应该先按时间倒排序 再按时间分组哈；先GROUP BY 会默认按时间正排序取出最小时间点的那条数据，不禁要问再按时间倒排序有何意义？</p>
<h3 id="改写sql"><a href="#改写sql" class="headerlink" title="改写sql"></a>改写sql</h3><p>按上面理解，改写sql 查询如下（ps:只是说明问题哈，当然sql中尽量避免使用子查询，应该是数据查询出来后逻辑筛选过滤，当然当前业务根本的解决的办法是去修改执行器里面的逻辑，存在历史数据即更新不存在则新增数据，这样才能保证一个report_id只有一条记录）</p>
<p>好，我们看下修改后查询结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/22/JtXtRH.png"
                     
                ></p>
<p>wtf! 为毛<code>report_id</code> 为9的数据查出来了, 总量为3的没被查出来了，这个时间为毛都是最小时间呢？搞得我一度还以不是<code>DESC</code> 用错了，换成<code>ASC</code>试了下，还是一毛一样的；完蛋，借助搜索引擎来搞一波，说要加上limit 查询；那我们加上看下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/22/JtvnD1.png"
                     
                ></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>这是为什么呢，为啥加上limit查询条件就可以查到对应最大时间点的那条数据了咧？</p>
<p>我们还是来看下执行解释：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/22/JNpO6e.png"
                     
                ></p>
<p>对比后发现执行解释中，加了<code>limit</code> 下面两个查询变成了<code>DERIVED</code>(被驱动的SELECT子查询)</p>
<p>关于<code>select_type</code>可以查看博客：<a href="https://www.cnblogs.com/danhuangpai/p/8475458.html" target="_blank"><a class="link"   href="https://www.cnblogs.com/danhuangpai/p/8475458.html" >mysql 查询优化 ~explain解读之select_type的解读 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></a></p>
<p>关于msql 执行计划的博客推荐：<a class="link"   href="https://blog.csdn.net/xifeijian/article/details/19773795"  target="_blank">MySQL explain执行计划解读 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>所以，我们了解到加了limit 的本质是执行计划改变了，其实不加limit 默认子查询就是查一条数据，这时候<code>select_type</code> 为简单的SELECT语句，认为两个查询语句不是子查询关系；加了limit 关键字就变成子查询语句了；至于为啥变，这就涉及到底层的知识盲区了…哈哈，开始战略性后撤！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>看来，理不辨不明；还是要多思考，才能进步哈；回到问题本身，这里sql 还有没有其他写法呢？答案是肯定的，如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT t1.report_id reportId,</span><br><span class="line">    t1.meet_data + t1.no_meet_data allNum,</span><br><span class="line">    t1.`create_date` AS createDate</span><br><span class="line">    FROM report_detail AS t1</span><br><span class="line">    INNER JOIN(SELECT MAX(create_date) AS create_date FROM report_detail GROUP BY report_id) AS t2</span><br><span class="line">    ON t1.create_date = t2.create_date</span><br><span class="line">    LEFT JOIN monitor_report mr</span><br><span class="line">      ON mr.id = t1.report_id</span><br><span class="line">    WHERE mr.data_state = 1</span><br><span class="line">    AND t1.data_state = 1</span><br><span class="line">GROUP BY t1.report_id</span><br></pre></td></tr></table></figure></div>

<p>先使用内连接，查询出最大日期作为条件，然后关联查询出最大时间的数据后，再使用左连接关联查询；</p>
<p>哈哈，简单测了下查询效率还不如子查询。因为内连接相当于report_detail这个表被遍历两遍！数据量大了就会暴露出问题来，所以还是交由逻辑处理好；</p>
<blockquote>
<p>好了，由一个bug 引发的对sql执行解释的思考就先总结到这里，我又要去改其他的bug了…漫漫背锅路，加油吧少年！</p>
</blockquote>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql,oracle,sqlServer 元数据查询</title>
    <url>/2021/0423/db-meate-data.html</url>
    <content><![CDATA[<blockquote>
<p>最近在做多数据源的配置，需要根据数据库名和表（及视图）名获取表和字段的元数据；现对于各种查询语句，总结如下：</p>
</blockquote>
<h3 id="mysql元数据"><a href="#mysql元数据" class="headerlink" title="mysql元数据"></a>mysql元数据</h3><ul>
<li>查询表及视图（表名，表&#x2F;视图，表注释）</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	table_name,</span><br><span class="line">	table_type,</span><br><span class="line">	table_comment</span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;db_name&#x27;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>查询表字段（字段名，字段类型，字段注释）</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	column_name,</span><br><span class="line">	DATA_TYPE <span class="keyword">as</span> column_type,</span><br><span class="line">	IF(COLUMN_COMMENT <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> COLUMN_COMMENT<span class="operator">=</span><span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	COLUMN_NAME, COLUMN_COMMENT) <span class="keyword">AS</span> column_comment</span><br><span class="line"><span class="keyword">FROM</span> information_schema.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_NAME<span class="operator">=</span><span class="string">&#x27;table_name&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="oracle元数据"><a href="#oracle元数据" class="headerlink" title="oracle元数据"></a>oracle元数据</h3><ul>
<li>查询表及视图（表名，表&#x2F;视图，表注释）</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	do.object_name <span class="keyword">as</span> table_name,</span><br><span class="line">	do.object_type <span class="keyword">as</span> table_type,</span><br><span class="line">	utc.comments <span class="keyword">as</span> table_remark</span><br><span class="line"><span class="keyword">from</span> dba_objects do</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> user_tab_comments utc</span><br><span class="line"><span class="keyword">on</span> utc.table_name <span class="operator">=</span> do.object_name</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">owner <span class="operator">=</span> <span class="string">&#x27;db_name&#x27;</span></span><br><span class="line"><span class="keyword">and</span> object_type <span class="keyword">in</span> (<span class="string">&#x27;TABLE&#x27;</span>,<span class="string">&#x27;VIEW&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查询表字段（字段名，字段类型，字段注释）<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="keyword">DISTINCT</span>(atc.column_name) <span class="keyword">as</span> column_name,</span><br><span class="line">	atc.data_type <span class="keyword">as</span> column_type,</span><br><span class="line">	ucc.comments <span class="keyword">as</span> column_comment</span><br><span class="line"><span class="keyword">FROM</span> all_tab_cols atc</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> user_col_comments ucc</span><br><span class="line"><span class="keyword">on</span> atc.column_name <span class="operator">=</span> ucc.column_name</span><br><span class="line"><span class="keyword">where</span> atc.table_name <span class="operator">=</span> <span class="string">&#x27;TABLE_NAME&#x27;</span></span><br><span class="line"><span class="keyword">and</span> ucc.table_name <span class="operator">=</span> <span class="string">&#x27;TABLE_NAME&#x27;</span>;</span><br><span class="line"><span class="comment">-- TABLE_NAME 大写哈，另外此sql 不一定能查出来字段注释；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">      ut.COLUMN_NAME,<span class="comment">--字段名称</span></span><br><span class="line">      uc.comments,<span class="comment">--字段注释</span></span><br><span class="line">      ut.DATA_TYPE,<span class="comment">--字典类型</span></span><br><span class="line">      ut.DATA_LENGTH,<span class="comment">--字典长度</span></span><br><span class="line">      ut.NULLABLE<span class="comment">--是否为空</span></span><br><span class="line"><span class="keyword">from</span> all_tab_columns  ut</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">JOIN</span> all_col_comments uc</span><br><span class="line"><span class="keyword">on</span> ut.TABLE_NAME  <span class="operator">=</span> uc.table_name <span class="keyword">and</span> ut.COLUMN_NAME <span class="operator">=</span> uc.column_name</span><br><span class="line"><span class="keyword">where</span> ut.TABLE_NAME<span class="operator">=</span><span class="string">&#x27;TABLE_NAME&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ut.column_name</span><br><span class="line"><span class="comment">-- 7.16补充  这种可以查出来</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><span style="color:#FF0003">tips: 若你看到此处，了解oracle如何查出表字段注释的方式，还请在此篇博客下留言，谢谢！</span></p>
<h3 id="sqlServer元数据"><a href="#sqlServer元数据" class="headerlink" title="sqlServer元数据"></a>sqlServer元数据</h3><ul>
<li>查询表及视图（表名，表&#x2F;视图，表注释）</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">t1.table_name,</span><br><span class="line">t1.table_type,</span><br><span class="line">t2.table_remark <span class="keyword">from</span></span><br><span class="line">	(<span class="keyword">select</span></span><br><span class="line">		sys.name <span class="keyword">as</span> table_name,</span><br><span class="line">		(<span class="keyword">CASE</span> sys.xtype</span><br><span class="line">			<span class="keyword">WHEN</span> <span class="string">&#x27;U&#x27;</span></span><br><span class="line">			<span class="keyword">THEN</span> <span class="string">&#x27;TABLE&#x27;</span></span><br><span class="line">			<span class="keyword">ELSE</span> <span class="string">&#x27;VIEW&#x27;</span> <span class="keyword">END</span>)<span class="keyword">as</span> table_type</span><br><span class="line">	<span class="keyword">from</span> sysobjects sys <span class="keyword">where</span> sys.xtype <span class="keyword">in</span> (<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>)) t1</span><br><span class="line">	<span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">	(<span class="keyword">SELECT</span></span><br><span class="line">		<span class="keyword">CONVERT</span>(nvarchar(<span class="number">50</span>),ISNULL(A.[name], <span class="string">&#x27;&#x27;</span>)) <span class="keyword">as</span> table_name,</span><br><span class="line">		<span class="keyword">CONVERT</span>(nvarchar(<span class="number">50</span>),ISNULL(C.[<span class="keyword">value</span>], <span class="string">&#x27;&#x27;</span>)) <span class="keyword">as</span> table_remark</span><br><span class="line">		<span class="keyword">FROM</span> sys.tables A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">		sys.extended_properties C</span><br><span class="line">		<span class="keyword">ON</span> C.major_id <span class="operator">=</span> A.object_id</span><br><span class="line">	<span class="keyword">WHERE</span> C.minor_id<span class="operator">=</span><span class="number">0</span></span><br><span class="line">) t2 <span class="keyword">on</span> t1.table_name <span class="operator">=</span> t2.table_name</span><br><span class="line"><span class="comment">-- 此sql 不能查出视图注释，若你知道其他的办法可留言告知！</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>查询表字段（字段名，字段类型，字段注释）</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	t1.column_name,</span><br><span class="line">	t2.column_type,</span><br><span class="line">	t1.column_comment</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">	B.name <span class="keyword">as</span> column_name,</span><br><span class="line">	C.value <span class="keyword">as</span> column_comment</span><br><span class="line">	<span class="keyword">FROM</span> sys.tables A</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.columns B</span><br><span class="line">	<span class="keyword">ON</span> B.object_id <span class="operator">=</span> A.object_id</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys.extended_properties C</span><br><span class="line">	<span class="keyword">ON</span> C.major_id <span class="operator">=</span> B.object_id</span><br><span class="line">	<span class="keyword">AND</span> C.minor_id <span class="operator">=</span> B.column_id</span><br><span class="line">	<span class="keyword">WHERE</span> A.name <span class="operator">=</span> <span class="string">&#x27;table_name&#x27;</span>)t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">	column_name,</span><br><span class="line">	data_type <span class="keyword">as</span> column_type</span><br><span class="line"><span class="keyword">from</span> information_schema.columns t</span><br><span class="line"><span class="keyword">where</span> t.table_name<span class="operator">=</span><span class="string">&#x27;table_name&#x27;</span>) t2</span><br><span class="line"><span class="keyword">on</span> t1.column_name <span class="operator">=</span> t2.column_name</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>查询视图，就不支持查询视图的字段及对应的字段注释了，因为他就是表的一个映射，一切都东西都在源表中有所体现，所以查表字段的不支持查视图，请知晓！呃，不知道后面会不会加hive的，要是加后面也会继续追加进来；奥利给！</p>
</blockquote>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 常用脚本</title>
    <url>/2021/0423/mysql-db-shell.html</url>
    <content><![CDATA[<blockquote>
<p>mysql的常用脚本有哪些呢？我们来做个总结</p>
</blockquote>
<h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><ol>
<li>sql语句最后指定主键<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_info1`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info1` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `deleted` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0未删除  1删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin;</span><br></pre></td></tr></table></figure></div></li>
<li>建表主键后指定主键<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_info2`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info2` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `deleted` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0未删除  1删除&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin;</span><br></pre></td></tr></table></figure></div></li>
<li>建表之后指定主键<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `user_info3`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `user_info3` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `deleted` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0未删除  1删除&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info3 <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br></pre></td></tr></table></figure></div>
注⚠️：主键才可以自增，这里需要先去掉AUTO_INCREMENT，不然此处sql 从上向下执行会报错！</li>
</ol>
<p>如果需要设置可以执行以下脚本</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*设置自增*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info3` modify id <span class="type">int</span>(<span class="number">11</span>) auto_increment;</span><br><span class="line"><span class="comment">/*修改初始自增值*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info3` auto_increment<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>复制表<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 复制表结构 */</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `user_info1_back` <span class="keyword">like</span> `user_info1`;</span><br><span class="line"><span class="comment">/* 备份表数据  生产上线前对于改动的表都需要执行此备份操作*/</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `user_info1_back` <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `user_info1`;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ol>
<li>单条：<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_info1`</span><br><span class="line">(name,password)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure></div></li>
<li>多条：<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_info1`</span><br><span class="line">(name,password)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除表</li>
</ul>
<ol>
<li>删除表和数据，不可逆<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> `user_info1` if <span class="keyword">exists</span> `user_info1`;</span><br></pre></td></tr></table></figure></div></li>
<li>删除整个表数据，不可逆<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">table</span> `user_info1`;</span><br><span class="line"><span class="comment">/* TRUNCATE 返回 0 或 -1  删除成功返回0  删除失败返回-1*/</span></span><br></pre></td></tr></table></figure></div></li>
<li>删除数据 可加where 条件删除部分数据，可逆<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> `user_info1` <span class="keyword">where</span>  id <span class="operator">=</span> <span class="number">1</span> ;</span><br><span class="line"><span class="comment">/* delete 返回删除了多少条数据/</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<ul>
<li>删除字段<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` <span class="keyword">drop</span> password;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>修改表名<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` rename <span class="keyword">to</span> `user_info_1`;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info_1` rename <span class="keyword">AS</span> `user_info1`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改表注释*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` comment <span class="string">&#x27;用户信息 表1&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li>
<li>修改表字段<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 增加字段 在指定表字段后新增，建议所有的新增脚本都这样精确标明位置*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` <span class="keyword">add</span> sex <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;1&quot; comment &quot;0女，1男&quot; after password;</span><br><span class="line"><span class="comment">/* 修改字段 名称*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` change <span class="keyword">column</span> name user_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">null</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>;</span><br><span class="line"><span class="comment">/* 修改字段 长度*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` modify sex <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> &quot;1&quot; comment <span class="string">&#x27;0男，1女&#x27;</span>;</span><br><span class="line"><span class="comment">/* 修改字段 默认值 (若本身存在默认值，则先删除;若本身不存在则可以直接设定)*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` <span class="keyword">alter</span> <span class="keyword">column</span> sex <span class="keyword">drop</span> <span class="keyword">DEFAULT</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` <span class="keyword">alter</span> <span class="keyword">column</span> sex <span class="keyword">set</span> <span class="keyword">DEFAULT</span> &quot;0&quot;;</span><br><span class="line"><span class="comment">/* 修改字段 备注*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` modify <span class="keyword">column</span> sex <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> &quot;1&quot; comment <span class="string">&#x27;0男，1女&#x27;</span>;</span><br><span class="line"><span class="comment">/* 修改字段 位置*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `user_info1` modify <span class="keyword">column</span> sex <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> &quot;1&quot; COMMENT <span class="string">&#x27;0男，1女&#x27;</span> after user_name;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<blockquote>
<p>小结：sql 的基本增删改就总结到这里，后面有需要增加的脚本会继续追加进来！</p>
</blockquote>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql本地连接报错</title>
    <url>/2021/0423/mysql-connect-error.html</url>
    <content><![CDATA[<blockquote>
<p>最近阿里云过期了，续费太贵就重新买了一个，买完想着老是自己手动装环境啥的太麻烦了，要不也搞个宝塔面板吧，这样后面安装啥的不都很方便了吗？说搞就搞，尼玛才装好试试数据库能不能连接上，沃日并不能；在宝塔中修改了配置文件中的密码，重启后还是不能连上；一直报这个错:”Access denied for user ‘root’@‘localhost’(using password: YES)” ，那怎么办继续解决呗。然后又鼓捣半天总算是搞定了；</p>
</blockquote>
<h3 id="找到mysql的安装路径"><a href="#找到mysql的安装路径" class="headerlink" title="找到mysql的安装路径"></a>找到mysql的安装路径</h3><p>宝塔安装的mysql 不再是use&#x2F;etc下了哈，不知道怎么找的；可以看宝塔面板-已安装-找到mysql-设置-存储位置</p>
<h3 id="停掉mysql"><a href="#停掉mysql" class="headerlink" title="停掉mysql"></a>停掉mysql</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld stop;</span><br></pre></td></tr></table></figure></div>
<h3 id="进入mysql的安装目录"><a href="#进入mysql的安装目录" class="headerlink" title="进入mysql的安装目录"></a>进入mysql的安装目录</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /www/server/mysql/bin;</span><br></pre></td></tr></table></figure></div>
<h3 id="跳过密码登录"><a href="#跳过密码登录" class="headerlink" title="跳过密码登录"></a>跳过密码登录</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">./mysqld_safe --skip-grant-tables;</span><br></pre></td></tr></table></figure></div>
<h3 id="根目录下执行以下命令"><a href="#根目录下执行以下命令" class="headerlink" title="根目录下执行以下命令"></a>根目录下执行以下命令</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root;</span><br><span class="line">use mysql;</span><br><span class="line">update  user set authentication_string=password(&#x27;xxx&#x27;) where user=&#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">update user  set  password=password( &#x27;xxx&#x27; ) where User= &quot;root&quot;  and Host= &quot;localhost&quot;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></div>
<h3 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld start;</span><br><span class="line">mysql -u root -p;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入刚修改的密码，验证下是否可以连接</span></span><br></pre></td></tr></table></figure></div>
<h3 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;用户名&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;密码&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">quit #退出</span><br><span class="line">systemctl restart mysqld #重启mysql</span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent #开放3306端口</span><br><span class="line">systemctl restart firewalld.service # 重启防火墙</span><br></pre></td></tr></table></figure></div>
<p>发现可以登录了，并且本地navicat也可以连上了！</p>
<blockquote>
<p>注：我用的mysql是5.8版本，高版本的命令和5.6的会有些差别；<br>查看mysql原始密码<code>grep &quot;password&quot; /var/log/mysqld.log</code><br>查看端口占用情况<code>netstat -ntulp |grep 80</code><br>根据关键字查询某个文件的安装位置：<code>find -name &#39;*.*&#39; | xargs grep &#39;php&#39;;</code> 查找php文件安装的位置</p>
</blockquote>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql之join left join踩坑记</title>
    <url>/2024/0621/mysql-join-left-join.html</url>
    <content><![CDATA[<blockquote>
<p>背景：最近优化个线上导出的功能，本来测试环境没啥问题；一上线不行了，下载超时；然后一顿改，把代码实现的逻辑全扔sql里了，发现反而更快，啥查询字段里不要加函数，分批查询啥的；没有，就是简单粗暴能查出来就行；别的事又催的紧，那就先上去看看再说吧；这不一发上去发现，有些条件下的数据还能导出，有些条件下的数据还是不能导出还是超时；优化了个寂寞，哎。。。怀着不甘的心我本地造了几万的数据量，模拟下特定条件下的数据量，想着看看是不是数据量对查询计划有影响(实际大表数据量有50w+)，所以有了这篇文章；</p>
</blockquote>
<h3 id="初始化工作建表"><a href="#初始化工作建表" class="headerlink" title="初始化工作建表"></a>初始化工作建表</h3><div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">建表mother_t(id,name,batch_date)</span><br><span class="line">建表child_t(id,name,mother_id,batch_date)</span><br><span class="line">mother表和child根据mother_id相关联，其中child_t中mother_id是mother_t 表的主键</span><br></pre></td></tr></table></figure></div>

<h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><p>6.19日期下初始化5万条数据，6.20日期下初始化500条数据，6.21日期下初始化10条数据</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ct.id <span class="keyword">from</span></span><br><span class="line">child_t ct <span class="keyword">join</span>  mother_t mt <span class="keyword">on</span> ct.mother_id <span class="operator">=</span> mt.id</span><br><span class="line"><span class="keyword">where</span> batch_date <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- 查看三个日期下的执行计划，发现一样；排除数据量的影响</span></span><br></pre></td></tr></table></figure></div>

<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>其中<code>mother_t </code>表和<code>child\_t</code>表是1对1关系；这里有个小插曲，之前child表关联mother表是left join关联，同事说一对一的改为join关联就好了，测试环境测了下发现left join 和join 查询出来的数据量不同，但是业务肯定是要业务主表有数据的，子表没数据也不能影响主表看数；因为这边数据质量一直都不算好，所以又改回了left join;并且查看了这两张表join 和left join 查询的执行计划发现一样，所以就没放在心上；*</p>
<p>哎，终究是出问题；那就看看问题实际出在哪里吧；完成上述基础事情，我迫不及待的打开数据；看了下执行计划，发现确实是一样的啊，没毛病啊…等等，不对，这里实际业务场景还有一张brother表(大概就是那么个意思，理解就行，这里不描述具体业务)；其中mother作为主表，又存了brother表的主键；</p>
<p>所以改之前sql</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> m.id <span class="keyword">from</span> mother_t m</span><br><span class="line"><span class="keyword">join</span> brother_t bro <span class="keyword">on</span> m.bro_id <span class="operator">=</span> bro.id</span><br><span class="line"><span class="keyword">join</span> child_t ch <span class="keyword">on</span> ch.mother_id <span class="operator">=</span> m.id</span><br><span class="line"><span class="keyword">where</span> batch_date <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>&#x20;改之后sql</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> m.id <span class="keyword">from</span> mother_t m</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> brother_t bro <span class="keyword">on</span> m.bro_id <span class="operator">=</span> bro.id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> child_t ch <span class="keyword">on</span> ch.mother_id <span class="operator">=</span> m.id</span><br><span class="line"><span class="keyword">where</span> batch_date <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>难道这里，主表不同；join 和left join执行计划会变；我迫不及待的 调换了下主次表的顺序，再次比对其执行计划；发现果真有坑啊！！！</p>
<h3 id="执行计划如下图"><a href="#执行计划如下图" class="headerlink" title="执行计划如下图"></a>执行计划如下图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/db/24/6/21/no_index.png"
                     
                ></p>
<p>啊这，这和我想的不一样啊；一对1的关系，join 和left join应该没啥区别，性能没差才对啊；</p>
<p>然后，我问了波AI</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">me:你是个java开发工程师，mysql在联表查询时遇到了个问题，现在有两张表 表A 表B</span><br><span class="line">其中表A中存在 表B的主键，两张表根据表B的主键有一对一的关系，查询的时候你发现表A做主表时，</span><br><span class="line">join 和left join的执行计划相同；但是当你交换表A 表B的顺序也就是表B 做主表后，</span><br><span class="line">你会发现join 和left join的执行计划不同了，其中left join 两张表都走的全表扫描；这是什么原因？</span><br><span class="line"></span><br><span class="line">ai:这个问题可能是由于MySQL的查询优化器在处理查询时，根据表的大小、索引和其他因素来选择最佳的执行计划。</span><br><span class="line">当你将表A作为主表时，查询优化器可能认为使用全表扫描是最优的选择，因为它可以更快地找到匹配的行。</span><br><span class="line">然而，当你将表B作为主表时，查询优化器可能认为使用索引扫描是更好的选择，因为它可以避免全表扫描带来的性能损失</span><br><span class="line"></span><br><span class="line">#感觉回答了个寂寞，索引优化器是个黑洞；只能根据执行计划来看了，基于上面的回答和上面执行计划的截图我们只需要记住，</span><br><span class="line">建了“外键”的表做主表，那么join 和left join的查询效率相当；反之则left join都会走全表；</span><br></pre></td></tr></table></figure></div>

<h3 id="加索引会怎么样？"><a href="#加索引会怎么样？" class="headerlink" title="加索引会怎么样？"></a>加索引会怎么样？</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/db/24/6/21/had_index.png"
                     
                ></p>
<p>加了索引，发现不管哪张表做主表，只有join的关联条件才会走索引，left join 依然走全表扫描；好吧，我再次问了下ai</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">me:添加了索引后，发现；A做主表是  join  B_id 走了索引，left join B_id没有走索引，这是为何？</span><br><span class="line"></span><br><span class="line">ai:当使用JOIN时，MySQL查询优化器通常会选择使用索引来提高查询性能。这是因为索引可以大大减少需要扫描的数据量，</span><br><span class="line">从而提高查询速度。</span><br><span class="line">然而，当你使用LEFT JOIN时，情况就不同了。在执行LEFT JOIN时，MySQL会先扫描左表（即主表），然后根据连接条件查找右表中的匹配行。</span><br><span class="line">由于左表是主表，所以MySQL无法确定右表中是否存在匹配行，因此它必须扫描整个右表以找到所有可能的匹配行。</span><br><span class="line">这就是为什么在使用LEFT JOIN时，即使已经添加了索引，MySQL仍然会进行全表扫描的原因。</span><br><span class="line">如果你希望在使用LEFT JOIN时也走索引，可以考虑将右表作为主表，或者使用子查询来实现相同的效果;</span><br><span class="line"></span><br><span class="line">#好吧，又学到了；总结就是，left join 时由于左边的是一定要的结果，所以会全表扫描；</span><br><span class="line">如果左边表里存在“外键” 会走索引，否则需要交换表位置；</span><br><span class="line">另外join 是根据两边匹配来取结果集，所以能走索引就走索引了</span><br></pre></td></tr></table></figure></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，我们总算明白了join 和left join带来的性能差异点在哪里，在实际的应用中如果能用join 就用join 必须用left join时最好保证，含有关联关系的表作为主表，多张表关联无法兼顾时可采用子查询的方式；实践出真知，奥利给！</p>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/2021/0423/docker-install.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>什么是docker?</p>
<p>如果我们本地的服务要想起多个，而我又没买多台服务器的情况下，我们一般可以在自己的机子上安装虚拟机；而虚拟机就是模拟我们本机的环境，将本地磁盘拆成多个安装多个vm环境，供我们程序在上面运行；虚拟机只是物理上的隔离，并没有给我们将宿主机的环境及配置信息一起拷贝过去，这个时候我们就需要自己手动一遍遍的安装环境和配置，重复而又繁琐</p>
<p>而Docker 是一个开源的应用容器引擎，它可以将我们本地的应用程序，运行环境和配置打包到一个容器中，从而在这个容器中运行我们的应用程序。对于我们开发人员来说，它的虚拟化创建过程，只是几条命令而已，大大提高了开发部署的效率，相比于虚拟机更经济，更节省空间；</p>
<h3 id="docker官网"><a href="#docker官网" class="headerlink" title="docker官网"></a>docker官网</h3><p><a class="link"   href="https://docs.docker.com/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="docker架构图"><a href="#docker架构图" class="headerlink" title="docker架构图"></a>docker架构图</h3><p><a href="https://imgtu.com/i/gVhWb8"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/01/gVhWb8.png"
                     
                ></a></p>
<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><ul>
<li><p>Linux的文档：<a class="link"   href="https://docs.docker.com/engine/install/" >https://docs.docker.com/engine/install/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>基于CentOS的安装：<a class="link"   href="https://docs.docker.com/engine/install/centos/" >https://docs.docker.com/engine/install/centos/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<blockquote>
<p>安装之前我们看下环境信息</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZwz91sexrqau7hxzvaeelZ ~]# uname -r #系统内核在 3.10.0 以上才可以使用docker</span><br><span class="line">4.18.0-147.8.1.el8_1.x86_64</span><br><span class="line">[root@iZwz91sexrqau7hxzvaeelZ ~]# cat /etc/os-release #版本  centos8</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;8&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;8&quot;</span><br><span class="line">PLATFORM_ID=&quot;platform:el8&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 8&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:8&quot;</span><br><span class="line">HOME_URL=&quot;https://centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-8&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;8&quot;</span><br><span class="line">[root@iZwz91sexrqau7hxzvaeelZ ~]#</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>卸载已安装docker</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>环境要求及配置aliyun镜像地址</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gcc 环境</span></span><br><span class="line">yum install -y gcc</span><br><span class="line">yum install -y gcc-c++</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install -y yum-utils</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">国外很慢</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span></span><br><span class="line"><span class="language-bash">    --add-repo \</span></span><br><span class="line"><span class="language-bash">    https://download.docker.com/linux/centos/docker-ce.repo  <span class="comment"># 国外的，别配置</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置镜像地址</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>更新索引包</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>安装docker引擎</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>启动docker</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>运行hello-world</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></div>
<p><a href="https://imgtu.com/i/gV5GOx"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/01/gV5GOx.png"
                     
                ></a><br>我们可以看下这个启动过程：我们去运行hello-world时，docker仓库会去找对应的镜像。发现没找到就从仓库中pull下来一个最新的hello-world镜像，这是官方默认的测试程序，测试你的docker是否安装好；</p>
<blockquote>
<p>配置阿里云镜像加速器</p>
</blockquote>
<h3 id="阿里云容器镜像加速"><a href="#阿里云容器镜像加速" class="headerlink" title="阿里云容器镜像加速"></a>阿里云容器镜像加速</h3><p><a href="https://imgtu.com/i/gV4qWd"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/01/gV4qWd.png"
                     
                ></a></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面的镜像加速地址每个人都不一样，配置为自己的即可</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://81t8q0cr.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>小结：至此我们已经在服务器上安装好docker了；后面我们再安装，运行，停止，删除其他软件，一条docker命令就可以了；</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装可视化Portainer界面</title>
    <url>/2021/0502/portainer-install.html</url>
    <content><![CDATA[<blockquote>
<p>接上篇，我们安装好docker以后，很多时候我们为了直观的看到docker的运行情况，我们一般会安装一个可视化界面Portainer。</p>
</blockquote>
<h3 id="什么是Portainer"><a href="#什么是Portainer" class="headerlink" title="什么是Portainer"></a>什么是Portainer</h3><p>Portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。</p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询当前有哪些Portainer镜像</span></span><br><span class="line">docker search portainer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像</span></span><br><span class="line">docker pull portainer/portainer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行portainerUI图形界面</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d后台运行 --name 命名 -p 小写p暴露指定端口，大写P随机暴露端口(需要确认端口号是开放的) -v挂载(后面详说)</span></span><br><span class="line">docker run -d --name portainerUI -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer</span><br></pre></td></tr></table></figure></div>
<p>启动完后，我们ip+端口9000访问即可，看到如下界面证明访问成功！<br><a href="https://imgtu.com/i/gZxnOO"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/02/gZxnOO.png"
                     
                ></a><br>如果访问失败，则去看下端口安全组配置还有端口是否被占用!<br>注：如果登录页面看到了，创建用户却失败了；那就把容器删了，重新运行一下就好</p>
<p>接下来，因为我们是当前的环境，所以我们选择LOCAL连接；<br><a href="https://imgtu.com/i/gep3tJ"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/02/gep3tJ.png"
                     
                ></a><br>可以从图中看到我们目前服务器的一些信息：其中包括服务器是2核4G的，数据卷相关配置信息保存在路径&#x2F;var&#x2F;run&#x2F;docker.sock下；运行部署的水为0,容器有1个，镜像有两个，数据卷共有3个，支持的是网络通信方式有3种；</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>不建议过于依赖这个图形化界面，docker的命令很多；我们还是要都去练习，才能熟系；就像宝塔一样，一定是你各种环境配置你会配置后，你再用图形化界面操作才能事半功倍；</p>
<blockquote>
<p>小结：protainer docker的图形化界面基本已经搭建完成；后面我们搭建docker swarm集群，k8s集群它都能提供一定的帮助；</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像，容器，挂载卷</title>
    <url>/2021/0502/docker-base-info.html</url>
    <content><![CDATA[<blockquote>
<p>接上篇，这个5.1继续肝docker;</p>
</blockquote>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>什么叫镜像？</p>
<p>Docker镜像是一个特殊的文件系统(分层的联合文件系统)，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等信息)。</p>
<p>什么叫分层的文件系统呢？</p>
<p>例如我们去dockerhub上搜索centos，我这里安装的是centos8的版本，所以去看看8下面都有啥吧；<br><a href="https://imgtu.com/i/gePZpd"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/02/gePZpd.png"
                     
                ></a><br>标红的地方点进去，我们看下它的dockerfile（dockerfile是指构建docker镜像的指令脚本）</p>
<p><a href="https://imgtu.com/i/geP639"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/02/geP639.png"
                     
                ></a><br>可以看到centos8的dockerfile很简单，from是说明它基于什么构建的，可以看到centos8是基于scratch这个空镜像来构建的；add 添加一个centos的压缩包；LABEL是标签说明，CMD是运行完此镜像后默认执行的指令，可以看到启动centos8镜像后，它指定进入了bash脚本界面；</p>
<p>官方说明：scratch镜像是一个空的镜像，可以用于构建busybox等超小镜像，可以说是真正的从零开始构建属于自己的镜像</p>
<p>注📢：macos系统其实也采用了分层的文件系统，去dockerhub搜Ubantu也可以看到它对应的镜像；或者你在升级你的mac系统时，如果点开详情，或者看它的更新包，可以看到它的更新包中包含了基于上次安装的数据卷(volumes)；</p>
<p>docker镜像常用相关命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls # 列出当前宿主机上所有镜像</span><br><span class="line">docker image ls ubuntu:16.04 # 列出指定的镜像</span><br><span class="line">docker pull hello-world #拉取镜像</span><br><span class="line">docker run hello-world #运行镜像</span><br><span class="line">docker rmi hello-world #删除镜像</span><br><span class="line">docker run -i -t --rm ubuntu:16.04 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-i：允许你对容器内的标准输入进行交互</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-t：在新容器内指定一个伪终端或终端</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">–<span class="built_in">rm</span>：容器退出后立即删除容器。一般情况下，无需指定此参数。一般我测试用的话可以加上，容器停止后立即删除容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ubuntu:16.04：以此镜像为基础启动容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/bin/bash：指定的交互式Shell</span></span><br><span class="line">docker inspect 578c3e61a98c #查看指定镜像id 镜像的详情</span><br><span class="line">docker image rm 578c3e61a98c # docker删除指定镜像Id镜像</span><br><span class="line">docker image rm $(docker image ls -q) #删除所有镜像</span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e &quot;ES_JAVA_OPTS=-Xms64m -Xmx512m&quot; elasticsearch:7.7.1 # 后台运行名称为elasticsearch的镜像，并指定端口映射；将9300映射到9200的宿主机端口上，-e指定单机运行模式，-e指定运行的java环境配置 容器名称为elasticsearch:7.7.1</span><br></pre></td></tr></table></figure></div>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>docker的镜像启动后就是一个容器了，之前我们安装docker时，运行了HelloWorld的测试程序镜像，那么它启动后就是一个容器实例（就是我们运行的服务）；</p>
<p>我们看下protainerUi容器的详情：<br><a href="https://imgtu.com/i/geknXR"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/02/geknXR.png"
                     
                ></a></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        # 发现镜像Id580c0e4e98b06d 是容器id的前缀</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:580c0e4e98b06d258754cf28c55f21a6fa0dc386e6fe0bf67e453c3642de9b8b&quot;,</span><br><span class="line">        # 用的是最新的版本</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;portainer/portainer:latest&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;portainer/portainer@sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;buildkit.dockerfile.v0&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-03-18T19:53:42.48462213Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;&quot;,</span><br><span class="line">        # 容器配置</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: null,</span><br><span class="line">            &quot;Cmd&quot;: null,</span><br><span class="line">            &quot;Image&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;DockerVersion&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            # 绑定的端口</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;9000/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            # 容器和宿主机文件映射</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: null,</span><br><span class="line">            &quot;Image&quot;: &quot;&quot;,</span><br><span class="line">            # 数据卷为空</span><br><span class="line">            &quot;Volumes&quot;: &#123;</span><br><span class="line">                &quot;/data&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: [</span><br><span class="line">                &quot;/portainer&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;Size&quot;: 79085285,</span><br><span class="line">        &quot;VirtualSize&quot;: 79085285,</span><br><span class="line">        # 驱动</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/12662c46247e8aaf8712d025187a532bdc2c87d9ecdef2074deb38aaefcf0a5d/diff:/var/lib/docker/overlay2/4548e695971c596b459c5c3ef688f96b7b2b35969a109d90c21933878a052e4e/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/7752938c5962b1fc34cbe172f43ee485b9212ea87df836764298283ddd4c7a35/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/7752938c5962b1fc34cbe172f43ee485b9212ea87df836764298283ddd4c7a35/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/7752938c5962b1fc34cbe172f43ee485b9212ea87df836764298283ddd4c7a35/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            # portainer镜像是基于以下镜像而来的，可以看到有三层</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:8dfce63a73970a18bcc2ca447d9c252aedd3157e9ee02a88e66c53571279aee9&quot;,</span><br><span class="line">                &quot;sha256:11bdf2a940a7eb35fe69359d45eaeb6f8553a682a19e26db49d4c924588bb6c4&quot;,</span><br><span class="line">                &quot;sha256:658693958bcb13c9d33a49d82f1e1297073066bec8d8b07dd49357ad5c08ce58&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<p>docker容器相关命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker start|stop|restart hello-world|578c3e61a98c # 启动|停止|重启指定 容器名称|容器id的容器</span><br><span class="line">docker inspect 578c3e61a98c #查看指定容器id的详情</span><br><span class="line">docker exec -it 578c3e61a98c|hello-world /bin/sh #进入指定 容器id|容器名称 的容器</span><br><span class="line">docker rm -f 578c3e61a98c|hello-world # 强制删除指定 容器id|容器名称 的容器</span><br><span class="line">docker stats 578c3e61a98c|hello-world # 查看指定 容器id|容器名称 的容器占用资源情况</span><br><span class="line">docker top 578c3e61a98c|hello-world # 查看指定 容器id|容器名称 的容器正在运行的进程</span><br><span class="line">docker logs 578c3e61a98c|hello-world # 查看指定 容器id|容器名称 的容器的日志</span><br></pre></td></tr></table></figure></div>
<h3 id="卷挂载"><a href="#卷挂载" class="headerlink" title="卷挂载"></a>卷挂载</h3><p>我们知道，docker是一种虚拟化的方式，根据需求将环境和配置、应用一起打包后，然后运行在宿主机上来对外提供服务的；<br>docker为了数据持久化，提供了数据卷；把数据卷(文件目录)挂载到本地后，这样即使删除了容器，数据也还在本地；真正做到删库跑路；</p>
<p>数据卷可以在一个或多个容器间通信，实现数据的持久化和共享；和我们将数据拷贝到另一个目录下的原理是一样的；<br>示例：<br>我们下载个tomcat并启动下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm tomcat9.0 #测试运行tomcat9.0镜像 没找到默认拉取最新的并将tag命名为9.0</span><br></pre></td></tr></table></figure></div>
<p>下载并启动完后，我们查看镜像发现确实多了个tomcat9.0，这时候由于我们没有配置端口映射，直接访问localhost:8080是在宿主机上访问的，肯定访问不到，所以我们得进入容器内访问，发现访问报404,所以服务实际上启动了的，至于为啥404我们后面再分析；<br><a href="https://imgtu.com/i/gmHs4x"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/03/gmHs4x.png"
                     
                ></a></p>
<p>退出，可以看到容器被删除了；接下来我们正常启动下，带上端口映射和对应镜像的tag,如果不指定tag会去下载最新的版本并启动;我们这里就使用刚下载的就好<br><a href="https://imgtu.com/i/gmbxyD"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/03/gmbxyD.png"
                     
                ></a><br>启动完后，我们直接在服务器上访问，发现可以连通了，但是同样报404；<br><a href="https://imgtu.com/i/gmqR7d"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/03/gmqR7d.png"
                     
                ></a><br>我们进入容器看到webapps下发现啥都没有，能不报404吗？一般我们用tomcat部署项目，都是放在tomcat webapps这个目录下的，如果我们后面采用集群部署项目，那么多个tomcat容器，难道我都要每次都进入容器把应用拷进来;docker其实也想到了，docker可以提供卷挂载，我们只需要将容器中指定目录挂载到我们主机上，就可以实现部署一份，多份同步了；</p>
<p>同样，我们思考下容器启动了后，数据放在哪儿？放在容器中，删除容器的话是不是容器里的数据就没了，所以为了数据的同步持久化，docker提供了数据卷，我们同样可以将数据卷和一些重要信息放在本地，这样即使删除了容器，数据还在本地；卷可以在一个或多个容器间通信，提供数据的持久化和数据共享；</p>
<blockquote>
<p>测试挂载</p>
</blockquote>
<p>我们使用下载的centos镜像，运行进入容器发现容器没有运行，<code>docker ps</code>查看运行中的容器，<code>docker ps -a</code>查看所有容器；因为我们下载的centos里面啥都没有，没有做任何事情docker默认不启动；<br><a href="https://imgtu.com/i/gmjng0"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/04/gmjng0.png"
                     
                ></a></p>
<p>那我们测试挂载启动看下，我们将容器的文件目录挂载到主机的home目录下：<br>我们启动centos容器后，看下是否有挂载;查看容器详情中的mounts信息，发现已经挂载上了；</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps # 查看运行的容器</span><br><span class="line">docker inspect 9bdcdbaf27fa # 查看容器详情</span><br></pre></td></tr></table></figure></div>
<p><a href="https://imgtu.com/i/gmj5Vg"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/04/gmj5Vg.png"
                     
                ></a></p>
<p>接着我么测试下往home目录下写东西，看容器中是否相应的文件产生，反之再试下容器中写东西，看主机是否同步；<br>我们先看下主机&#x2F;homr目录下是否是空的.可以看到容器和主机间通过挂载是可以实现双向同步；</p>
<p><a href="https://imgtu.com/i/gmv3sf"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/04/gmv3sf.png"
                     
                ></a></p>
<p>同理：我们用docker安装mysql时，挂载关键的配置文件即可，这样即使我们删除了容器，一旦重启容器，数据就会同步到容器中；实现本地-多容器同步；</p>
<p>dockerhub上官方关于mysql的同步挂载的命令如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker安装mysql 必要步骤： -e MYSQL_ROOT_PASSWORD=my-secret-p @ mysql的初始密码！</span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql核心1  配置</span></span><br><span class="line">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql核心2 数据存储！</span></span><br><span class="line">docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>小结：至此我们关于docker的镜像容器挂载卷都有认识，通过挂载通信，可以很清晰的感受到docker的便捷;</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之dockerFile</title>
    <url>/2021/0507/docker-file.html</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，这个脚本就是Dockerfile；<br>Dockerfile是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建；</p>
<h3 id="dockerFile指令"><a href="#dockerFile指令" class="headerlink" title="dockerFile指令"></a>dockerFile指令</h3><p>基本指令如图：<br><a href="https://imgtu.com/i/g8knCd"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/07/g8knCd.jpg"
                     
                ></a><br>从上图我们可以看到dockerFile的一些相关指令，<br>完整指令如图：<br><a href="https://imgtu.com/i/g8Aoyq"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/07/g8Aoyq.jpg"
                     
                ></a></p>
<h3 id="自定义一个centos镜像"><a href="#自定义一个centos镜像" class="headerlink" title="自定义一个centos镜像"></a>自定义一个centos镜像</h3><p><a href="https://imgtu.com/i/g8VCgs"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/07/g8VCgs.png"
                     
                ></a><br>我们现在写一个dockerFile自定义一个centos镜像让它有这些命令；</p>
<p>构建一个dockerFile我们一定要有一个dockerFile文件，文件的命名可以随意，但是不建议随意命名，官方的命名就是DockerFile;<br>我们在本机的home目录下新建一个文件<code>dokerFile</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mkdir dockerFile</span><br><span class="line">cd dockerFile</span><br><span class="line">vim myDokerFile-centos</span><br></pre></td></tr></table></figure></div>

<p><a href="https://imgtu.com/i/gNXWVg"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gNXWVg.png"
                     
                ></a><br>可以看到我们是基于centos来构建的，注明了作者，定义了一个MYPATH的环境变量并指定为工作目录，在运行构建的时候安装vim命令和网络工具，对外暴露的是80端口，容器启动的时候输出自定义的环境变量，构建完成后输出一个bilid-end标记；最后跳转到默认的控制台；</p>
<p>有了这个dockerFile后我们基于它构建一个我们自己的镜像</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f myDokerFile-centos -t mycentos:1.0 . # -f指哪个文件 不指定就会去找默认的名为DockeFile的文件 -t起个镜像的名字 注意最后的点别掉了</span><br></pre></td></tr></table></figure></div>
<p><a href="https://imgtu.com/i/g8n9oV"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/08/g8n9oV.png"
                     
                ></a></p>
<p>我们通过命令看下镜像的构建历史，可以看到镜像确实是按照我们的命令一层一层构建的；而且每一条命令执行完毕，就提交生成一个新的镜像层；<br><a href="https://imgtu.com/i/g8nUTP"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/08/g8nUTP.png"
                     
                ></a>、</p>
<h3 id="CMD-ENTRYPOINT"><a href="#CMD-ENTRYPOINT" class="headerlink" title="CMD &amp; ENTRYPOINT"></a>CMD &amp; ENTRYPOINT</h3><p>疑问？我们构建镜像的时候，用了三个CMD命令，发现只有最后一个CMD命令生效了，其实关于dockerfile 的CMD和ENTRYPOINT 命令有一个的区别，其中一个最主要的区别的时，CMD，ENTRYPOINT 命令编写多个时会只有最后一个生效，其中CMD命令如果在启动的时候加了命令会被替换，而ENTRYPOINT命令如果在启动的时候加了命令是在原命令中追加；具体实践很简单，自己尝试下即可；</p>
<p>CMD和ENTRYPOINT的应用场景，比如我们指定环境的运行内存时，如果我们用了CMD命令，那么用户在启动镜像的时候就可以更改；如果我们使用了ENTRYPOINT命令，那么用户只能在启动容器的时候追加命令，不能更改；</p>
<p>如果在Dockerfile中同时写了ENTRYPOINT和CMD，并且CMD指令不是一个完整的可执行命令，那么CMD指定的内容将会作为ENTRYPOINT 的参数；</p>
<p>如果在Dockerfile中同时写了ENTRYPOINT和CMD，并且CMD是一个完整的指令，那么它们两个会互相覆盖，谁在最后谁生效</p>
<h3 id="dockerFile卷挂载"><a href="#dockerFile卷挂载" class="headerlink" title="dockerFile卷挂载"></a>dockerFile卷挂载</h3><p>之前我们使用-v命令指定了tomcat的目录挂载，接下来我们看看另外一种挂载方式：dockerFile卷挂载</p>
<p>同样我们还是在home目录下新建一个测试目录，测试下dockerFile的卷挂载<br><a href="https://imgtu.com/i/gN41Vx"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gN41Vx.png"
                      alt="gN41Vx.png"
                ></a><br>vim 进去我们编写一个简单的dockerFile脚步</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;/datavolume01&quot;,&quot;/datavolume02]</span><br><span class="line">CMD echo &quot;------build-end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure></div>
<p>注📢：命令后面都要用空格<br>我们执行看下<br><a href="https://imgtu.com/i/gNb4c8"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gNb4c8.png"
                     
                ></a><br>执行完毕后，我们启动刚刚创建的镜像，看下下面的挂载，果然已经挂载了我们需要的目录<br><a href="https://imgtu.com/i/gNqOVH"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gNqOVH.png"
                     
                ></a><br>接下来我们进入datavolume01下，新建一个aaa.text文件，后面看下这个文件被同步到哪里去了；<br><a href="https://imgtu.com/i/gNXtKK"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gNXtKK.png"
                     
                ></a><br>我们新开一个窗口，看下运行中的docker,因为我们运行镜像时没有起容器的别名，所以docker给了个默认的名称，我们看最新运行的那个镜像即可<br><a href="https://imgtu.com/i/gNLmR0"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gNLmR0.png"
                     
                ></a></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;b50422404045013251322ac0e02f64aee621898a89c1d78c0d78e77b53724eaa&quot;,</span><br><span class="line">        &quot;Source&quot;: &quot;/var/lib/docker/volumes/b50422404045013251322ac0e02f64aee621898a89c1d78c0d78e77b53724eaa/_data&quot;,</span><br><span class="line">        &quot;Destination&quot;: &quot;/datavolume01&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">        &quot;RW&quot;: true,</span><br><span class="line">        &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;d8383a8dc4b2016c0df7a29fe05f6b3dabd57565d63624e83a6ca08719ccbfb0&quot;,</span><br><span class="line">        &quot;Source&quot;: &quot;/var/lib/docker/volumes/d8383a8dc4b2016c0df7a29fe05f6b3dabd57565d63624e83a6ca08719ccbfb0/_data&quot;,</span><br><span class="line">        &quot;Destination&quot;: &quot;/datavolume02&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">        &quot;RW&quot;: true,</span><br><span class="line">        &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<p>对应的容器就是了；我们用inspect命令看下容器的详情，我么看下它下面的挂载详情，可以看到我们刚才设置的两个挂载目录以及挂载上去了，并且不出意外这个source就是docker容器和我们本机目录默认的挂载地址；</p>
<p><a href="https://imgtu.com/i/gNXWVg"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/10/gNXWVg.png"
                     
                ></a></p>
<p>果然，就是这个目录下，我们刚新增的目录被挂载到这个目录下了，且新增的文件已经同步过去了</p>
<h3 id="匿名挂载-具名挂载"><a href="#匿名挂载-具名挂载" class="headerlink" title="匿名挂载&amp;具名挂载"></a>匿名挂载&amp;具名挂载</h3><p>上面我们看到，我们用dockerFile脚本指定了两个挂载卷，docker默认把这两个卷挂载到docker目录下，且随机生成了一个id,辨识度不高，难以维护；这种docker自动挂载的我们没有指定挂载目录的就是匿名挂载，那什么样的才是具名挂载呢？</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume help #查看卷相关命令</span><br><span class="line">docker volume ls #查看所有的挂载卷</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">docker run -d -P --name tomcat01 -v /etc/tomcat tomcat:9.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载</span></span><br><span class="line">docker run -d -P --name tomcat02 -v tomcatconfig:/etc/tomcat tomcat:9.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定目录挂载</span></span><br><span class="line">docker run -d -P --name tomcat03 -v /home/data/tomcatconfig:/etc/tomcat tomcat:9.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v命令后路径如果是/开头说明就是一个指定目录挂载，如果不是/开头就是指定名称的具名挂载</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>小结：本篇博客我们自己写了一个dockerFile文件，看到了镜像的加载过程，对与镜像的分层概念有了更深层次的理解；也通过dokcerFile的VOLUME 命令了解了dockerFile挂载卷的方法，以及了解了具名挂载和匿名挂载的区别；</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之网络通信(待填坑)</title>
    <url>/2021/0515/docker-net.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之集群搭建(待填坑)</title>
    <url>/2021/0515/docker-cluster.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot项目之dockerFile镜像构建(待填坑)</title>
    <url>/2021/0515/docker-file-springboot.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机上安装单机kafka</title>
    <url>/2022/0417/install-kafka.html</url>
    <content><![CDATA[<blockquote>
<p>虚拟机安装过程省略，只需要下载对应的虚拟机和镜像即可；过程比较简单，去B站看看即可；本次安装环境说明，CentOS6.10(64bit),kafka2.11-2.2.0,zookeeper-3.4.6;</p>
</blockquote>
<p>对应下载地址<br><a class="link"   href="https://mirrors.aliyun.com/centos-vault/6.10/isos/x86_64/" >ali镜像 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://kafka.apache.org/downloads" >kafka下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://archive.apache.org/dist/zookeeper/" >zk下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1.安装jdk"></a>1.安装jdk</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -ivh jdk-8u301-linux-x64.rpm</span><br></pre></td></tr></table></figure></div>

<h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi .bashrc</span><br><span class="line">JAVA_HOME=/usr/java/latest</span><br><span class="line">PATH=<span class="variable">$PATH</span>:JAVA_HOME/bin</span><br><span class="line">CLASSPATH=.</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> CLASSPATH</span><br><span class="line">soure</span><br></pre></td></tr></table></figure></div>

<h3 id="3-更改主机名"><a href="#3-更改主机名" class="headerlink" title="3.更改主机名"></a>3.更改主机名</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network 下修改</span><br><span class="line">NETWORK=<span class="built_in">yes</span></span><br><span class="line">HOSTNAME=CentOS101</span><br><span class="line"><span class="comment">#修改主机映射</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment">#重启reboot</span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure></div>

<h3 id="4-关闭防火墙"><a href="#4-关闭防火墙" class="headerlink" title="4.关闭防火墙"></a>4.关闭防火墙</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">service iptables status</span><br><span class="line">service iptables stop(对应开启是service iptables start)</span><br><span class="line"><span class="comment"># 将iptables 的开机自启服务给关闭掉</span></span><br><span class="line">chkconfig iptables off</span><br><span class="line">chkconfig --list | grep iptables</span><br></pre></td></tr></table></figure></div>

<h3 id="5-解压zk到-usr目录下并修改配置"><a href="#5-解压zk到-usr目录下并修改配置" class="headerlink" title="5.解压zk到&#x2F;usr目录下并修改配置"></a>5.解压zk到&#x2F;usr目录下并修改配置</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxf zookeeper-3.4.6.tar.gz -C /usr/</span><br><span class="line"><span class="built_in">cd</span> /usr/zookeeper-3.4.6/</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> conf/</span><br><span class="line"><span class="comment">#进入到conf目录下拷贝sample-zk的配置文件</span></span><br><span class="line"><span class="built_in">cp</span> conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class="line"><span class="comment">#修改配置，将zk服务的数据目录修改到root/zkdata下</span></span><br><span class="line">vi conf/zoo.cfg</span><br><span class="line">dataDir=/root/zkdata</span><br><span class="line"><span class="built_in">mkdir</span> /root/zkdata</span><br><span class="line">./bin/zkServer.sh</span><br><span class="line"><span class="comment">#可以看到zk启动停止的各种命令</span></span><br><span class="line"><span class="comment">#启动zk</span></span><br><span class="line">./bin/zkServer.sh start zoo.cfg</span><br><span class="line"><span class="comment">#jps 查看与java 进程相关的进程 有看到QuorumPeerMain 这样一个进程代表zk是启动了</span></span><br><span class="line"><span class="comment">#但是zk启动了不一定能用，我们再用以下命令来看zk的状态</span></span><br><span class="line">./bin/zkServer.sh status zoo.cfg</span><br><span class="line"><span class="comment">#看到 standalone 代表zk是单机启动可用的状态</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-解压kafka到-usr目录下并修改其配置"><a href="#6-解压kafka到-usr目录下并修改其配置" class="headerlink" title="6.解压kafka到&#x2F;usr目录下并修改其配置"></a>6.解压kafka到&#x2F;usr目录下并修改其配置</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxf kafka_2.11-2.2.0.tgz  -C /usr/</span><br><span class="line"><span class="built_in">cd</span> /usr/kafka_2.11-2.2.0/</span><br><span class="line"><span class="built_in">ls</span> bin/</span><br><span class="line"><span class="comment"># 可以看到kafka的各种sh脚本命令</span></span><br><span class="line"><span class="comment">#接下来修改kafka日志的存储位置，socket连接地址，zk的连接地址</span></span><br><span class="line">vi config/server.properties</span><br><span class="line"><span class="comment">#去掉listeners 前面注释的#号，改为</span></span><br><span class="line">listeners=PLAINTEXT://CentOS101:9092</span><br><span class="line">log.dirs=/tmp/kafka-logs 改为 log.dirs=/usr/kafka-logs</span><br><span class="line">zookeeper.connect=localhost:2181改为zookeeper.connect=CentOS101:2181</span><br><span class="line"><span class="comment">#保存退出后启动kafka</span></span><br><span class="line">./bin/kafka-server-start.sh -daemon config/server.properties <span class="comment">#(daemon 表示后台运行)</span></span><br><span class="line"><span class="built_in">cd</span> /usr</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment">#可以看到kafka启动的时候创建了我们指定的kafka-logs</span></span><br><span class="line"><span class="comment">#同样我们可以进入到kafka的目录下执行关闭，kafka关闭是一个优雅的过程，可运行jps命令查看</span></span><br><span class="line">./bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure></div>

<h3 id="7-kafka命令"><a href="#7-kafka命令" class="headerlink" title="7.kafka命令"></a>7.kafka命令</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kafka创建topic分区及副本数，注意副本数不能大于分区数</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092 --create --topic topic01 --partitions 3 --replication-factor 1</span><br><span class="line"><span class="comment">#kafak创建消费组（重复执行以下命令多次表示group1中创建了多个消费者，同一个组的消费者是均分消息的；不同组是广播的形式）</span></span><br><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server CentOS101:9092 --topic topic01 --group group01</span><br><span class="line"><span class="comment">#kafka发送消息</span></span><br><span class="line">./bin/kafka-console-producer.sh --broker-list CentOS101:9092 --topic topic01</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机上安装集群kafka</title>
    <url>/2022/0417/install-kafka-cluster.html</url>
    <content><![CDATA[<blockquote>
<p>接上篇我们，我们安装了单机版的kafka,现在我们根据单机版的kafka来搭建kafka配置。是为了可以把一些配置分发到其他机子上，提高效率</p>
</blockquote>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-前置步骤"><a href="#1-前置步骤" class="headerlink" title="1.前置步骤"></a>1.前置步骤</h3><p>分别在另外两台机子安装jdk，及解压zk和kafka<br>删除三台机子的ssh认证，以便文件分发</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .ssh</span><br></pre></td></tr></table></figure></div>
<h3 id="2-修改host配置"><a href="#2-修改host配置" class="headerlink" title="2.修改host配置"></a>2.修改host配置</h3><p>在101机子上修改host配置</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="comment">#配置如下</span></span><br><span class="line">172.16.2.130  CentOS101</span><br><span class="line">172.16.2.131  CentOS102</span><br><span class="line">172.16.2.132  CentOS103</span><br><span class="line">ping centos102</span><br><span class="line">ping centos103</span><br><span class="line"><span class="comment">#测试发现能ping通，说明配置没问题</span></span><br><span class="line"><span class="comment">#将CentOS101本机下的etc/hosts文件下的hosts文件拷贝到CentOS102 和CentOS103下</span></span><br><span class="line">scp /etc/hosts CentOS102:/etc/</span><br><span class="line">scp /etc/hosts CentOS103:/etc/</span><br></pre></td></tr></table></figure></div>

<h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将101机子环境变量信息拷贝到102 103机子上</span></span><br><span class="line">scp .bashrc CentOS102:~/</span><br><span class="line">scp .bashrc CentOS103:~/</span><br></pre></td></tr></table></figure></div>

<h3 id="4-关闭102-103机子防火墙"><a href="#4-关闭102-103机子防火墙" class="headerlink" title="4.关闭102 103机子防火墙"></a>4.关闭102 103机子防火墙</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line">chkconfig --list | grep iptables</span><br></pre></td></tr></table></figure></div>

<h3 id="5-配置时钟服务器"><a href="#5-配置时钟服务器" class="headerlink" title="5.配置时钟服务器"></a>5.配置时钟服务器</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line"><span class="comment">#发现报错如下：</span></span><br><span class="line"><span class="comment">#YumRepo Error: All mirror URLs are not using ftp, http[s] or file.</span></span><br><span class="line"><span class="comment">#Eg. Invalid release/repo/arch combination/</span></span><br><span class="line"><span class="comment">#不要慌，这是因为默认下载的centos镜像来源是国外的，网不通我们换成清华大学开源的镜像站里的即可</span></span><br><span class="line"><span class="comment">#https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/</span></span><br><span class="line"><span class="comment">#配置镜像如下：</span></span><br><span class="line">vi /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">[base]</span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="comment">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span></span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/updates/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="comment">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span></span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/extras/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="comment">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span></span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">[centosplus]</span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/centosplus/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line"><span class="comment">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span></span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">[contrib]</span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/contrib/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line"><span class="comment">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span></span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>配完之后再<code>yum install ntp -y</code>安装时钟同步服务器即可</p>
</blockquote>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line">clock -w</span><br></pre></td></tr></table></figure></div>
<h3 id="6-配置zookeeper"><a href="#6-配置zookeeper" class="headerlink" title="6.配置zookeeper"></a>6.配置zookeeper</h3><p>与配置单机不同需要加上另外两台机子的节点信息</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/zookeeper-3.4.6/</span><br><span class="line">vi conf/zoo.cfg</span><br><span class="line"><span class="comment">#修改zk的配置如下</span></span><br><span class="line">dataDir=/root/zkdata</span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line">server.1=CentOS101:2888:3888</span><br><span class="line">server.2=CentOS102:2888:3888</span><br><span class="line">server.3=CentOS103:2888:3888</span><br><span class="line"><span class="comment">#配置完成后同样将配置信息分发到102 103上</span></span><br><span class="line">scp -r /usr/zookeeper-3.4.6 CentOS102:/usr/</span><br><span class="line">scp -r /usr/zookeeper-3.4.6 CentOS102:/usr/</span><br><span class="line"><span class="comment">#拷贝完后，分别在102 103上创建zkdata数据存储目录</span></span><br><span class="line"><span class="built_in">mkdir</span> zkdata</span><br></pre></td></tr></table></figure></div>

<h3 id="7-配置服务id映射"><a href="#7-配置服务id映射" class="headerlink" title="7.配置服务id映射"></a>7.配置服务id映射</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将id号定向到myid文件</span></span><br><span class="line"><span class="comment">#101机子上执行</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /root/zkdata/myid</span><br><span class="line"><span class="comment">#102机子上执行</span></span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /root/zkdata/myid</span><br><span class="line"><span class="comment">#103机子上执行</span></span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /root/zkdata/myid</span><br><span class="line"><span class="comment">#然后分别启动zk测试下</span></span><br><span class="line">/usr/zookeeper-3.4.6/bin/zkServer.sh start zoo.cfg</span><br><span class="line">/usr/zookeeper-3.4.6/bin/zkServer.sh status zoo.cfg</span><br><span class="line">jsp</span><br><span class="line"><span class="comment">#若是启动错误请检查id映射和防火墙是否关闭</span></span><br></pre></td></tr></table></figure></div>
<h3 id="8-配置kafka单节点为多节点"><a href="#8-配置kafka单节点为多节点" class="headerlink" title="8.配置kafka单节点为多节点"></a>8.配置kafka单节点为多节点</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改kafka单机的配置,将zk单节点改成集群的方式</span></span><br><span class="line"><span class="built_in">cd</span> /usr/kafka_2.11-2.2.0/</span><br><span class="line">vi config/server.properties</span><br><span class="line"><span class="comment">#修改zk的节点如下</span></span><br><span class="line">zookeeper.connect=CentOS101:2181,CentOS102:2181,CentOS103:2181</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">scp -r kafka_2.11-2.2.0 CentOS102:/usr/</span><br><span class="line">scp -r kafka_2.11-2.2.0 CentOS103:/usr/</span><br><span class="line"><span class="comment">#进入到102 103 机子上修改配置</span></span><br><span class="line"><span class="comment">#102改为</span></span><br><span class="line"><span class="built_in">cd</span> /usr/kafka_2.11-2.2.0/</span><br><span class="line">vi config/server.properties</span><br><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://CentOS102:9092</span><br><span class="line"><span class="comment">#103改为</span></span><br><span class="line"><span class="built_in">cd</span> /usr/kafka_2.11-2.2.0/</span><br><span class="line">vi config/server.properties</span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://CentOS103:9092</span><br><span class="line"><span class="comment">#测试kafka能否启动，注意启动前看下zk是否启动了(注意启动本机kafka前需要确认本机zk是否启动，否则你看到的kafka是假启动状态)</span></span><br><span class="line"><span class="built_in">cd</span> /usr/kafka_2.11-2.2.0/</span><br><span class="line">./bin/kafka-server-start.sh -daemon config/server.properties</span><br><span class="line">jps</span><br></pre></td></tr></table></figure></div>
<h3 id="9-kafak测试消息分发机制"><a href="#9-kafak测试消息分发机制" class="headerlink" title="9.kafak测试消息分发机制"></a>9.kafak测试消息分发机制</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#集群中创建topic</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CnetOS103:9092 --create --topic topic01 --partitions 2 --replication-factor 2</span><br><span class="line"><span class="comment">#查看集群中创建了哪些topic</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CnetOS103:9092 --list</span><br><span class="line"><span class="comment">#查看集群中创建的topic的详细信息</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CnetOS103:9092 --describe --topic topic01</span><br><span class="line"><span class="comment">#修改topic的分区数，注意分区数只能由低改为高</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CnetOS103:9092 --alter --topic topic01 --partitions 3</span><br><span class="line"><span class="comment">#删除topic</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CnetOS103:9092 --delete --topic topic01</span><br><span class="line"><span class="comment">#查看kafka log日志发现实际上kafka是将日志文件打了个delete 标记</span></span><br><span class="line"><span class="built_in">ls</span> /usr/kafka-logs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者等待消费</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CnetOS103:9092 --create --topic topic01 --partitions 3 --replication-factor 3</span><br><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server Cent101:9092,CentOS102:9092,CentOS103:9092 --topic topic01 --group g1 --property print.key=<span class="literal">true</span> --property print.value=<span class="literal">true</span> --property key.separator=,</span><br><span class="line"><span class="comment"># 上面意思为创建消费组g1 去消费topic01 并打印key 和 value 已逗号分割</span></span><br><span class="line"><span class="comment"># 生产者创建</span></span><br><span class="line">./bin/kafka-console-producer.sh --broker-list Cent101:9092,CentOS102:9092,CentOS103:9092 --topic topic01</span><br><span class="line"><span class="comment"># 查看消费组有哪些</span></span><br><span class="line">./bin/kafka-consumer-groups.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CentOS103:9092 --list</span><br><span class="line"><span class="comment"># 查看对应某个消费组的详细信息</span></span><br><span class="line">./bin/kafka-consumer-groups.sh --bootstrap-server CentOS101:9092,CentOS102:9092,CentOS103:9092 --describe --group g1</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>kafka</category>
      </categories>
  </entry>
  <entry>
    <title>linux上安装java</title>
    <url>/2021/0423/install-java-linux.html</url>
    <content><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h4><p>搞这么久开发，是不是得自己搞台服务器呢？so,just do it！<br>那么，服务器的选择很多！自己的本子开个虚拟机玩一下也不是不可以，但是这玩意儿吃内存啊。后面整个mbp32g 的玩一下，我这13年上大学时买的thinkpad 加了内存换了移动硬盘只能满足平常办公用，开个idea,webstorm 跑个jemter压测啥的还是卡的不行，说到底还是系统的问题！废话不多说，其实各大厂商的云服务器大同小异，考虑稳定、性价比、易用性，本次我选择腾讯云！</p>
<p>注册账号，申请啥的我就不说了，按照官网的指引来就好！</p>
<p>新建一个实例，将会为你分配一个公网ip,密码啥的自己记得修改下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1StpIe.png"
                     
                ></p>
<p>点击登录，这里我绑定的是微信扫码登录即可。可以发现要求密码或秘钥登录，懒得配秘钥，这里采用密码登录。<br>不在此处选择登录，这里登录时会打开一个网页版终端，操作不惯！<br>用xshell工具链接公网ip,我用的是Xshell+Xftp 整合版 这个方便好使，没有的私我可以发你<br>废话不多说，连它<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1StCPH.png"
                     
                ></p>
<p>腾讯云centos 镜像你申请时已经安装好了，基础的环境已经有了，接下来就是像你平时和本地一样装java mysql tomcat 等类似了</p>
<h4 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h4><p>查看yum库中的Java安装包：<br><code>yum -y list java*</code><br>将java-1.8.0的所有相关Java程序都安装上：<br><code>yum -y install java-1.8.0-openjdk*</code></p>
<p>查看刚安装的Java版本信息。<br>输入：java -version 可查看Java版本<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1SYzVO.png"
                     
                ></p>
<p>输入：javac 可查看Java的编译器命令用法<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1StSaD.png"
                     
                ></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上安装mysql</title>
    <url>/2021/0423/install-mysql-linux.html</url>
    <content><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="mysql下载"><a href="#mysql下载" class="headerlink" title="mysql下载"></a>mysql下载</h4><p>先验证是否安装了mysql 若无输出则证明未安装过！执行命令:<br><code>rpm -qa | grep mysql</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skpTJ.png"
                     
                ><br>先下载mysql的repo源，这玩意儿又叫mysql源，字面上理解就是mysql的源码,执行命令：<br><code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sFvOU.png"
                     
                ></p>
<p>安装mysql-community-release-el7-5.noarch.rpm包,执行命令：<br><code>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sFzmF.png"
                     
                ></p>
<p>安装mysql，执行命令：<br><code>sudo yum install mysql-server</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skPYR.png"
                     
                ></p>
<p>可以看到130多M还是挺大的<br>输入y确认，开始下载！好不容易到100%，还得下载依赖，继续y确认下载<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skif1.png"
                     
                ><br>可算ojbk了，继续！</p>
<h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><p>登录然后重置密码,执行：<br><code>mysql -u root</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skAl6.png"
                     
                ></p>
<p>原因是&#x2F;var&#x2F;lib&#x2F;mysql的访问权限问题。下面的命令把&#x2F;var&#x2F;lib&#x2F;mysql的拥有者改为当前用户<br>执行命令赋权，重启mysql：<br><code>sudo chown -R openscanner:openscanner /var/lib/mysql</code><br><code>service mysqld restart</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skCk9.png"
                     
                ></p>
<p>再次重置密码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line">use mysql;</span><br><span class="line">update user set password=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;</span><br><span class="line">exit;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skm0e.png"
                     
                ></p>
<p>测试链接一下:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sknTH.png"
                     
                ></p>
<p>原因：mysql服务器 root 默认只允许 localhost 也就是 127.0.0.1 连接<br>登录mysql: <code>mysql -u root -p</code><br>输入密码:直接回车即可  输入了会报错如下所示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skemD.png"
                     
                ></p>
<h4 id="解决连接报错"><a href="#解决连接报错" class="headerlink" title="解决连接报错"></a>解决连接报错</h4><p>继续<code>mysql -u root -p</code>  回车  然后执行以下命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql; 选择mysql库</span><br><span class="line">select host from user where user=&#x27;root&#x27;;查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</span><br><span class="line">update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;; 修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址 %通配符表示所有ip都允许通过root账号链接</span><br><span class="line">flush privileges; 刷新MySQL的系统权限相关表</span><br><span class="line">select host from user where user=&#x27;root&#x27;; 再重新查看user表时，有修改。。</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="重连测试"><a href="#重连测试" class="headerlink" title="重连测试"></a>重连测试</h4><p>然后这时候用客户端重连一下试试：ok啦<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skKkd.png"
                     
                ></p>
<p>创建个数据库测试，对了 新建的数据打开自带了三个库  别手贱删哈，你表的创建执行都和这里面的表相关，不然你commit rollback 它怎么知道的，我之前本地安装mysql学习时手贱删过，后来发现数据再执行sql操作时就报错，找了各种办法最后重装才解决，所以不懂要么去研究要么不要动。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skVOO.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1skMtA.png"
                     
                ></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上安装nginx</title>
    <url>/2021/0423/install-ngnix-linux.html</url>
    <content><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="解压安装："><a href="#解压安装：" class="headerlink" title="解压安装："></a>解压安装：</h4><p>nginx按装一定要使用命令安装，因为需要解压后编译 已经配置成全局的<br>下载常用的包，高版本的安装出了一次问题，就切换成低版本的了，如图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sS2RO.png"
                     
                ></p>
<p>接下来执行以下命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr  进入压缩文件存放目录</span><br><span class="line">tar -xzvf nginx-1.13.9.tar.gz   解压</span><br><span class="line">cd  nginx-1.13.9 进入解压后文件</span><br><span class="line">mkdir /usr/local/nginx   在local目录下新建nginx目录</span><br><span class="line">./configure --prefix=/usr/local/nginx   配置成全局</span><br><span class="line">make &amp;&amp; make install  安装</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>but….执行到第5步报错了，报错信息如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sSci6.png"
                     
                ></p>
<p>the HTTP rewrite module requires the PCRE library HTTP重写模块需要PCRE库<br>什么鬼？pcre 是啥？一脸懵逼吧，本地装ngnix解压就好了  没这么坑啊！ 所以，装环境还是和本地有一点区别的，但是大同小异不要慌！你遇到了别人一定也遇到了，让我们来了解下什么叫pcre:<br>详见此篇博客：安装 Nginx 前 必须安装 PCRE—<a class="link"   href="https://www.jianshu.com/p/14c81fbcb401" >https://www.jianshu.com/p/14c81fbcb401 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>不懂就学嘛(百度)！</p>
<p>使用以下命令安装：yum -y install zlib zlib-devel openssl openssl–devel pcre pcre-devel</p>
<p>再次执行5.6命令  发现：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sSyIx.png"
                     
                ></p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>wtf? 没有配置环境变量！！！<br>执行vim &#x2F;etc&#x2F;profile<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sSsd1.png"
                     
                ></p>
<p>记住以上框出来的命令，o 只读  e编辑  r覆盖  q退出  a取消<br>编辑后一直向下键看到for循环后加上以下代码：<br>PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin<br>export PATH<br>:wq!</p>
<p>:wq表示保存并退出vi编辑模式   ———题外话：linux下命令真的要学一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sSrZR.png"
                     
                ></p>
<p>退出来后执行：source &#x2F;etc&#x2F;profile 使配置生效  还是在&#x2F;usr&#x2F;local&#x2F;sbin 目录下执行</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>然后因为nginx 是全局的了，可以直接在根目录下执行nginx 浏览器输入公网ip，不带端口哈出现如下界面表示nginx启动成功！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sSRzD.png"
                     
                ></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上安装redis</title>
    <url>/2021/0423/install-redis-linux.html</url>
    <content><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>作为一名开发，面试最常问的恐怕就有你们开发过程中用过什么缓存？能否简单谈谈redis等等<br>so,作为一个可基于内存持久化的、日志级别的、非关型数据库，学习和掌握好它还是很有必要的。<br>上面mysql 安装到了usr下面  所有我也会将redis安装到其下<br>进入到usr目录下：<code>cd /usr</code><br>下载安装包：<br><code>wget http://download.redis.io/releases/redis-5.0.5.tar.gz</code><br>打开服务器目录刷新就会看到对应的包在usr下生成了:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sVoj0.png"
                     
                ></p>
<p>解压:<code>tar xzf redis-5.0.5.tar.gz</code><br>查看解压后的文件：<code>ls -al</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sVbHU.png"
                     
                ></p>
<h4 id="安装，配置后台运行"><a href="#安装，配置后台运行" class="headerlink" title="安装，配置后台运行"></a>安装，配置后台运行</h4><p>进入安装目录：<code>cd redis-5.0.5</code><br>安装：<code>make</code><br>–接下来一定要执行: <code>make install</code>  此命令意思是拷贝redis的相关文件到&#x2F;usr&#x2F;local&#x2F;bin这个目录下 不执行这个命令将不执行<code>redis-server redis.conf</code>这个命令是不会执行的<br>进入当前src 目录下，会有redis服务端程序redis-server和用于测试的客户端程序redis-cli<br>进入src目录：<code>cd src</code><br>查看对应的文件：<code>ls -al</code><br>配置redis.conf文件，将redis设为后台运行<br>redis默认不是守护进程，也就是说只要在linux上做了其他操作、或者exit强制退出、或者关闭连接工具（putty&#x2F;xshell）等，都会导致redis进程退出，这样非常的麻烦，所以需要让redis服务端在后台运行，即守护进程模式。当redis.conf配置文件中，daemonize属性值设为yes时，代表开启守护进程。<br>编辑redis.conf文件：<code>vi redis.conf</code><br>搜索对应的配置：<code>/daemonize</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sVX4J.png"
                     
                ></p>
<p>将no改为yes: 按i进入编辑模式  改完esc退出编辑模式   回车 输入:wq!保存并退出<br>—-redis数据库默认不设密码，但这样会自动开启保护模式，只能本地访问，不能远程访问。所以为了能远程访问，就必须设置密码<br>配置密码：<code>vi redis.conf </code><br>搜索redis密码：<code>/requirepass foobared </code> 改为123456 同上保存并退出<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZ9u6.png"
                     
                ></p>
<h4 id="启动配置："><a href="#启动配置：" class="headerlink" title="启动配置："></a>启动配置：</h4><p>进入到bin目录下安装启动配置：<br><code>cd /usr/redis-5.0.5</code><br><code>./utils/install_server.sh</code><br>默认的配置文件是6379.conf<br>默认的日志文件是redis_6379.log<br>默认的运行实例是6379<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZegI.png"
                     
                ></p>
<p>直接启动：<code>service redis_6379 start</code><br>停止：<code>service redis_6379 stop</code><br>查看进程：<code>ps -aux | grep redis</code><br>启动和停止可以看到 进程的变化<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZUK0.png"
                     
                ></p>
<p>配置公网链接：为了是其他机器能够链接这台服务器<br>需要更改配置将redis.conf中bind 127.0.0.1注释掉！<br>执行：<code>cd /usr/redis-5.0.5</code><br><code>vi redis.conf</code> 修改 完成后 需要重复执行 上面的“启动配置” 步骤 让修改的配置生效<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZD54.png"
                     
                ></p>
<p>查看进程：<code>ps -aux | grep redis</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZsPJ.png"
                     
                ></p>
<p>杀掉进程：<code>kill -9 进程号</code><br>重启redis: <code>service redis_6379 start</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZRr6.png"
                     
                ></p>
<p>后面的server * 代表允许所有的ip访问<br>此时再用redis 客户端链接测试  链接成功！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZ5Ie.png"
                     
                ></p>
<h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><p>那链接上了，我们来测试一下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1sZ7RA.png"
                     
                ></p>
<p>刷新客户端看下有没有写进来：ok 写进来了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1seCzn.png"
                     
                ></p>
<p>好了，那么这个地方16个 db又是代表什么意思呢？学东西还是要有不断追问的能力，当你一步一步的自我解答寻找答案的时候就是慢慢掌握的时候！<br>Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。<br>Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中，这1-16其实就是代表16个字典！<br>那么怎么用呢？  像sql语句一样  但是又不是  redis一个实例下默认有16个字典库，select 1代表选用1号字典库，同一个库中插入相同的key 后面的value值将会覆盖前面的值！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1seVdU.png"
                     
                ></p>
<p>看看字典1库中值：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/02/05/1senJJ.png"
                     
                ></p>
<p>自此，我们已经完成了redis 单台服务器的搭建测试和客户端工具的测试！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上安装tomcat</title>
    <url>/2021/0423/install-tomcat-linux.html</url>
    <content><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><p>接下来装个最简单的web服务器tomcat吧，人家idea就是内置tomcat的，不要看不起他<br>官网下载，这次我下载的tomcat9 按道理版本越高兼容性越好，就他了！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1SUmCQ.md.png"
                      border="0" 
                ><br>将本地的tomcat 解压到服务器上，一般的xshell xftp 是分离的 所以你要用两个工具（这个时候就体现出Xshell+Xftp 整合版的便携性了），输两次密码连接，这时候就体现这工具的便携性了，直接点这个打开服务器目录<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1SUZ4g.png"
                      border="0" 
                ><br>我没有使用命令上传然后解压，其实文件不大，上传速度很快！<br>然后，进到bin目录下 启动tomcat 如果遇到没有权限 输入最后两个命令即可</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/apache-tomcat-9.0.30/bin</span><br><span class="line">chmod u+x *.sh</span><br><span class="line">./startup.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1SUkHf.png"
                      border="0" 
                >

<h4 id="测试8080端口"><a href="#测试8080端口" class="headerlink" title="测试8080端口"></a>测试8080端口</h4><p>然后浏览器输入 公网ip+默认端口8080 即可看到tomcat启动页：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/01/17/1SUFDP.png"
                      border="0" 
                ></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS SDk实践篇</title>
    <url>/2021/0423/aliyun-oss-sdk.html</url>
    <content><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><blockquote>
<p>我们知道一般的热点数据我们直接存到数据库，但是类似一些表格模板，附件等静态资源放在哪里呢？</p>
</blockquote>
<ul>
<li>数据库</li>
<li>数据库 + 本地文件（IO流）</li>
<li>数据库 + 缓存 + 文件服务器（Hdfs 、fastDFS、服务器集群）</li>
<li>数据库 + 缓存 + 文件存储（对象存储服务OSS）</li>
</ul>
<p>因为阿里云提供了各种常用语言的SDK,所以进行文件的存储就变得十分简单，那本文就来介绍下阿里云的对象存储OSS使用。</p>
<h4 id="开通OSS服务"><a href="#开通OSS服务" class="headerlink" title="开通OSS服务"></a>开通OSS服务</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9YFoj.png"
                     
                ></p>
<p>搜索后，购买直接就可以使用，它是按流量计算费用的，话说我们买个10块钱的足够我们基本的学习使用了，不够了再充值嘛！我这里因为用的就是阿里云服务器，所以好像是赠送了40G的存储，具体也懒的去了解，反正没要我再交钱就是。</p>
<h4 id="了解阿里云OSS"><a href="#了解阿里云OSS" class="headerlink" title="了解阿里云OSS"></a>了解阿里云OSS</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9NvWR.png"
                     
                ></p>
<p>通过了解它的官方文档，我们基本可以知道阿里云OSS提供了面向各种常用语言的SDk，通过这些SDK我们基本可以知道如何使用了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9a7aF.png"
                     
                ></p>
<p>点击<code>JAVA SDK快速入门</code>我们可以看到对应的maven 工程示例；这里自己点进去了解即可！</p>
<p>题外话: 后面对于其他东西的学习，个人建议都是先找官方文档了解，至于本篇博客个人也只是做个笔记，记录下简单的使用，肯定不如官网的全面。</p>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="1-创建Bucket"><a href="#1-创建Bucket" class="headerlink" title="1.创建Bucket"></a>1.创建Bucket</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9WhHH.png"
                     
                ></p>
<p>如果你听了我的建议，了解过JAVA SDk 中的工程例子，我想你应该知道要使用OSS 需要4个参数：</p>
<ul>
<li>endpoint</li>
<li>AccessKeyID</li>
<li>AccessKeySecret</li>
<li>bucketName</li>
</ul>
<p>这里我们先记录下 <code>bucketName: oss-study01</code>;<code>endpoint:oss-cn-beijing.aliyuncs.com</code></p>
<h4 id="2-创建文件夹"><a href="#2-创建文件夹" class="headerlink" title="2.创建文件夹"></a>2.创建文件夹</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9fILF.png"
                     
                ></p>
<p>创建一个存放图片的文件夹images</p>
<h4 id="3-上传一张图片测试"><a href="#3-上传一张图片测试" class="headerlink" title="3.上传一张图片测试"></a>3.上传一张图片测试</h4><p>注意：是点击进此文件后再上传</p>
<p>这里我们选择单个文件的权限是公共读，当然你也可以通过修改整个文件的权限，目前此文件夹我们没修改就是默认的私有的！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J94nc6.png"
                     
                ></p>
<h4 id="4-访问控制"><a href="#4-访问控制" class="headerlink" title="4.访问控制"></a>4.访问控制</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J95Ar8.png"
                     
                ></p>
<p>添加用户组–&gt;创建用户–&gt;添加用户到用户组–&gt;分配用户组权限–&gt;保存账号信息</p>
<p>其实就像我们的系统的权限，角色和用户的关系，某些用户是某些角色，某些角色就具有某些分配好的权限！</p>
<p>具体步骤截图如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9Irpn.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9oDED.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9oXrV.png"
                     
                ></p>
<p>记录下</p>
<ul>
<li><p>AccessKeyID: LTAI4FoYHgbk2y3woYH191Ys</p>
</li>
<li><p>AccessKeySecret：FVZzvz4G9e39ako5vVMASYryrbpnJu</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9TQxI.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/15/J9TyZT.png"
                     
                ></p>
<h3 id="测试SDK"><a href="#测试SDK" class="headerlink" title="测试SDK"></a>测试SDK</h3><h4 id="1-创建微服务，引入阿里OSS依赖"><a href="#1-创建微服务，引入阿里OSS依赖" class="headerlink" title="1.创建微服务，引入阿里OSS依赖"></a>1.创建微服务，引入阿里OSS依赖</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding.aliyunoss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.CannedAccessControlList;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.GetObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.OSSObjectSummary;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.ObjectListing;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSSTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;oss-cn-beijing.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。</span></span><br><span class="line">    <span class="comment">// 强烈建议您创建并使用RAM账号进行API访问或日常运维，</span></span><br><span class="line">    <span class="comment">// 请登录 https://ram.console.aliyun.com 创建RAM账号。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI4GKkPcWRY6zDgxBwgjaS&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;fvQ0rtW2ezAS4jiMCjIp7JrzKSCmPJ&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;oss-study01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否 bucketName，如果不存在就创建，修改权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建oss 实例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        ossClient.createBucket(bucketName);</span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前实例是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExist</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exist</span> <span class="operator">=</span> ossClient.doesBucketExist(bucketName);</span><br><span class="line">        System.out.println(exist);</span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改权限 公共读</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// 方法 (修改已经有的，创建新的)</span></span><br><span class="line">        ossClient.setBucketAcl(bucketName,CannedAccessControlList.PublicRead);</span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件流。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileUpload</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// 方法 (修改已经有的，创建新的)</span></span><br><span class="line">        <span class="comment">// 上传到 oss 后需要一个文件名(保证唯一 /2020/4/1/xxxxxxxx.jpg)！</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;images/default.jpg&quot;</span>;</span><br><span class="line">        ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dafault.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownload</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// 方法 (修改已经有的，创建新的)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;images/default.jpg&quot;</span>;</span><br><span class="line">        ossClient.getObject(<span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(bucketName,objectName),<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看文件列表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testShowList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法 (修改已经有的，创建新的)</span></span><br><span class="line">        <span class="comment">// ossClient.listObjects返回ObjectListing实例，包含此次listObject请求的返回结果。</span></span><br><span class="line">        <span class="type">ObjectListing</span> <span class="variable">objectListing</span> <span class="operator">=</span> ossClient.listObjects(bucketName);</span><br><span class="line">        <span class="comment">// objectListing.getObjectSummaries获取所有文件的描述信息。</span></span><br><span class="line">        <span class="keyword">for</span> (OSSObjectSummary objectSummary : objectListing.getObjectSummaries()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; - &quot;</span> + objectSummary.getKey() + <span class="string">&quot;  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;(size = &quot;</span> + objectSummary.getSize() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleted</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法 (修改已经有的，创建新的)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;images/default.jpg&quot;</span>;</span><br><span class="line">        ossClient.deleteObject(bucketName,objectName);</span><br><span class="line">        <span class="comment">// 关闭对象</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>好了，后面我们就可以用接口调用，完成我们文件的上传和下载了。是不是很简单？赶快试试吧；加油，奥利给！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上安装jenkins(待填坑)</title>
    <url>/2021/0423/install-jenkins-linux.html</url>
    <content><![CDATA[<h4 id="项目部署步骤："><a href="#项目部署步骤：" class="headerlink" title="项目部署步骤："></a>项目部署步骤：</h4>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>jar包发版步骤</title>
    <url>/2020/1008/jar-run-step.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-clean-后-package-打包前需核对配置文件是否正确"><a href="#1-clean-后-package-打包前需核对配置文件是否正确" class="headerlink" title="1.clean 后 package ,打包前需核对配置文件是否正确"></a>1.clean 后 package ,打包前需核对配置文件是否正确</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar1.png"
                     
                ></p>
<p>生成的jar包（target文件下）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar2.png"
                     
                ></p>
<h3 id="2-打开sheel工具-链接到具体的环境"><a href="#2-打开sheel工具-链接到具体的环境" class="headerlink" title="2.打开sheel工具 链接到具体的环境"></a>2.打开sheel工具 链接到具体的环境</h3><p>执行命令：ps -ef | grep jar</p>
<p>查看运行中的jar: ps  aux|grep  jar<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar3.png"
                     
                ></p>
<h3 id="3-将对应的包的进程杀掉-最后的数字是进程号"><a href="#3-将对应的包的进程杀掉-最后的数字是进程号" class="headerlink" title="3.将对应的包的进程杀掉 最后的数字是进程号"></a>3.将对应的包的进程杀掉 最后的数字是进程号</h3><p>执行命令：kill -9 2980</p>
<h3 id="4-查看对应进程（jar包）的存放路径、"><a href="#4-查看对应进程（jar包）的存放路径、" class="headerlink" title="4.查看对应进程（jar包）的存放路径、"></a>4.查看对应进程（jar包）的存放路径、</h3><p>执行命令：ll &#x2F;proc&#x2F;2980<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar4.png"
                     
                ></p>
<p>其中cwd -&gt; &#x2F;home&#x2F;bigdatashare&#x2F;exchange 就是文件的存放路径</p>
<p>&#x20;exe -&gt; &#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171-amd64&#x2F;jre&#x2F;bin&#x2F;java 是运行环境 jdk的存放路径</p>
<h3 id="5-打开xftp-有的工具不是集成在一起的-需要单独连接"><a href="#5-打开xftp-有的工具不是集成在一起的-需要单独连接" class="headerlink" title="5.打开xftp,有的工具不是集成在一起的 需要单独连接"></a>5.打开xftp,有的工具不是集成在一起的 需要单独连接</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar5.png"
                     
                ></p>
<h3 id="6-复制对应路径，更改上次包名xxx-copy，表示备份-以免上去出问题可以回退"><a href="#6-复制对应路径，更改上次包名xxx-copy，表示备份-以免上去出问题可以回退" class="headerlink" title="6.复制对应路径，更改上次包名xxx-copy，表示备份 以免上去出问题可以回退"></a>6.复制对应路径，更改上次包名xxx-copy，表示备份 以免上去出问题可以回退</h3><p>将左侧本地打包后jar包拖到右侧，底部会显示上传进度<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar6.png"
                     
                ></p>
<h3 id="7-执行启动打包后jar"><a href="#7-执行启动打包后jar" class="headerlink" title="7.执行启动打包后jar"></a>7.执行启动打包后jar</h3><p>执行命令：nohup java -jar .&#x2F;bigdata-dev.jar &gt; .&#x2F;bigdata-dev.log 2&gt;&amp;1 &amp;</p>
<p>&#x20;后面的&#x2F;bigdata-dev.log 表示执行的日志 ，发生异常是可以查看</p>
<h3 id="8-查看打包进程的命令：tail-f-bigdata-dev-log"><a href="#8-查看打包进程的命令：tail-f-bigdata-dev-log" class="headerlink" title="8.查看打包进程的命令：tail -f bigdata-dev.log"></a>8.查看打包进程的命令：tail -f bigdata-dev.log</h3><p>命令执行后：会看到对应springBoot启动的过程（和本地终端启动一样）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/linux/21/4/23/jar7.png"
                     
                ></p>
<p>至此，简单的将jar打包到linux环境 完成！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>firewall相关命令</title>
    <url>/2020/1008/firewall-shell.html</url>
    <content><![CDATA[<p>[TOC]<br>环境：VMware、CentOS8</p>
<p>从centos7开始使用systemctl.firewalld来管理服务和程序，包括了service和chkconfig。</p>
<p>防火墙状态：systemctl status firewalld.service</p>
<p>Active: inactive (dead)&#x2F;active(running)</p>
<p>关闭firewall：systemctl stop firewalld.service</p>
<p>重启：systemctl restart firewalld.service</p>
<p>启动：systemctl start firewalld.service</p>
<p>禁止firewall开机启动:systemctl disable firewalld.service</p>
<p>设置开机启用：systemctl enable firewalld.service</p>
<p>查看服务是否开机启动：systemctl is-enabled firewalld.service;echo</p>
<p>查看已启动的服务列表：systemctl list-unit-files|grep enabled</p>
<p>查看已经开放的端口：firewall-cmd –list-ports</p>
<p>开启端口：firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p>
<p>命令含义：</p>
<p>–zone #作用域</p>
<p>–add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议</p>
<p>–permanent #永久生效，没有此参数重启后失效</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>java8之4大函数式接口详解</title>
    <url>/2021/0423/java8-4-function-interface.html</url>
    <content><![CDATA[<blockquote>
<p>前面博客说了要聊聊Java8 新特性来着，当然这个新是相对于7而言的哈，你要知道Java 都14了；本来想先写篇关于optional 的博客，翻开optional 类，发现都是函数式接口，所以咱们还是按顺序来，先来看看函数式接口Function；</p>
</blockquote>
<h3 id="function函数型接口-定义"><a href="#function函数型接口-定义" class="headerlink" title="function函数型接口 定义"></a>function函数型接口 定义</h3><p>我们先来看下以下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.testDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; languages = Arrays.asList(<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        Function&lt;String, Integer&gt; function = String::length;</span><br><span class="line">        languages.stream()</span><br><span class="line">                .map(function)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 输出 3 ， 4 ，0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>以上代码，定义了一个流输出languages 每个元素的长度。为什么是这样的呢？我们带着问题一起来看下Function接口的源码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/08/G2ISiD.png"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="meta">@param</span> &lt;T&gt; the type of the input to the function</span><br><span class="line">* <span class="meta">@param</span> &lt;R&gt; the type of the result of the function</span><br></pre></td></tr></table></figure></div>
<p>可以看到T是这个方法的输入类型，R是这个方法的输出类型，那我们同样可以这样让他返回一个判断的boolean 值；</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, Boolean&gt; function1 = String::isEmpty;</span><br><span class="line">        languages.stream()</span><br><span class="line">         .map(function1)</span><br><span class="line">         .forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 输出 false,false,true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>好，接下来我们结合源码一个个验证它内部方法的作用：</p>
<ul>
<li>1.R apply(T t)<br>接受一个T类型参数，执行对应返回类型为R的函数<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer,Integer&gt; num2 = i-&gt; i*<span class="number">2</span>;</span><br><span class="line">Function&lt;Integer,Integer&gt; power = i -&gt; i*i;</span><br><span class="line"></span><br><span class="line">System.out.println(num2.apply(<span class="number">3</span>)); <span class="comment">// 输出6</span></span><br><span class="line">System.out.println(power.apply(<span class="number">3</span>)); <span class="comment">// 输出9</span></span><br></pre></td></tr></table></figure></div></li>
<li><ol start="2">
<li>compose<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(num2.compose(power).apply(<span class="number">3</span>)); <span class="comment">// 输出18</span></span><br><span class="line">System.out.println(power.compose(num2).apply(<span class="number">3</span>)); <span class="comment">// 输出36</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码如下：</span></span><br><span class="line"><span class="comment">// default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) &#123;</span></span><br><span class="line"><span class="comment">//     Objects.requireNonNull(before);</span></span><br><span class="line"><span class="comment">//     return (V v) -&gt; apply(before.apply(v));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从源码我们可以看到compose 传人一个不能null 的函数，紧接着执行了apply()方法 apply中先执行了传人的函数；</span></span><br><span class="line"><span class="comment">// 那么我们拆解下num2.compose(power).apply(3)输出18的函数执行顺序：</span></span><br><span class="line"><span class="comment">// power.apply(3)得 9  然后num2.apply(9)得18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆解下power.compose(num2).apply(3)输出36的函数执行顺序：</span></span><br><span class="line"><span class="comment">// num2.apply(3)得 6  然后power.apply(6)得36</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li>3.andThen<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(num2.andThen(power).apply(<span class="number">3</span>)); <span class="comment">// 输出36</span></span><br><span class="line">System.out.println(power.andThen(num2).apply(<span class="number">3</span>)); <span class="comment">// 输出18</span></span><br><span class="line"><span class="comment">//  源码如下</span></span><br><span class="line"><span class="comment">// default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123;</span></span><br><span class="line"><span class="comment">//     Objects.requireNonNull(after);</span></span><br><span class="line"><span class="comment">//     return (T t) -&gt; after.apply(apply(t));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈哈，聪明如你看输出结果都应该猜出来 compose 和 andThen 函数执行顺序正好反过来了</span></span><br><span class="line"><span class="comment">// 继续拆解：</span></span><br><span class="line"><span class="comment">// num2.andThen(power).apply(3) 执行顺序：num2.apply(3)得6 然后power.apply(6)得36</span></span><br><span class="line"><span class="comment">// power.andThen(num2).apply(3) 执行顺序：power.apply(3)得9 然后num2.apply(3)得18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其实源码里很多代码取名还有参数都很规范，基本上你看名字就知道代表的逻辑含义了</span></span><br><span class="line"><span class="comment">//所以别再低头码砖,有时间撸一下源码逻辑，面向源码学习吧...</span></span><br></pre></td></tr></table></figure></div></li>
<li>4.identity<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = languages.stream();</span><br><span class="line">Map&lt;String, Integer&gt; map = stream.collect(Collectors.toMap(str -&gt; str, String::length));</span><br><span class="line">System.out.println(map); <span class="comment">// 输出 &#123;=0, c++=3, java=4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将str -&gt; 表达式改写为Function.identity()</span></span><br><span class="line">Stream&lt;String&gt; stream1 = languages.stream();</span><br><span class="line">Map&lt;String, Integer&gt; map1 = stream1.collect(Collectors.toMap(Function.identity(), String::length));</span><br><span class="line">System.out.println(map1);</span><br><span class="line"></span><br><span class="line">可以看到str -&gt; str 等效于Function.identity()</span><br><span class="line"><span class="comment">//static &lt;T&gt; Function&lt;T, T&gt; identity() &#123;</span></span><br><span class="line"><span class="comment">//     return t -&gt; t;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></div>
可见identity 方法返回一个同等的Function 函数，其实function函数式接口有点类似C++中指针的概念，变量可以指向一个函数方法，并且可以通过compose 和 andThen 可将函数联合起来使用，而identity这个static 方法可以获取到当前指向的方法！</li>
</ul>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>Predicate 断言函数式接口，所谓断言就是断定预言一个判定结果的意思</p>
<p>首先我们来看如下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> testDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pre</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Predicate&lt;String&gt; predicate1 = s -&gt; s.equals(<span class="string">&quot;echo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(predicate1.test(<span class="string">&quot;Echo&quot;</span>));</span><br><span class="line">        <span class="comment">// 输出 false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>以上代码我们可以看到定义一个predicate1 断言函数，用于比较输入字符串是否和<code>&quot;echo&quot;</code>相等</p>
<p>可以看到返回<code>false</code>,是不是达到了和我们写<code>if</code>判断一样的效果；</p>
<p>同样我们带着好奇一起来看下其内部其他方法的定义及作用：</p>
<ul>
<li>1.and</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(predicate1.and(predicate2).test(<span class="string">&quot;Echo&quot;</span>));</span><br><span class="line"><span class="comment">// 输出 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码如下：</span></span><br><span class="line"><span class="comment">//default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) &#123;</span></span><br><span class="line"><span class="comment">//    Objects.requireNonNull(other);</span></span><br><span class="line"><span class="comment">//    return (t) -&gt; test(t) &amp;&amp; other.test(t);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从源码可以看出and 方法只是对两个断言函数做了 &amp;&amp; 操作</span></span><br><span class="line"><span class="comment">// 上面代码执行顺序是predicate1.test(&quot;Echo&quot;) &amp;&amp; predicate2.test(‘Echo)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>2.negate</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> System.out.println(predicate1.negate().test(<span class="string">&quot;Echo&quot;</span>));</span><br><span class="line"><span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码如下：</span></span><br><span class="line"><span class="comment">//default Predicate&lt;T&gt; negate() &#123;</span></span><br><span class="line"><span class="comment">//    return (t) -&gt; !test(t);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 从源码可以看出negate() 方法就是对断言函数进行取反</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>3.or</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聪明如你，肯定已经知道这个方法是 或 的关系了</span></span><br><span class="line">System.out.println(predicate1.or(predicate2).test(<span class="string">&quot;Echo&quot;</span>));</span><br><span class="line"><span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码如下：</span></span><br><span class="line"><span class="comment">//default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) &#123;</span></span><br><span class="line"><span class="comment">//    Objects.requireNonNull(other);</span></span><br><span class="line"><span class="comment">//    return (t) -&gt; test(t) || other.test(t);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从源码可以看出negate() 方法就是对断言函数进行取 或</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>4.isEqual</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Predicate&lt;Object&gt; im_echo = Predicate.isEqual(&quot;im_echo&quot;);</span><br><span class="line">System.out.println(im_echo.test(&quot;im_echo&quot;));</span><br><span class="line">// 输出 true</span><br><span class="line"></span><br><span class="line">// 源码如下：</span><br><span class="line">//static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) &#123;</span><br><span class="line">//    return (null == targetRef)</span><br><span class="line">//    ? Objects::isNull</span><br><span class="line">//    : object -&gt; targetRef.equals(object);</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">// 可以看到内部是一个三目运算，比较目标值和原值是否相等</span><br><span class="line">// 这样乍一看这方法和Predicate&lt;String&gt; predicate1 = s -&gt; s.equals(&quot;echo&quot;); 有啥区别啊?</span><br><span class="line">// 哈哈，其实不然。我们常规的判断前面值需要先判断x！=null 然后再x.equals(xxx)</span><br><span class="line">// Predicate.isEqual(x).test(xxx) 则完全不需要判空，而上面自己写equals 实在有点啰嗦了</span><br><span class="line"></span><br><span class="line"> System.out.println(Predicate.isEqual(null).test(&quot;xxx&quot;));</span><br><span class="line"> // 输出 false</span><br></pre></td></tr></table></figure></div>
<h3 id="Supplier-Consumer"><a href="#Supplier-Consumer" class="headerlink" title="Supplier &amp; Consumer"></a>Supplier &amp; Consumer</h3><p>四大函数式接口已经总结了两个了，还有剩余的供给型接口Supplier<T> 和消费型接口Consumer<T> ，<br>我习惯称其为生产者和消费者接口类，感觉这样更好理解点；顾名思义，生产只管定义加工产出，消费只管使用！</p>
<p>废话不多说，我们继续还是来看以下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> testDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerAndSupplier</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">&quot;hello,java8&quot;</span>;</span><br><span class="line">        Consumer&lt;String&gt; consumer1 =  con -&gt; System.out.println(con.toUpperCase());</span><br><span class="line">        consumer1.accept(hello);</span><br><span class="line">        <span class="comment">// 输出 HELLO,JAVA8</span></span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer2 = con -&gt; System.out.println(Arrays.toString(con.split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">        consumer2.accept(hello);</span><br><span class="line">        <span class="comment">// 输出 [hello, java8]</span></span><br><span class="line"></span><br><span class="line">        consumer2.andThen(consumer1).accept(hello);</span><br><span class="line">        <span class="comment">// 输出 [hello, java8] 、HELLO,JAVA8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// andThen 源码如下：</span></span><br><span class="line">        <span class="comment">// default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) &#123;</span></span><br><span class="line">        <span class="comment">//    Objects.requireNonNull(after);</span></span><br><span class="line">        <span class="comment">//    return (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 可以看到andThen(Consumer&lt;? super T&gt; after) 参数是后执行的</span></span><br><span class="line">        <span class="comment">// 也就是和 function的andThen方法是一样的 都是从前往后顺序执行的</span></span><br><span class="line"></span><br><span class="line">        Supplier&lt;String&gt; supplier1 = () -&gt; hello;</span><br><span class="line">        System.out.println(supplier1.get());</span><br><span class="line">        <span class="comment">// 输出 hello,java8</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>从以上代码我们基本知道了Consumer 和 Supplier函数接口的用法，那你说他们是对应的，何以体现呢？</p>
<p>我们继续来看下面的代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">userMap.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">userMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;echo&quot;</span>);</span><br><span class="line">Consumer&lt;Map&lt;String,Object&gt;&gt; consumerMap = map -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (Predicate.isEqual(map.get(<span class="string">&quot;id&quot;</span>)).test(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hello,echo！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">consumerMap.accept(userMap);</span><br><span class="line">Supplier&lt;Map&lt;String,Object&gt;&gt; supplierMap = () -&gt; userMap;</span><br><span class="line">System.out.println(supplierMap.get());</span><br><span class="line"><span class="comment">// 输出 &#123;name=hello,echo !, id=1&#125;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>小结：<br>其实源码很简单，只要你去看基本都能看懂；对于复杂的源码，其实我们只需要梳理对应的逻辑就好，无需面面俱到！<br>为什么要看函数式接口的源码呢？是因为 java8 之后的版本源码里面基本都是lambda表达式+stream流，而这两个里面就是函数式接口的具体应用！而用的最多的就是4大函数式接口，所以理解它对于我们后面阅读源码很有必要！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>functionInterface</tag>
      </tags>
  </entry>
  <entry>
    <title>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</title>
    <url>/2021/0627/mybatis-plus-binging-error.html</url>
    <content><![CDATA[<blockquote>
<p>最近自己写了个小项目：vBills 一个单体的账单可视化系统；因为用了mybatis-plus，所以开发起来很便捷；但是一些稍微复杂一点的查询还是得自己手写sql,然后就自己写了个查询，自测时发现dao层和xml文件映射不上，就这个点上卡了一个多小时，笑try~</p>
</blockquote>
<h3 id="报错如下"><a href="#报错如下" class="headerlink" title="报错如下"></a>报错如下</h3><p><a href="https://imgtu.com/i/RJRxXR"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/06/27/RJRxXR.png"
                     
                ></a></p>
<h3 id="排查过程如下"><a href="#排查过程如下" class="headerlink" title="排查过程如下"></a>排查过程如下</h3><ul>
<li>检查dao层文件名和xml文件名是否一致</li>
<li>检查xml中nameSpace 路径是否正确</li>
<li>检查dao查询方法名和xml中查询id 是否一致</li>
<li>检查mybatis 配置 是否指定对应的xml文件映射路径</li>
<li>检查pom文件中 build标签中依赖的resource是否包含了xml文件（一般不用配置即包含所有资源）</li>
</ul>
<h3 id="mybatis配置如下"><a href="#mybatis配置如下" class="headerlink" title="mybatis配置如下"></a>mybatis配置如下</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 实体类和mapper配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.vbills.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml,mapper/*/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#当查询数据为空时字段返回为null，不加这个查询数据为空时，字段将被隐藏</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>就按照上面的排查了一圈发现没啥问题啊，尼玛咋就不行了呢？猛然想起用的是mybtais-plus，pom文件中还有mybatis-plus的配置；莫非映射文件的地址应该配置到mybatis-plus下</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mybatis-plus 配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 增加地址配置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml,mapper/*/*Mapper.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.vbills.modules.entity</span></span><br><span class="line">  <span class="attr">defaultStatementTimeout:</span> <span class="number">120</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment">#删除</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment">#未删除</span></span><br></pre></td></tr></table></figure></div>
<p>配完重启后就可以了，卧槽，尼玛用了mybatis-plus后，尼玛你大哥mybatis的配置你就不认了…好吧，哈哈哈；希望能帮到有缘人！</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>线程基础知识-必知必会</title>
    <url>/2021/0423/thread-base-knowledge.html</url>
    <content><![CDATA[<blockquote>
<p>线程知识那么多，我们先来了解下简单的，必须掌握的！</p>
</blockquote>
<h3 id="什么是线程，什么是进程？"><a href="#什么是线程，什么是进程？" class="headerlink" title="什么是线程，什么是进程？"></a>什么是线程，什么是进程？</h3><p>进程：在操作系统中能够独立运行，并且作为资源分配的基本单位。它表示运行中的程序 打开电脑的管理控制台，看到的运行的应用程序就是一个个进程！<br>线程：是进程中的一个实例，作为系统调度和分派的基本单位。<br>一个进程可以包含多个线程，一个进程至少有一个线程！ Java程序至少有两个线程： GC、Main</p>
<h3 id="什么是并发，什么是并行？"><a href="#什么是并发，什么是并行？" class="headerlink" title="什么是并发，什么是并行？"></a>什么是并发，什么是并行？</h3><p>并发：多个线程操作同一个资源，交替执行的过程！<br>并行：多个线程同时执行！只有在多核CPU下才能完成！<br>关于最高效率：所有CPU同时执行！<br>所以我们使用多线程或者并发编程的目的：提高效率，让CPU一直工作，达到最高处理性能！</p>
<h3 id="线程有哪几种状态？"><a href="#线程有哪几种状态？" class="headerlink" title="线程有哪几种状态？"></a>线程有哪几种状态？</h3><p>根据State 常量类得知有NEW(创建),RUNNABLE(运行),BLOCKED(阻塞),WAITING(等待),TIMED_WAITING(延时等待),TERMINATED(终止)6种状态！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/03/11/8kyyIP.jpg"
                     
                ></p>
<ul>
<li>new 新建状态，线程创建后尚未启动的状态</li>
<li>runnable 就绪状态，表示可以运行的线程状态（注意这个可以描述），它表示可能在运行或者在排队等待cpu分配时间片</li>
<li>blocked  阻塞等待锁的状态， 表示处于阻塞等待锁的线程正在等待监视器的锁；例如等待执行的synchronized 修饰的代码块或者方法</li>
<li>waiting  等待状态，比如一个线程A 调用了<code>Object.wait()</code>，那么它就处于了等待状态，此时线程A就让出了锁，需要其他线程调用<code>Object.notify() </code>或者<code>Object.notifyAll()</code>方法，线程A才会退出等待状态继续参与到锁的竞争中，需要注意的是其他线程调用<code>notify()</code> 或<code>notifyAll()</code>并不是放弃锁，只是告知线程A 你可以来抢锁了；</li>
<li>time_wating 计时等待状态，类比于waiting状态，它只是多了个超时时间；线程A调用<code>Object.wait(Long timeout1)</code>或者<code>Thred.join(Long timeout2)</code> 将会进入此状态，它表示线程A 将让出锁一段时间，等这段时间过后不需要等谁通知，就会加入锁的竞争中！</li>
<li>terminal 终止状态，表示线程已执行完毕；</li>
</ul>
<h3 id="start-和-run-区别"><a href="#start-和-run-区别" class="headerlink" title="start() 和 run() 区别"></a>start() 和 run() 区别</h3><p>start()源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 判断线程是否是初始状态 及new 出来未启动的状态</span></span><br><span class="line">    <span class="comment">// 不是，就抛异常！</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">            <span class="comment">// 不做任何处理，如果启动抛了异常就会传递到调用堆栈上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>线程调用<code>run()</code>实际是因为<code>Thred</code>类 实现了<code>Runnable</code>接口，重写了其抽象<code>run()</code>,对应的源码如下:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/* What will be run. */</span></span><br><span class="line">    <span class="keyword">private</span> Runnable target;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过源码我们可以知道，start() 方法是Thread原有的方法，且加了关键字synchronized修饰，是一个同步的方法；而run()方式是一个重写的抽象方法，只是个普通的方法；且start()因为要做状态判断所以只能被调用一次，而run()可以被多次调用！</p>
<h3 id="sleep-和wait-的区别"><a href="#sleep-和wait-的区别" class="headerlink" title="sleep() 和wait() 的区别"></a>sleep() 和wait() 的区别</h3><p>sleep() 是一个静态的本地方法，通过<code>Thread.sleep()</code>来调用，wait() 是一个final修饰的不可变的方法，由线程对应的实例来调用；且线程A调用sleep()表示 线程A进入假死状态，即让出CPU时间片，但是其还处于被监听的状态，即不会释放锁（即抱着对象睡）！而wait() 会释放锁，且让出时间片，等过了一段时间才会来争夺CPU资源！此外还有：</p>
<ul>
<li>类不同</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">wait ： Obejct 类     Sleep Thread</span><br><span class="line">在juc编程中，线程休眠怎么实现！Thread.Sleep</span><br><span class="line">// 时间单位</span><br><span class="line">TimeUnit.SECONDS.sleep(3);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>会不会释放资源<br>sleep：抱着锁睡得，不会释放锁！wait 会释放锁！</li>
<li>使用的范围是不同的<br>wait 和 notify 是一组，一般在线程通信的时候使用！<br>sleep 就是一个单独的方法，在那里都可以用！</li>
<li>关于异常<br>sleep 需要捕获异常，而wait不需要</li>
</ul>
<h3 id="blocked-状态和waiting-状态的区别"><a href="#blocked-状态和waiting-状态的区别" class="headerlink" title="blocked 状态和waiting 状态的区别"></a>blocked 状态和waiting 状态的区别</h3><p>首先，waiting 是调用<code>Object.wait()</code> 触发的，是本线程主动让出锁后处于的一种状态需要被唤醒，而blocked 是指当前线程处于等待其他线程使用完某个锁资源的状态，可以理解为处于blocked 状态的线程一直活跃在争夺锁的状态中，只不过争夺锁的管道被阻塞了，导致它处于被阻塞的状态！</p>
<h3 id="线程的常用方法join-和-yeild"><a href="#线程的常用方法join-和-yeild" class="headerlink" title="线程的常用方法join 和 yeild"></a>线程的常用方法join 和 yeild</h3><p>join()  例如在A线程中，B线程调用了join()方法，这时候A 线程会让出执行权给B 线程，当B线程执行完或者超过超时时间后，A线程会继续执行当前线程! (其实join()底层还是wait()来实现的)<br>join()源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 超时时间不能小于0</span></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 超时时间设置为0 表示无限等待 等待其他线程执行完为止</span></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 循环判断直到等于超时时间</span></span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>yeild()</code>是native 修饰的，那么我们可以知道这个是一个本地方法，是由C或C++来实现的，例如A线程调用了yeild()，它表示A线程 告诉线程调度器愿意让出CPU 的执行时间片，但是线程调度器不一定会让其让出，只是比正常情况下增加了让出CPU时间片的几率！</p>
<h3 id="创建线程有哪些方式？你平时是怎么写的？"><a href="#创建线程有哪些方式？你平时是怎么写的？" class="headerlink" title="创建线程有哪些方式？你平时是怎么写的？"></a>创建线程有哪些方式？你平时是怎么写的？</h3><ul>
<li>实现 Runnable 接口；</li>
<li>实现 Callable 接口；</li>
<li>继承 Thread 类</li>
<li>使用线程池<br>对于不频繁创建线程的场景使用继承runnable()或callable()接口的方式，对于需要频繁创建且线程生命周期短的场景使用线程池。<br>实现runnable()接口：<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyRunnable</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
实现callbale()接口：<br>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> ExecutionException,</span><br><span class="line">InterruptedException&#123;</span><br><span class="line">    <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
阿里规约：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/03/11/8kNW7D.png"
                     
                ></li>
</ul>
<p>线程池：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, // 核心池线程数大小 (常用)</span></span><br><span class="line">                              <span class="type">int</span> maximumPoolSize,  <span class="comment">// 最大的线程数大小 (常用)</span></span><br><span class="line">                              <span class="type">long</span> keepAliveTime, <span class="comment">// 超时等待时间 (常用)</span></span><br><span class="line">                              TimeUnit unit, <span class="comment">// 时间单位 (常用)</span></span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue, <span class="comment">// 阻塞队列(常用)</span></span><br><span class="line">                              ThreadFactory threadFactory, <span class="comment">// 线程工厂</span></span><br><span class="line">                              RejectedExecutionHandler handler <span class="comment">// 拒绝策略(常用)) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> :</span><br><span class="line">    AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="线程池的三个方法，七大参数，四种策略？"><a href="#线程池的三个方法，七大参数，四种策略？" class="headerlink" title="线程池的三个方法，七大参数，四种策略？"></a>线程池的三个方法，七大参数，四种策略？</h3><p><em><strong>1.三大方法：</strong></em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例，只能有一个线程！</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 固定的线程数</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 遇强则强！可伸缩！</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 线程池的使用方式！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ok&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 使用完毕后需要关闭！</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><em><strong>2.七大参数：</strong></em><br>下面通过一张图来理解<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/27/GC6gVe.png"
                     
                ><br><strong>corePoolSize</strong>：常用线程池大小，这个参数设置非常关键设置过大浪费资源，设置过小导致线程频繁创建或销毁。</p>
<p><strong>maximumPoolSize</strong>: 常用连接加备用连接（CPU密集型：根据CPU的处理器数量来定！保证最大效率 Runtime.getRuntime().availableProcessors()获取cpu核数；IO密集型： 50 个线程都是进程操作大io资源, 比较耗时！ &gt; 这个是常用的 IO 任务数！）对照图表来说最大线程数等于常用连接数+备用连接数</p>
<p><strong>keepAliveTime</strong>：表示线程池中的线程空闲时间，当空闲时间达到keepAliveTime值时，线程会被销毁，直到只剩下corePoolSize个线程为止，避免浪费内存和句柄资源</p>
<p><strong>TimeUnit</strong>：时间单位，通常是TimeUnit.SECONDS</p>
<p><strong>workQueue</strong>：阻塞队列，结合图来理解也就是等候区。当常用连接和等候区满了，会启用备用连接。当这些都满了，会根据拒绝策略来判定</p>
<p><strong>threadFactory</strong>：线程工厂，用来创建线程的（不需要特殊配置）</p>
<p><strong>handler</strong>：拒绝策略，当最大线程池和阻塞队列都满了，判定新来线程该执行哪种策略<br><em><strong>3.四大策略</strong></em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy()；  抛出异常，丢弃任务</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy()；不抛出异常，丢弃任务</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy()； 尝试获取任务，不一定执行！</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy()； 哪来的去哪里找对应的线程执行！</span><br></pre></td></tr></table></figure></div>

<h3 id="如何配置线程池？"><a href="#如何配置线程池？" class="headerlink" title="如何配置线程池？"></a>如何配置线程池？</h3><p>我们知道可以查看计算的配置或者<code>Runtime.getRuntime().availableProcessor()</code>方法获取计算的核数，而计算机的核数又是和响应性能息息相关的。</p>
<p>另外在确定了核数后我们需要知道所对应的任务是IO密集型还是CPU密集型：</p>
<ul>
<li>IO密集型：指的是大量的读写操作。例如mysql数据库的读写，数据的清洗，文件的读写，附件服务器的读写，网络通信等任务。这类任务不会特别消耗cpu,但是单个任务由于执行io操作会特别耗时。</li>
<li>CPU密集型：指的是依赖于cpu的计算的操作。例如人工智能算法，加解密算法，压缩等需要消耗大量CPU资源的任务，这些大部分场景下都纯CPU计算。</li>
</ul>
<p>在确定任务类型后：</p>
<p>CPU密集型：核心线程数&#x3D;CPU核数+1</p>
<p>IO密集型：核心线程数&#x3D;CPU核心数*（1+IO耗时&#x2F;CPU耗时） 或者核心线程数&#x3D;CPU核心数&#x2F;(1-阻塞系数)</p>
<p>其中CPU密集型阻塞系数为0，IO密集型阻塞系数接近于1，一般认为在0.8~0.9之间。例如:8核CPU,按照公式就是8(1-0.9)&#x3D;80</p>
<p>如果还需要精确点，可以对任务进行压测，监控CPU的负载情况和JVM的线程情况，然后根据实际情况衡量应该创建的线程数！</p>
<blockquote>
<p>小结：以面试题的方式先更新到这儿，因为线程里可说的东西太多了，很多都可以抽出来单独写一篇文章了，所以并不打算在这里细说，哈哈，更多详见后文！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>poi SXSSFWorkbook大数据量导出实践</title>
    <url>/2021/0423/poi-big-count-datas-export.html</url>
    <content><![CDATA[<blockquote>
<p>最近公司做一个生成审批附件的功能，算是对老的功能的一个改造，之前使用的XSSF 和HSSF ；但是一旦数据量超过万级别了，导出的性能就差强人意了；要想快那就必须要要用到poi的SXSSFWorkbook了；</p>
</blockquote>
<h3 id="用到的依赖"><a href="#用到的依赖" class="headerlink" title="用到的依赖"></a>用到的依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List 操作相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>29.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--poi 导入导出相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="示范代码"><a href="#示范代码" class="headerlink" title="示范代码"></a>示范代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPoi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;UserInfo&gt; userInfoList =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>*<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">            userInfo.setId(Long.getLong(Integer.toString(i)))</span><br><span class="line">                    .setName(<span class="string">&quot;echo&quot;</span>+i)</span><br><span class="line">                    .setPassword(UUID.randomUUID().toString());</span><br><span class="line">            userInfoList.add(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileUrl</span> <span class="operator">=</span> <span class="string">&quot;/Users/echo/Desktop/testExcel.xlsx&quot;</span>;</span><br><span class="line">        FileInputStream fs;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File excel=<span class="keyword">new</span> <span class="title class_">File</span>(fileUrl);</span><br><span class="line">            fs=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(excel);</span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(fs);</span><br><span class="line">            <span class="type">SXSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SXSSFWorkbook</span>(workbook,<span class="number">1000</span>);<span class="comment">//内存中保留 1000 条数据，以免内存溢出，其余写入 硬盘</span></span><br><span class="line">            <span class="comment">//获得该工作区的第一个sheet 如果已有模板 和模板名字一致即可</span></span><br><span class="line">            <span class="comment">//Sheet sheet1 = wb.createSheet(&quot;test&quot;);</span></span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet1</span> <span class="operator">=</span> wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">excelRow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//            List&lt;String&gt; columnList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//            columnList.add(&quot;id&quot;);</span></span><br><span class="line"><span class="comment">//            columnList.add(&quot; 姓名&quot;);</span></span><br><span class="line"><span class="comment">//            columnList.add(&quot;密码&quot;);</span></span><br><span class="line"><span class="comment">//            //标题行</span></span><br><span class="line"><span class="comment">//            Row titleRow = (Row) sheet1.createRow(excelRow++);</span></span><br><span class="line"><span class="comment">//            for (int i = 0; i &lt; columnList.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//                Cell cell = titleRow.createCell(i);</span></span><br><span class="line"><span class="comment">//                cell.setCellValue(columnList.get(i));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//明细行</span></span><br><span class="line">            List&lt;List&lt;UserInfo&gt;&gt; reParam = Lists.partition(userInfoList, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;reParam.size();x++) &#123;</span><br><span class="line">                List&lt;UserInfo&gt; userInfos = reParam.get(x);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; userInfos.size(); j++) &#123;</span><br><span class="line">                    <span class="type">Row</span> <span class="variable">contentRow</span> <span class="operator">=</span> sheet1.createRow(excelRow++);</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell0</span> <span class="operator">=</span> contentRow.createCell(<span class="number">0</span>);</span><br><span class="line">                    cell0.setCellValue(userInfos.get(j).getPassword());</span><br><span class="line"></span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell1</span> <span class="operator">=</span> contentRow.createCell(<span class="number">1</span>);</span><br><span class="line">                    cell1.setCellValue(userInfos.get(j).getName());</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell2</span> <span class="operator">=</span> contentRow.createCell(<span class="number">2</span>);</span><br><span class="line">                    cell2.setCellValue(userInfos.get(j).getPassword());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileUrl);</span><br><span class="line">            wb.write(os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="comment">// 关闭输出流</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;导20万数据耗时：&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>SXSSFWorkbook 有个缓存区，所以上面定义为1000，后面的数据就需要按1000拆分写到excel中，如果不设定此值有可能OOM,按1000拆分后，注意创建行的行号就行了！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SXSSFWorkbook</tag>
      </tags>
  </entry>
  <entry>
    <title>由一个bug谈谈深浅克隆</title>
    <url>/2021/0423/deep-shallow-clone.html</url>
    <content><![CDATA[<blockquote>
<p>本篇我们来谈谈深浅克隆！</p>
</blockquote>
<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>最近在改一个bug,构建审批附件数据，由于查询的数据由近3万的量，我们用的是Oracle数据库，数据库查询mybatis做了限制，一次查询最多查1000条，那就需要分批次的去查询数据库，如果是串行的去查，接口很容易就超时了；所以这里用了线程池，然而诡异的是并发去查的时候偶发性的报错，查几千条没有报错，然而数据量一上来就报<code>java.util.ConcurrentModificationException</code>;刚开始以为是线程不安全引起的，将线程操作的集合换成了线程安全的集合后，情况并没有好转，直到我们看到了一个拷贝的代码；<br>代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --多线程及for循环代码省略</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>();</span><br><span class="line">CommonCopier.copy(query1,query2);</span><br><span class="line">query2.setRowStart(i*<span class="number">1000</span>+<span class="number">1</span>);</span><br><span class="line">query2.setRowEnd((i+<span class="number">1</span>)*<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//-- 使用query2查询数据代码省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --CommonCopier 中copy方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CoucurrentHashMap</span> <span class="variable">BEAN_COPIERS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Con</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(Object srcObj,Object targetObj)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> srcObj.getClass().getName()+targetObj.getClass().getName();</span><br><span class="line">    <span class="type">BeanCopier</span> <span class="variable">copier</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(BEAN_COPIER.contains(key))&#123;</span><br><span class="line">        copier = BEAN_COPIER.get(key);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        copier = BeanCopier.create(srcObj.getClass(),targetObj.getClass(),<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    copier.copy(srcObj,targetObj,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样看，这个拷贝方法也没毛病啊！实体之间拷贝，<code>String Integer等常见数据类型</code>的属性拷贝是没有问题，问题就出在拷贝的实体中有引用数据类型，那么对于引用的数据类型这里其实是浅拷贝的，那么在并发的情况下，对于引用的数据类型，线程1设置值去查的时候，线程二可能去修改了，这就导致了sql动态设置值时出现<code>java.util.ConcurrentModificationException</code>异常！<br>那么什么是深拷贝什么是浅拷贝呢？接下来，我们一起来看下</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>浅克隆：把原型对象中的成员变量的值类型的属性都复制一份给克隆对象，并且把成员变量中为引用类型的的引用地址也复制一份给克隆对象；</li>
<li>深克隆：把原型对象中的成员变量的值类型和引用类型都复制一份给克隆对象；</li>
</ul>
<p>我们知道，克隆一个对象我们只需要对应的实体实现Cloneable接口，再重写其Clone方法即可，那么我们就以此来举例说明什么叫深克隆，什么叫浅克隆；</p>
<p>示例代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;富强&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;民主&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>).setName(<span class="string">&quot;Echo&quot;</span>).setStrList(list1);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">cloneUser</span> <span class="operator">=</span> (User)user.clone();</span><br><span class="line">        user.setName(<span class="string">&quot;imEcho&quot;</span>);</span><br><span class="line">        cloneUser.getStrList().addAll(list2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原型对象 user&quot;</span>+user);</span><br><span class="line">        <span class="comment">//原型对象 userUser(id=1, name=imEcho, strList=[富强, 民主])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;拷贝对象 cloneUser&quot;</span> +cloneUser);</span><br><span class="line">        <span class="comment">//拷贝对象 cloneUserUser(id=1, name=Echo, strList=[富强, 民主])</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>根据运行结果，我们知道我们将对象拷贝后，改变了原型对象中值对象name属性的值，接下来又改变了克隆对象中的引用对象strList的值，发现克隆对象中值对象并没有随着原型对象中的值改变而改变，而引用对象却是同步作了更改；那么我们知道clone方法对于值类型的拷贝其实是深拷贝，而对于引用类型的拷贝是浅拷贝！</p>
<h3 id="clone-源码分析"><a href="#clone-源码分析" class="headerlink" title="clone 源码分析"></a>clone 源码分析</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Creates and returns a copy of this object.  The precise meaning</span><br><span class="line">* of &quot;copy&quot; may depend on the class of the object. The general</span><br><span class="line">* intent is that, for any object &#123;@code x&#125;, the expression:</span><br><span class="line">* &lt;blockquote&gt;</span><br><span class="line">* &lt;pre&gt;</span><br><span class="line">* x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line">* will be true, and that the expression:</span><br><span class="line">* &lt;blockquote&gt;</span><br><span class="line">* &lt;pre&gt;</span><br><span class="line">* x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line">* will be &#123;@code true&#125;, but these are not absolute requirements.</span><br><span class="line">* While it is typically the case that:</span><br><span class="line">* &lt;blockquote&gt;</span><br><span class="line">* &lt;pre&gt;</span><br><span class="line">* x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line">* will be &#123;@code true&#125;, this is not an absolute requirement.</span><br><span class="line">* &lt;p&gt;</span><br><span class="line">* By convention, the returned object should be obtained by calling</span><br><span class="line">* &#123;@code super.clone&#125;.  If a class and all of its superclasses (except</span><br><span class="line">* &#123;@code Object&#125;) obey this convention, it will be the case that</span><br><span class="line">* &#123;@code x.clone().getClass() == x.getClass()&#125;.</span><br><span class="line">* &lt;p&gt;</span><br><span class="line">* ...</span><br><span class="line">*/</span><br><span class="line">protected native Object clone() throws CloneNotSupportedException;</span><br></pre></td></tr></table></figure></div>
<p>从源码可以看到，clone方法是一个受保护的本地方法，我们知道本地方法其实就是直接操作内存，底层是调用C的本地方法，所以操作起来性能很高；</p>
<p>由方法上的注释我们可以解读到：</p>
<ul>
<li><ol>
<li>x.clone() !&#x3D; x 返回为true 因为对于所有对象来说，克隆对象和原型对象实际上都是两个对象，它们不相等</li>
</ol>
</li>
<li><ol start="2">
<li>x.clone().getClass() &#x3D;&#x3D; x.getClass() 按照惯例，拷贝的对象类型应该等于原型对象的类型</li>
</ol>
</li>
<li><ol start="3">
<li>x.clone().equals(x) 返回true ,因为拷贝的对象使用equals 比较时它们的值都是相等的</li>
</ol>
</li>
</ul>
<p>　　　　   　</p>
<h3 id="深克隆的常见方法"><a href="#深克隆的常见方法" class="headerlink" title="深克隆的常见方法"></a>深克隆的常见方法</h3><ul>
<li>所有的对象的引用类型都实现Cloneable接口，重写clone方法；</li>
<li>通过构造方法实现深拷贝</li>
<li>使用jdk自带的字节流实现深拷贝</li>
<li>使用apache Common lang 包中的SerializationUtils.clone()方式实现深拷贝</li>
<li>使用JSON 工具类实现深拷贝，比如Gson,FastJson等</li>
</ul>
<p>代码如下：</p>
<blockquote>
<p>引用类型实现Cloneable 接口</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> User1 <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">User1</span> <span class="variable">user1</span> <span class="operator">=</span> (User1) <span class="built_in">super</span>.clone();</span><br><span class="line">        user1.setStudent(<span class="built_in">this</span>.student.clone());</span><br><span class="line">        <span class="keyword">return</span> user1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Student <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Student) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>通过构造器实现深克隆</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    User2(Integer id,String name,Student student)&#123;</span><br><span class="line">        <span class="built_in">this</span>.id =id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User2</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User2</span>(user2.getId(),user2.getName(),<span class="keyword">new</span> <span class="title class_">Student</span>(user2.getStudent().getName(),user2.getStudent().getAge()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    Student(String name,Integer age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>通过字节流实现深克隆</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法需要克隆对象实现序列化</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; T <span class="title function_">clone</span><span class="params">(T obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">cloneObj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line"></span><br><span class="line">        cloneObj = (T)ois.readObject();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>!=oos)&#123;</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>!=ois)&#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>通过apache commons lang3包中的SerializationUtils 的clone方法</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法需要克隆对象实现序列化，本质也是字节流拷贝</span></span><br><span class="line"><span class="type">User1</span> <span class="variable">cloneUser</span> <span class="operator">=</span> (User1)SerializationUtils.clone(user1);</span><br><span class="line"><span class="comment">// 看下它的源码 可以看到对应的也是字节流的方式拷贝的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SerializationUtils</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; T <span class="title function_">clone</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] objectData = serialize(object);</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(objectData);</span><br><span class="line">            SerializationUtils.<span class="type">ClassLoaderAwareObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            Serializable var5;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> <span class="title class_">SerializationUtils</span>.ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader());</span><br><span class="line">                <span class="type">T</span> <span class="variable">readObject</span> <span class="operator">=</span> (Serializable)in.readObject();</span><br><span class="line">                var5 = readObject;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var14) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(<span class="string">&quot;ClassNotFoundException while reading cloned object data&quot;</span>, var14);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var15) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(<span class="string">&quot;IOException while reading cloned object data&quot;</span>, var15);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var16) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(<span class="string">&quot;IOException on closing cloned object data InputStream.&quot;</span>, var16);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> var5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他代码略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>通过Gson 等工具类</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">User1</span> <span class="variable">cloneUser</span> <span class="operator">=</span> gson.fromJson(gson.toJson(User1),User1.class);</span><br><span class="line"><span class="comment">// 使用JSON 工具类会将对象转化为字符串，再从字符串转为为新的对象，因为新的对象是从字符串转化而来的，因此不会和原型对象有任何的关联，所以这样也就间接的实现了深克隆；</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>面试题：Arrays.copyOf()是深克隆还是浅克隆？</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> [] ages = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] ints = Arrays.copyOf(ages, <span class="number">2</span>);<span class="comment">//输出[1,2]</span></span><br><span class="line"><span class="comment">// 我们还是来看源码</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Copies the specified array, truncating or padding with zeros (if necessary)</span></span><br><span class="line"><span class="comment">* so the copy has the specified length.  For all indices that are</span></span><br><span class="line"><span class="comment">* valid in both the original array and the copy, the two arrays will</span></span><br><span class="line"><span class="comment">* contain identical values.  For any indices that are valid in the</span></span><br><span class="line"><span class="comment">* copy but not the original, the copy will contain &lt;tt&gt;0&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">* Such indices will exist if and only if the specified length</span></span><br><span class="line"><span class="comment">* is greater than that of the original array.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> original the array to be copied</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> newLength the length of the copy to be returned</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a copy of the original array, truncated or padded with zeros</span></span><br><span class="line"><span class="comment">*     to obtain the specified length</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> NegativeArraySizeException if &lt;tt&gt;newLength&lt;/tt&gt; is negative</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> NullPointerException if &lt;tt&gt;original&lt;/tt&gt; is null</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOf(<span class="type">int</span>[] original, <span class="type">int</span> newLength) &#123;</span><br><span class="line">    <span class="type">int</span>[] copy = <span class="keyword">new</span> <span class="title class_">int</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                        Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                    Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                    <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// 从源码 我们可以看到 Arrays.copyOf()最终调用的是native本地方法栈的方法，我们知道本地方法都是直接操作内存的，那么源对象变了，因为都是指向同一个内存地址，所以拷贝对象肯定跟着变，所以此种方法也是浅拷贝；</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>总结：其实深克隆和浅克隆的应用最常见的还是，对象的转换上；例如我们在操作dao层的时候，实际上更多是映射到实体上，然后我们需要自己封装一些属性返回给前台，这时候我们需要将属性拷贝到对应得DTO上，所以此时的就用到对象拷贝了；那么了解了深浅克隆后，平时的工作写代码时更要注意了；</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>clone</tag>
      </tags>
  </entry>
  <entry>
    <title>layui表格及工作流二次开发实践1</title>
    <url>/2021/0423/activity-practice-1.html</url>
    <content><![CDATA[<blockquote>
<p>学而时习之不亦说乎</p>
</blockquote>
<h3 id="layui官网"><a href="#layui官网" class="headerlink" title="layui官网"></a>layui官网</h3><p><a class="link"   href="https://www.layui.com"  target="_blank">layui官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><p>进入官网点击立即下载  下载后的文件如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/01/NTZlB4.png"
                      alt="NTZlB4.png"
                ></p>
<p>注：mock.js 是我自己加的，模拟后台接口数据用的</p>
<h3 id="chooseRoleDialog-html列表弹窗页面"><a href="#chooseRoleDialog-html列表弹窗页面" class="headerlink" title="chooseRoleDialog.html列表弹窗页面"></a>chooseRoleDialog.html列表弹窗页面</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;layui/css/layui.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;layui/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;editor-app/libs/jquery_1.11.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;layui/mock.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.user-dialog</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.user-dialog</span> <span class="selector-class">.tree-area</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.user-dialog</span> <span class="selector-class">.table-area</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.defined-area</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-left</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-top</span>: <span class="number">3%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.layui-form-label</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">95px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-dialog&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div class=&quot;tree-area&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;div id=&quot;tree_id&quot; class=&quot;demo-tree-more&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-area&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>角色分类编码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;roleSortCode&quot;</span> <span class="attr">name</span>=<span class="string">&quot;roleSortCode&quot;</span>  <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>角色分类名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;roleSortName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;roleSortName&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;queryTable()&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;resetQuery()&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-hide&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user_table&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;div class=&quot;layui-btn-container defined-area&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;button type=&quot;button&quot; class=&quot;layui-btn&quot; onclick=&quot;canSave()&quot;&gt;确定&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;button type=&quot;button&quot; class=&quot;layui-btn&quot; onclick=&quot;closeDialog()&quot;&gt;取消&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">version</span>: <span class="string">&#x27;1591161919724&#x27;</span> <span class="comment">//为了更新 js 缓存,可忽略</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userStr = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> selectUser = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> selectUserId = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> requestUrl = <span class="string">&quot;http://xx.xx.xx.xx:8890/upms/roleSort/pageRoleSort&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> getTableData;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> requestParams = &#123;<span class="attr">pageNum</span>:<span class="number">1</span>,<span class="attr">pageSize</span>:<span class="number">10</span>,<span class="attr">roleSortCode</span>:<span class="string">&quot;&quot;</span>,<span class="attr">roleSortName</span>:<span class="string">&quot;&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> response = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> tree,layer,util,laypage,table;</span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>([<span class="string">&#x27;tree&#x27;</span>, <span class="string">&#x27;util&#x27;</span>,<span class="string">&#x27;laypage&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;table&#x27;</span>,<span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;slider&#x27;</span>], <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        tree = layui.<span class="property">tree</span></span></span><br><span class="line"><span class="language-javascript">        layer = layui.<span class="property">layer</span></span></span><br><span class="line"><span class="language-javascript">        util = layui.<span class="property">util</span></span></span><br><span class="line"><span class="language-javascript">        laypage = layui.<span class="property">laypage</span> <span class="comment">//分页</span></span></span><br><span class="line"><span class="language-javascript">        table = layui.<span class="property">table</span> <span class="comment">//表格</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//页面第一次请求 默认 1页 10条</span></span></span><br><span class="line"><span class="language-javascript">        getTableData = <span class="keyword">function</span> <span class="title function_">getTableDatas</span>(<span class="params">params,response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: requestUrl+<span class="string">&#x27;?pageNum=&#x27;</span>+params.<span class="property">pageNum</span>+<span class="string">&#x27;&amp;pageSize=&#x27;</span>+params.<span class="property">pageSize</span></span></span><br><span class="line"><span class="language-javascript">                    +<span class="string">&#x27;&amp;roleCode=&#x27;</span>+params.<span class="property">roleSortCode</span>+<span class="string">&#x27;&amp;roleName=&#x27;</span>+params.<span class="property">roleSortName</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    response = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">rendTable</span>(response);</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">page</span>(response);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 表格监听</span></span></span><br><span class="line"><span class="language-javascript">                    table.<span class="title function_">on</span>(<span class="string">&#x27;checkbox(test)&#x27;</span>, <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(obj.<span class="property">checked</span> &amp;&amp; obj.<span class="property">type</span>==<span class="string">&#x27;all&#x27;</span>)&#123;<span class="comment">// 全选</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> response.<span class="property">records</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> rowData = response.<span class="property">records</span>[i];</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span>(selectUserId.<span class="title function_">indexOf</span>(<span class="built_in">parseInt</span>(rowData.<span class="property">id</span>)) == -<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                    selectUser.<span class="title function_">push</span>(rowData);</span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!obj.<span class="property">checked</span> &amp;&amp; obj.<span class="property">type</span>==<span class="string">&#x27;all&#x27;</span>)&#123;<span class="comment">// 全不选</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; selectUser.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt; response.<span class="property">records</span>.<span class="property">length</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="keyword">var</span> rowData = response.<span class="property">records</span>[j];</span></span><br><span class="line"><span class="language-javascript">                                    <span class="keyword">if</span>(<span class="built_in">parseInt</span>(selectUser[i].<span class="property">id</span>) == <span class="built_in">parseInt</span>(rowData.<span class="property">id</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                                       selectUser.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">                                    &#125;</span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (obj.<span class="property">checked</span>)&#123;<span class="comment">//单个选</span></span></span><br><span class="line"><span class="language-javascript">                             selectUser.<span class="title function_">push</span>(obj.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!obj.<span class="property">checked</span>)&#123;<span class="comment">//单个取消选择</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> selectUser)&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span>(selectUser[i].<span class="property">id</span> == obj.<span class="property">data</span>.<span class="property">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                    selectUser.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        selectUserId = [];</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> selectUser)&#123;</span></span><br><span class="line"><span class="language-javascript">                            selectUserId.<span class="title function_">push</span>(selectUser[i].<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    response = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重构数据 增加选中属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">rebuildTableData</span>(<span class="params">response</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> role_ids= <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;roles_id&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(role_ids)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> select_list = role_ids.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 数据回显选中  这部分逻辑可以放到后台实现</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> r <span class="keyword">in</span> select_list)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> id = select_list[r].<span class="title function_">substring</span>(<span class="number">0</span>,select_list[r].<span class="title function_">indexOf</span>(<span class="string">&quot;,&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> roleSortName = select_list[r].<span class="title function_">substring</span>(select_list[r].<span class="title function_">indexOf</span>(<span class="string">&quot;,&quot;</span>)+<span class="number">1</span>,select_list[r].<span class="title function_">lastIndexOf</span>(<span class="string">&quot;,&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> roleSortCode = select_list[r].<span class="title function_">substring</span>(select_list[r].<span class="title function_">lastIndexOf</span>(<span class="string">&quot;,&quot;</span>)+<span class="number">1</span>,select_list[r].<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> map = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="property">id</span> = id;</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="property">roleSortName</span> = roleSortName;</span></span><br><span class="line"><span class="language-javascript">                    map.<span class="property">roleSortCode</span> = roleSortCode;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(id)&#123;</span></span><br><span class="line"><span class="language-javascript">                        selectUser.<span class="title function_">push</span>(map);</span></span><br><span class="line"><span class="language-javascript">                        selectUserId.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(id));</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> response.<span class="property">records</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> rowData = response.<span class="property">records</span>[i];</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(selectUserId.<span class="title function_">indexOf</span>(rowData.<span class="property">id</span>)!=-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        rowData.<span class="property">LAY_CHECKED</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        rowData.<span class="property">LAY_CHECKED</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">records</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 表格渲染</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">rendTable</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">rebuildTableData</span>(response);</span></span><br><span class="line"><span class="language-javascript">            table.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">elem</span>: <span class="string">&#x27;#user_table&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">cols</span>:  [[ <span class="comment">//表头</span></span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">type</span>: <span class="string">&#x27;checkbox&#x27;</span>, <span class="attr">fixed</span>: <span class="string">&#x27;left&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="attr">field</span>: <span class="string">&#x27;id&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;id&#x27;</span>, <span class="attr">hide</span>:<span class="literal">true</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="attr">field</span>: <span class="string">&#x27;roleSortCode&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;角色分类编码&#x27;</span>, <span class="attr">width</span>:<span class="string">&#x27;30%&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="attr">field</span>: <span class="string">&#x27;roleSortName&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;角色分类名称&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;30%&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>, <span class="attr">totalRow</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="attr">field</span>: <span class="string">&#x27;remark&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;备注&#x27;</span>, <span class="attr">width</span>:<span class="string">&#x27;40%&#x27;</span>, <span class="attr">sort</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: response.<span class="property">records</span>, <span class="comment">// 数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">limit</span>: response.<span class="property">total</span>, <span class="comment">// 显示的条数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//page: true, // 开启分页</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">done</span>: <span class="keyword">function</span>(<span class="params">res, curr, count</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 分页</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">page</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            laypage.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">elem</span>: <span class="string">&#x27;page&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: response.<span class="property">total</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">curr</span>: response.<span class="property">current</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">limit</span>: requestParams.<span class="property">pageSize</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">limits</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">layout</span>: [<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;prev&#x27;</span>, <span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;skip&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">jump</span>: <span class="keyword">function</span> (<span class="params">obj, first</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//首次不执行</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (!first) &#123;</span></span><br><span class="line"><span class="language-javascript">                        requestParams.<span class="property">pageNum</span> = obj.<span class="property">curr</span>;</span></span><br><span class="line"><span class="language-javascript">                        requestParams.<span class="property">pageSize</span> = obj.<span class="property">limit</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">getTableData</span>(requestParams,response)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">yes</span>:<span class="keyword">function</span>(<span class="params">index, layero</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    layer.<span class="title function_">close</span>(index);<span class="comment">//需手动关闭 弹出层</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//getTableData(requestParams, response);</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">queryTable</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 查询</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">queryTable</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        requestParams.<span class="property">roleSortName</span> = $(<span class="string">&quot;#roleSortName&quot;</span>).<span class="title function_">val</span>()==<span class="string">&quot;&quot;</span>?<span class="string">&#x27;&#x27;</span>:$(<span class="string">&quot;#roleSortName&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">        requestParams.<span class="property">roleSortCode</span> = $(<span class="string">&quot;#roleSortCode&quot;</span>).<span class="title function_">val</span>()==<span class="string">&quot;&quot;</span>?<span class="string">&#x27;&#x27;</span>:$(<span class="string">&quot;#roleSortCode&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getTableData</span>(requestParams, response);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 重置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">resetQuery</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#roleSortCode&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#roleSortName&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        requestParams = &#123;<span class="attr">pageNum</span>:<span class="number">1</span>,<span class="attr">pageSize</span>:<span class="number">10</span>,<span class="attr">roleSortCode</span>:<span class="string">&quot;&quot;</span>,<span class="attr">roleSortName</span>:<span class="string">&quot;&quot;</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getTableData</span>(requestParams, response);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 确定</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">canSave</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        userStr = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> selectUser)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(i == selectUser.<span class="property">length</span>-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                userStr += selectUser[i].<span class="property">id</span>+<span class="string">&quot;,&quot;</span>+selectUser[i].<span class="property">roleSortName</span>+<span class="string">&quot;,&quot;</span>+selectUser[i].<span class="property">roleSortCode</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                userStr += selectUser[i].<span class="property">id</span>+<span class="string">&quot;,&quot;</span>+selectUser[i].<span class="property">roleSortName</span>+<span class="string">&quot;,&quot;</span>+selectUser[i].<span class="property">roleSortCode</span>+<span class="string">&quot;;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(userStr);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> userStr;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//function closeDialog()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    var index = parent.layer.getFrameIndex(window.name); //先得到当前iframe层的索引</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    parent.layer.close(index);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// --树形结构</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// tree.render(&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     elem: &#x27;#tree_id&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     ,data: data1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     ,showLine: true,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     click: function(obj)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         layer.msg(JSON.stringify(obj.data));</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         var currTreeId = obj.data.id;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         //上一次点击的树节点id</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         var beforeTreeId =  $(&#x27;#tree_id&#x27;).val();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         if (currTreeId !== beforeTreeId)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             $(&#x27;div [data-id=&quot;&#x27;+beforeTreeId+&#x27;&quot;] div .layui-tree-txt&#x27;).first().css(&#x27;color&#x27;,&#x27;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             $(&#x27;div [data-id=&quot;&#x27;+currTreeId+&#x27;&quot;] div .layui-tree-txt&#x27;).first().css(&#x27;color&#x27;,&#x27;#009688&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             $(&#x27;#tree_id&#x27;).val(obj.data.id);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>至此layui关于表格的查询展示及勾选数据的回显都已全部处理完毕；目前做这个功能是activity工作流的二次开发，本页面实现的功能是工作流节点增加一个角色，点击弹出此页面选择角色。然后下次点击上次选中的数据需要被回显即被勾选上了！坑点：layui的表格复选框不支持jquery模拟点击事件，且如果用样式控制选中下次点击时复选框会异常！关于选中与否，使用表格字段属性LAY_CHECKED控制！</p>
<p>关于工作流绘制的二次开发”com-activity-demo”详见本人<a class="link"   href="https://gitee.com/viEcho/com-activity-demo"  target="_blank">gitee地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.下载项目后需要在对应的库生成对应的25张表。</p>
<p>注意：此项目工作流前端用的是angular.js，需要遵循其模板语法；此处layui这个表格弹窗，我采用的是iframe标签引入到对应的模板页面中的，所以涉及到iframe 标签及其父子页面传值调用的方法，参考博客<a class="link"   href="https://www.cnblogs.com/llljpf/p/7435526.html"  target="_blank">iframe父子页面通信 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>此外，接口若有跨域需要在服务端添加允许跨域配置，且改写了前端代码后浏览器会有本地缓存，crtl+f5刷新后浏览或直接采用无痕浏览模式查看！</p>
<blockquote>
<p>小结:后面继续写写activity之类的实践篇，及补上springboot的学习总结篇！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>activity</tag>
      </tags>
  </entry>
  <entry>
    <title>工作流二次开发之新增表单实践2</title>
    <url>/2021/0423/activity-practice-2.html</url>
    <content><![CDATA[<blockquote>
<p>再接上篇，目前基本已完成工作流表单属性的自增和页面调整工作；现将步骤和关键代码总结如下：</p>
</blockquote>
<h3 id="官方文档及下载地址"><a href="#官方文档及下载地址" class="headerlink" title="官方文档及下载地址"></a>官方文档及下载地址</h3><ul>
<li>地址：<a class="link"   href="https://www.activiti.org/5.x/userguide/"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>5.22版本：<a class="link"   href="https://www.activiti.org/get-started"  target="_blank">下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/09/UeI8iT.png"
                      alt="UeI8iT.png"
                ></p>
<p>关于springboot结合使用的项目，有前辈已经写了帖子并且集成好了</p>
<p>附上博客地址：<a class="link"   href="https://www.cnblogs.com/rmxd/p/11715016.html"  target="_blank">Activiti工作流学习之SpringBoot整合Activiti5.22.0实现在线设计器（二） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>如果你看了官方文档，且也认真看了这篇博客，那么博客中的开源代码你拉下来后，我想基本的功能你已经实现了；表单设计器的页面，你已经能看到了；那么我们现在要做的是工作流的二次开发，即现有的节点表单不满足我们现有的业务需求，我们需要对其进行二次改造，增加我们自己的表单！</p>
<h3 id="新增自定义表单"><a href="#新增自定义表单" class="headerlink" title="新增自定义表单"></a>新增自定义表单</h3><p>增加表单之前，我们还需要稍微了解一下angular.js的东西，因为本项目的前端数据绑定是angular模板语法来绑定的；废话不多说，我们来看下前台代码结构：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/09/UeIzkV.png"
                      alt="UeIzkV.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/09/UeoAmR.png"
                      alt="UeoAmR.png"
                ></p>
<p>解释下：properties文件夹下就是表单页面，write-template对应的是编辑页面，popup对应的是弹窗，display对应的是绑定字段属性的一个展示页面；且根据名字，你可以知道xxx-aaa-controller.js代表aaa相关页面的操作js;好，了解这些后你需要知道表单是如何增加的，以上这些只是表单属性操作的页面，我们来看下resources下的stencilset.json；<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/09/UeoYAP.png"
                      alt="UeoYAP.png"
                ></p>
<p>因为我们是需要到对应的任务节点添加字段，即在用户活动中增加自定义的属性，那么我们找到对应的用户活动在propertypackages中添加我们自定义的package即可：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/09/Ueoa9S.png"
                      alt="Ueoa9S.png"
                ></p>
<p>知道了大概模板结构和方法后，我们照猫画虎；也需要增加对应的三个模板页面和对应的controller.js；如果是弹窗，简单的页面我们直接写参照描述表单的写法，如果是比较复杂的表格筛选这样的，建议使用layui；具体页面可以参考我之前的博客关于layui表格的实践，在modal-body中引入自己写的页面即可，我这里做了个隐藏输入框是为了表单选中后的一个回显！</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;role_frame&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../../associateDeptDialog.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myframe&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;property.value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;roles_id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>关于数据传值，特别说明下由于采用iframe标签，涉及到父子页面的传值问题，我们需要先在自定义的页面将值组装好，然后父页面调用子页面的方法拿到返回值；代码如下，在对应的controller中：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">$scope.<span class="property">save</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> selectUsers = myframe.<span class="property">window</span>.<span class="title function_">canSave</span>();<span class="comment">//调用子页面的canSave方法拿到对应的值</span></span><br><span class="line">    $scope.<span class="property">property</span>.<span class="property">value</span> = selectUsers;</span><br><span class="line">    $scope.<span class="title function_">updatePropertyInModel</span>($scope.<span class="property">property</span>);</span><br><span class="line">    $scope.<span class="title function_">close</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="改造原有表单逻辑"><a href="#改造原有表单逻辑" class="headerlink" title="改造原有表单逻辑"></a>改造原有表单逻辑</h3><p>那么我们要对原有的表单进行改造呢？首先还是要清楚，数据怎么来的怎么绑定的，绑定的数据格式是怎么样的！</p>
<p>特说明一点，此次工作流的二次开发过程中，发现节点代理有候选人候选组的属性，在节点流转的时候我们根据表<code>act_ru_identitylink</code>即可了解当前处理人；那么我们需要根据我们自己的用户角色来进行选择，则需要改造原有的表单逻辑。</p>
<p>如下，我们修改代理人表单，以实现勾选的方式填充进关联用户和关联角色；需要注意的是，关联用户即候选人和候选组都是多个，改之前是多个input输入框，我们了解到对应的数据结构也是一个数组；我这里多个是以分号分隔，只是展示，真实到后台数据还是原有的数组结构（注意：以逗号隔开，数据保存时会被存为多条，所以这里用&amp;符号隔开）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/09/UeooH1.png"
                      alt="UeooH1.png"
                ></p>
<p>废话不多说，我们还是来看下实现，对应的popu弹窗页面：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row row-no-gutter&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;label for=&quot;userField&quot;&gt;&#123;&#123;&#x27;PROPERTY.ASSIGNMENT.CANDIDATE_USERS&#x27; | translate&#125;&#125;&lt;/label&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span>&gt;</span>关联用户(候选人)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">&quot;chooseUser()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px;&quot;</span>&gt;</span>选择用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;property.selectUsers&quot;</span> <span class="attr">id</span>=<span class="string">&quot;users_id&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;div ng-repeat=&quot;candidateUser in assignment.candidateUsers&quot;&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--input id=&quot;userField&quot; class=&quot;form-control&quot; type=&quot;text&quot; ng-model=&quot;candidateUser.value&quot; /&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;i class=&quot;glyphicon glyphicon-minus clickable-property&quot; ng-click=&quot;removeCandidateUserValue($index)&quot;&gt;&lt;/i&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;i ng-if=&quot;$index == (assignment.candidateUsers.length - 1)&quot; class=&quot;glyphicon glyphicon-plus clickable-property&quot; ng-click=&quot;addCandidateUserValue($index)&quot;&gt;&lt;/i&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;label for=&quot;groupField&quot;&gt;&#123;&#123;&#x27;PROPERTY.ASSIGNMENT.CANDIDATE_GROUPS&#x27; | translate&#125;&#125;&lt;/label&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span>&gt;</span>关联角色(候选组)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">&quot;chooseRole()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px;&quot;</span>&gt;</span>选择角色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;property.selectRoles&quot;</span> <span class="attr">id</span>=<span class="string">&quot;roles_id&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;div ng-repeat=&quot;candidateGroup in assignment.candidateGroups&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;input id=&quot;groupField&quot; class=&quot;form-control&quot; type=&quot;text&quot; ng-model=&quot;candidateGroup.value&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;i class=&quot;glyphicon glyphicon-minus clickable-property&quot; ng-click=&quot;removeCandidateGroupValue($index)&quot;&gt;&lt;/i&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;i ng-if=&quot;$index == (assignment.candidateGroups.length - 1)&quot; class=&quot;glyphicon glyphicon-plus clickable-property&quot; ng-click=&quot;addCandidateGroupValue($index)&quot;&gt;&lt;/i&gt;--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- &lt;/div&gt;--&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>部分controller.js页面，因为两个选择按钮的弹窗一致，只po出一个代码即可，其余不重要的js可以屏蔽掉：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($scope.<span class="property">assignment</span>.<span class="property">candidateUsers</span> == <span class="literal">undefined</span> || $scope.<span class="property">assignment</span>.<span class="property">candidateUsers</span>.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    $scope.<span class="property">assignment</span>.<span class="property">candidateUsers</span> = [&#123;<span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>&#125;];</span><br><span class="line">    $scope.<span class="property">property</span>.<span class="property">selectUsers</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> candidateUsers = $scope.<span class="property">assignment</span>.<span class="property">candidateUsers</span>;</span><br><span class="line">    <span class="keyword">var</span> selectUsers = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    $scope.<span class="property">property</span>.<span class="property">selectUsers</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; candidateUsers.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; candidateUsers.<span class="property">length</span> - <span class="number">1</span>)&#123;</span><br><span class="line">            selectUsers += candidateUsers[i].<span class="property">value</span> + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == candidateUsers.<span class="property">length</span> - <span class="number">1</span>)&#123;</span><br><span class="line">            selectUsers += candidateUsers[i].<span class="property">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.<span class="property">property</span>.<span class="property">selectUsers</span> = selectUsers;</span><br><span class="line">&#125;</span><br><span class="line">$scope.<span class="property">chooseUser</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    layui.<span class="title function_">use</span>([<span class="string">&#x27;layer&#x27;</span>], <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> layer = layui.<span class="property">layer</span>;</span><br><span class="line">        layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;关联用户选择&#x27;</span>,</span><br><span class="line">            <span class="attr">shadeClose</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">shade</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">area</span>: [<span class="string">&#x27;75%&#x27;</span>, <span class="string">&#x27;80%&#x27;</span>],</span><br><span class="line">            <span class="attr">maxmin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">content</span>: [<span class="string">&#x27;../../../associateUserDialog.html&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>],<span class="comment">//iframe的url</span></span><br><span class="line">            <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>, <span class="string">&#x27;取消&#x27;</span>],</span><br><span class="line">            <span class="attr">yes</span>: <span class="keyword">function</span>(<span class="params">index, layer0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> iframeWin0 = <span class="variable language_">window</span>[layer0.<span class="title function_">find</span>(<span class="string">&#x27;iframe&#x27;</span>)[<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>]];</span><br><span class="line">                <span class="keyword">var</span> selectUsers = iframeWin0.<span class="title function_">canSave</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(selectUsers);</span><br><span class="line">                $scope.<span class="property">assignment</span>.<span class="property">candidateUsers</span> = [];</span><br><span class="line">                <span class="keyword">var</span> candidateUsers = [];</span><br><span class="line">                <span class="keyword">if</span>(selectUsers)&#123;</span><br><span class="line">                    <span class="keyword">var</span> users_list = selectUsers.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; users_list.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                        <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">                        <span class="keyword">var</span> user = users_list[i];</span><br><span class="line">                        map.<span class="property">value</span> = user;</span><br><span class="line">                        candidateUsers.<span class="title function_">push</span>(map);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                $scope.<span class="property">assignment</span>.<span class="property">candidateUsers</span> = candidateUsers;</span><br><span class="line">                $scope.<span class="property">property</span>.<span class="property">selectUsers</span> = selectUsers;<span class="comment">//模板数据绑定</span></span><br><span class="line">                layer.<span class="title function_">close</span>(index);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">btn2</span>: <span class="keyword">function</span>(<span class="params">index, layero</span>)&#123;</span><br><span class="line">                <span class="comment">//按钮【按钮二】的回调</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因为此次修改涉及到二次数据回显：第一次点击代理数据回显到对应的第一层弹窗中，第二次回显到我们自己写的弹窗中，所以associateUserDialog.html页面中canSave方法需要修改一下：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">canSave</span>(<span class="params"></span>)&#123;</span><br><span class="line">    userStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> selectUser)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == selectUser.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">            userStr += selectUser[i].<span class="property">id</span>+<span class="string">&quot;&amp;&quot;</span>+selectUser[i].<span class="property">roleName</span>+<span class="string">&quot;&amp;&quot;</span>+selectUser[i].<span class="property">roleCode</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            userStr += selectUser[i].<span class="property">id</span>+<span class="string">&quot;&amp;&quot;</span>+selectUser[i].<span class="property">roleName</span>+<span class="string">&quot;&amp;&quot;</span>+selectUser[i].<span class="property">roleCode</span>+<span class="string">&quot;;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;roles_id&quot;</span>).<span class="property">value</span> = userStr;<span class="comment">// 增加此为了数据绑定</span></span><br><span class="line">    <span class="keyword">return</span> userStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>好，自此我们完成了自定义表单和原有表单的改造；接下来我们来看下，自定义字段后台该怎么处理吧；因为原有表单的改造，我们只是改变了表单填充的方式并没有改变数据结构，所以不需要处理；而我们自定义的表单属性，原有的节点实体是无法识别的，我们需要自己处理下；</p>
<h3 id="后台自定义属性处理"><a href="#后台自定义属性处理" class="headerlink" title="后台自定义属性处理"></a>后台自定义属性处理</h3><p>通过了解，我们知道我们自己增加的属性是以对应的json保存在表act_ge_bytearry中的bytes字段中的，那么我们还需要做的就是流程发布的时候，将对应的表单属性解析为对应的xml;我们来看下发布接口：<code>deployment</code></p>
<p>通过断点调试及源码了解，我们不难发现json 转xml的方法<code>convertJsonToElement</code>;那么关键就是重新它，和在转换时使用我们自定义的转换器；<code>DefinedBpmnJsonConverter</code> 继承 <code>UserTaskJsonConverter</code>重新方法如下:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> FlowElement <span class="title function_">convertJsonToElement</span><span class="params">(JsonNode elementNode, JsonNode modelNode, Map&lt;String, JsonNode&gt; shapeMap)</span> &#123;</span><br><span class="line">    <span class="type">FlowElement</span> <span class="variable">flowElement</span> <span class="operator">=</span> <span class="built_in">super</span>.convertJsonToElement(elementNode,modelNode,shapeMap);</span><br><span class="line">    <span class="type">UserTask</span> <span class="variable">userTask</span> <span class="operator">=</span> (UserTask)flowElement;</span><br><span class="line"></span><br><span class="line">    CustomProperty customProperty1= <span class="keyword">new</span> <span class="title class_">CustomProperty</span>();</span><br><span class="line">    customProperty1.setName(<span class="string">&quot;associaterolestype&quot;</span>);</span><br><span class="line">    customProperty1.setSimpleValue(<span class="built_in">this</span>.getPropertyValueAsString(<span class="string">&quot;associaterolestype&quot;</span>,elementNode));</span><br><span class="line"></span><br><span class="line">    <span class="type">CustomProperty</span> <span class="variable">customProperty2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomProperty</span>();</span><br><span class="line">    customProperty2.setName(<span class="string">&quot;associatedepts&quot;</span>);</span><br><span class="line">    customProperty2.setSimpleValue(<span class="built_in">this</span>.getPropertyValueAsString(<span class="string">&quot;associatedepts&quot;</span>,elementNode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将自定义属性设置在CustomProperties中，这是很多博客没有写明的！</span></span><br><span class="line">    userTask.getCustomProperties().add(customProperty1);</span><br><span class="line">    userTask.getCustomProperties().add(customProperty2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userTask;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">definedBpmConverter</span><span class="params">()</span>&#123;</span><br><span class="line"> fillTypes(ChildBpmnJsonConverter.getConvertersToBpmnMap(),ChildBpmnJsonConverter.getConvertersToJsonMap());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fillTypes</span><span class="params">(Map&lt;String, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToBpmnMap, Map&lt;Class&lt;? extends BaseElement&gt;, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToJsonMap)</span> &#123;</span><br><span class="line">    fillJsonTypes(convertersToBpmnMap);</span><br><span class="line">    fillBpmnTypes(convertersToJsonMap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fillJsonTypes</span><span class="params">(Map&lt;String, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToBpmnMap)</span> &#123;</span><br><span class="line">    convertersToBpmnMap.put(<span class="string">&quot;UserTask&quot;</span>, DefinedBpmnJsonConverter.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fillBpmnTypes</span><span class="params">(Map&lt;Class&lt;? extends BaseElement&gt;, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToJsonMap)</span> &#123;</span><br><span class="line">    convertersToJsonMap.put(UserTask.class, DefinedBpmnJsonConverter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>ChildBpmnJsonConverter</code> 代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChildBpmnJsonConverter</span> <span class="keyword">extends</span> <span class="title class_">BpmnJsonConverter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseBpmnJsonConverter</span>&gt;&gt; getConvertersToBpmnMap()&#123;</span><br><span class="line">        <span class="keyword">return</span> convertersToBpmnMap;</span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseElement</span>&gt;, Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseBpmnJsonConverter</span>&gt;&gt; getConvertersToJsonMap()&#123;</span><br><span class="line">         <span class="keyword">return</span> convertersToJsonMap;</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>deployment</code>接口中，我们需要json转换前调用自定义的转换代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析转换</span></span><br><span class="line"><span class="type">BpmnJsonConverter</span> <span class="variable">jsonConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BpmnJsonConverter</span>();</span><br><span class="line">DefinedBpmnJsonConverter.definedBpmConverter();</span><br><span class="line"><span class="type">BpmnModel</span> <span class="variable">model</span> <span class="operator">=</span> jsonConverter.convertToBpmnModel(modelNode);</span><br></pre></td></tr></table></figure></div>

<p>关于后端自定义属性的解析亦可参考博文:<a class="link"   href="https://www.cnblogs.com/huyufan/p/7777680.html"  target="_blank">activiti modeler 任务节点自定义属性扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，此处只是po出了原博客没有的代码。</p>
<p>注：补充一点，多个角色或人员采用<code>#</code>分割，因为后面发现<code>&amp;</code>符号，流程发布后在标签中会被转义成<code>&amp;amp;</code>而在其他标签值中不受影响，为了统一解析采用<code>#</code>分割更好！</p>
<blockquote>
<p>小结：关于工作流的二次开发，其实主要工作量还是前端页面的改造部分，因为后端对应的api已经有了，最多就是扩展重写一下。至于工作流结合业务场景怎么使用，这个还需看官方文档和api和具体需求了，奥力给!</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>activity</tag>
      </tags>
  </entry>
  <entry>
    <title>包总是太大？maven一个配置教你瘦身</title>
    <url>/2021/0423/maven-package-to-small.html</url>
    <content><![CDATA[<blockquote>
<p>微服务项目越来越多，特别是一个父工程下有多个子工程这种，每次打包都发现一个包都有40～50M；但是实际上有的项目代码是没有多少的，那为什么打完包后还是有这么大呢？</p>
</blockquote>
<p>其实是因为打成的包是一个可执行的jar,对应的依赖jar也被打包进去了。但是对于我们来说，若是其实项目的依赖的jar就那么多，我们能不能打包单个微服务时，不将这些依赖的jar打包进去，而是在项目运行启动的时候指定依赖jar的地址让其运行就可以了呢？</p>
<p>答案是肯定的，maven改写下配置文件即可实现。话不多说，我们开始：</p>
<h3 id="直接执行打包"><a href="#直接执行打包" class="headerlink" title="直接执行打包"></a>直接执行打包</h3><p>这里以一个开源的项目bootdo为例，直接执行打包<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/16/UrIDO0.jpg"
                      alt="88M"
                ></p>
<p>我们可以解压看下，其实就是因为依赖的jar包被打包进去了，才会有88M之多！<br>我们将打包后的这个文件夹改名增加后缀“_old”，并且文件夹类型改为zip后，再使用命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -d bootdo-2.0.0_old bootdo-2.0.0_old.zip</span><br></pre></td></tr></table></figure></div>
<p>如下图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/17/UrbkV0.png"
                     
                ></p>
<p>我们点开解压后的文件，可以看到项目依赖的jar包都在BOOT-INF&#x2F;lib下；</p>
<h3 id="更改mvn打包配置"><a href="#更改mvn打包配置" class="headerlink" title="更改mvn打包配置"></a>更改mvn打包配置</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- spring-boot:run 中文乱码解决 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.bootdo.BootdoApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--注：若是有子工程这样添加进来，我这里bootdo就是一个单独的工程所以这里我只添加一个 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bootdo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootdo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>添加这些配置后，我们再次打包看下大小（注：直接package，不要clean，不然你解压的jar后面指定不了！）：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/17/Ur7YTK.png"
                      alt="22M"
                ><br>可以看到，我们打完包后只有22M的一个大小了，因为本项目包含了很多静态文件，例如图片图标啥的（其实这些都可以无损压缩下的）所以还是有20M多，但是基本已经是以前的1&#x2F;4大小了；</p>
<h3 id="如何启动"><a href="#如何启动" class="headerlink" title="如何启动"></a>如何启动</h3><p>很明显，我们直接运行现在的jar包是无法运行的，我们必须告诉编译器项目运行jar的位置</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">java -Dloader.path=./bootdo-2.0.0_old/BOOT-INF/lib/ -jar bootdo-2.0.0.jar</span><br></pre></td></tr></table></figure></div>
<p>如下图所示，我们指定了mvn其他依赖的位置后，就可以启动此项目了；<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/17/UrqYT0.png"
                     
                ></p>
<blockquote>
<p>小结：这是我本地的演示，那么实际到项目上时，我们可以第一次打包将需要的jar包放到指定的位置，后面jenkin打包或手动启动时，指定路径即可。是不是很简单，那就赶快尝试下吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mvn</tag>
      </tags>
  </entry>
  <entry>
    <title>JMM 内存模型知识点探究</title>
    <url>/2021/0423/jmm-memory-model.html</url>
    <content><![CDATA[<blockquote>
<p>Java  Memory  Model  Java内存模型；就是一个理论! 线程安全相关~！</p>
</blockquote>
<h3 id="八大操作："><a href="#八大操作：" class="headerlink" title="八大操作："></a>八大操作：</h3><p>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可再分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许例外）</p>
<ul>
<li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>
<li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li>load   (载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li>
<li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>
<li>assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>
<li>*store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li>
<li>write（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>
</ul>
<p><strong>JMM对这八种指令的使用，制定了如下规则：</strong></p>
<ul>
<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>
<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存 （可见）</li>
<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>
<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li>
<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>
<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>
<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>
<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>
</ul>
<h3 id="Volatile-关键字"><a href="#Volatile-关键字" class="headerlink" title="Volatile 关键字"></a>Volatile 关键字</h3><blockquote>
<p>1、保证可见性 （JMM）</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="comment">// private  static int num = 0;—&gt;导致主线程修改后A 线程并没有感知到num的变化 从而不会退出循环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 加了volition 关键字 保证了对象的可见性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (num==<span class="number">0</span>)&#123; <span class="comment">// 没有加 volatile 的时候，这个对象不可见</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,(<span class="string">&quot;A&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num = <span class="number">1</span>; <span class="comment">// 虽然main线程修改了这个值，但是上面的线程并不知道！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;修改后 &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>2、不保证原子性 （核心难点：原子类）</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//不加synchronized 时不能保证其原子性</span></span><br><span class="line"><span class="comment">//    public  static void add()&#123;</span></span><br><span class="line"><span class="comment">//        num++;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 期望 num 最终是 2 万</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断活着的线程</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123; <span class="comment">// mian  gc</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>jmm底层逻辑<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/03/11/8AutDs.png"
                     
                ></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>—-那么，请你说说，如果不用 synchronized 和 lock ，如何解决这个问题？<br>这个时候人家问的是AtomicInteger</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo3</span> &#123;</span><br><span class="line">    <span class="comment">// int 不是原子性的</span></span><br><span class="line">    <span class="comment">// AtomicInteger底层用的是 volatile 关键字 AtomicInteger</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="comment">// synchronized</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//num++; // 不是一个原子性操作</span></span><br><span class="line">        num.getAndIncrement(); <span class="comment">// num++</span></span><br><span class="line">        <span class="comment">// Unsafe 类：</span></span><br><span class="line">        <span class="comment">// Java不能直接操作内存！  native  c++=&gt; 操作内存</span></span><br><span class="line">        <span class="comment">// Unsafe 后门，可以通过它直接操作内存！</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 期望 num 最终是 2 万</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断活着的线程</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123; <span class="comment">// mian  gc</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>AtomicInteger 底层实现用了volatile 关键字和Unsafe类之间操作内存<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/03/11/8AMilD.png"
                     
                ></p>
<p>—-AtomicInteger 扩展到cas(比较并交换)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">casDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// AtomicInteger 默认为 0</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compareAndSet   CAS 比较并交换</span></span><br><span class="line">        <span class="comment">// public final boolean compareAndSet(int expect, int update)</span></span><br><span class="line">        <span class="comment">// 如果这个值是期望的值，那么则更新为指定的值</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">        <span class="comment">// 如果这个值是期望的值，那么则更新为指定的值</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">20</span>, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>getAndIncrement</code> 实现了 int ++的操作！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">getAndIncrement() ;</span><br><span class="line"><span class="comment">// unsafe可以直接操作内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// this 调用的对象</span></span><br><span class="line">    <span class="comment">// valueOffset 当前这个对象的值的内存地址偏移值</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="comment">// 自旋锁（就是一直判断！）</span></span><br><span class="line">        <span class="comment">// var5 = 获得当前对象的内存地址中的值！</span></span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(<span class="built_in">this</span>, valueOffset);</span><br><span class="line">        <span class="comment">// compareAndSwapInt 比较并交换</span></span><br><span class="line">        <span class="comment">// 比较当前的值 var1 对象的var2地址中的值是不是 var5，如果是则更新为 var5 + 1</span></span><br><span class="line">        <span class="comment">// 如果是期望的值，就交换，否则就不交换！</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>CAS缺点：</strong></p>
<p>1、循环开销很大！</p>
<p>2、内存操作，每次只能保证一个共享变量的原子性！</p>
<p>3、出现ABA 问题？</p>
<blockquote>
<p>3.禁止指令重排 （核心难点：说出单例模式。说出CAS。说出CPU原语）</p>
</blockquote>
<ul>
<li>单例模式：懒汉式 饿汉式（设计模式中）</li>
<li>CAS：比较并交换</li>
<li>CPU原语：原语，一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。<br>原语是操作系统核心（不是由进程，而是由一组程序模块组成）的一个组成部分，并且常驻内存，通常在管态下执行。原语一旦开始执行，就要连续执行完，不允许中断</li>
</ul>
<p>指令重排：就是你的写程序不一定是按照你的程序跑的？</p>
<p>源代码-&gt;编译器（优化重排）-&gt;指令并行重排-&gt; 内存系统的重排-&gt; 最终执行的！</p>
<p><em><strong>单线程一定安全！（但是，也不能避免指令重排！）</strong></em></p>
<p>处理器在进行重排的时候会&#x3D;&#x3D;考虑指令之间的依赖性！&#x3D;&#x3D;</p>
<p>理解多线程下的指令重排问题：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x,y,a,b = 0;</span><br><span class="line">线程1                       线程2</span><br><span class="line">x = a;                     y = b;</span><br><span class="line">b = 1;                     a = 2;</span><br><span class="line">理想的结果： x=0  y = 0</span><br><span class="line"></span><br><span class="line">指令重排：</span><br><span class="line">线程1                       线程2</span><br><span class="line">b = 1;                     a = 2;</span><br><span class="line">x = a;                     y = b;</span><br><span class="line"></span><br><span class="line">重排后的结果： x=2  y = 1</span><br></pre></td></tr></table></figure></div>
<p>votatile 可以禁止指令重排！</p>
<p>内存屏障（Memory  Barrier）：CPU的指令；两个作用：</p>
<p>1、保证特定的执行顺序！</p>
<p>2、保证某些变量的内存可见性 （votatile就是用它这个特性来实现的）</p>
<p>如图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/03/11/8ANdaD.png"
                     
                ><br><strong>请你谈谈指令重排的最经典的应用！DCL单例模式</strong></p>
<p>推荐一篇分析DCL单例模式的<a class="link"   href="https://www.iteye.com/blog/wjy320-2052991"  target="_blank">博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><blockquote>
<p>原子类来解决（通过原子引用）</p>
</blockquote>
<p>通过增加一个版本号来解决，和乐观锁一模一样！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经典aba 问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abaDemo</span> &#123;</span><br><span class="line">    <span class="comment">// version = 1</span></span><br><span class="line">    <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 其他人员 小花，需要每次执行完毕 + 1</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicReference.getStamp();<span class="comment">// 获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;T1 stamp01=&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>,</span><br><span class="line">                    atomicReference.getStamp(),atomicReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;T1 stamp02=&gt;&quot;</span>+atomicReference.getStamp());</span><br><span class="line"></span><br><span class="line">            atomicReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>,</span><br><span class="line">                    atomicReference.getStamp(),atomicReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;T1 stamp03=&gt;&quot;</span>+atomicReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 乐观的小明</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicReference.getStamp();<span class="comment">// 获得版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;T2 stamp01=&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> atomicReference.compareAndSet(<span class="number">100</span>, <span class="number">1</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;T2 是否修改成功：&quot;</span>+ result);</span><br><span class="line">            System.out.println(<span class="string">&quot;T2 stamp02=&gt;&quot;</span>+atomicReference.getStamp());</span><br><span class="line">            System.out.println(<span class="string">&quot;T2 当前获取得最新的值=&gt;&quot;</span>+atomicReference.getReference());</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="探究锁"><a href="#探究锁" class="headerlink" title="探究锁"></a>探究锁</h3><p>1.自旋锁<br>上面列举了unsafe 类的源码 getAndAddInt<br>自己写一个自旋锁：<br>Lock类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    <span class="comment">// 锁线程</span></span><br><span class="line">    <span class="comment">// AtomicInteger 默认 是 0</span></span><br><span class="line">    <span class="comment">// AtomicReference 默认是 null</span></span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(thread.getName()+<span class="string">&quot;===&gt; lock&quot;</span>);</span><br><span class="line">        <span class="comment">// 上锁  自旋</span></span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(thread.getName() + <span class="string">&quot;===&gt; unlock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*T1===&gt; lock</span></span><br><span class="line"><span class="comment">*T2===&gt; lock</span></span><br><span class="line"><span class="comment">*T1===&gt; unlock</span></span><br><span class="line"><span class="comment">*T2===&gt; unlock</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 一定先拿到锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2.死锁，死锁的排查<br>什么是死锁？<br>死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2020/03/11/8ArQ3D.png"
                     
                ></p>
<p>示例代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLockThread</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> String lockB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLockThread</span><span class="params">(String lockA, String lockB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lockA = lockA;</span><br><span class="line">        <span class="built_in">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;lock:&quot;</span>+lockA+<span class="string">&quot;=&gt;get:&quot;</span>+lockB);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;lock:&quot;</span>+lockB+<span class="string">&quot;=&gt;get:&quot;</span>+lockA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmm;</span><br><span class="line"><span class="comment">// 面对死锁你该怎么办？</span></span><br><span class="line"><span class="comment">// 日志</span></span><br><span class="line"><span class="comment">// 查看堆栈信息！ jmm 的知识</span></span><br><span class="line"><span class="comment">// 1、获取当前运行的java进程号   jps -l</span></span><br><span class="line"><span class="comment">// 2、查看信息                 jstack 进程号</span></span><br><span class="line"><span class="comment">// 3、jconsole 查看对应的信息！(可视化工具！)</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="string">&quot;lockA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="string">&quot;lockB&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyLockThread</span>(lockA,lockB),<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyLockThread</span>(lockB,lockA),<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>小结：jmm是jvm的一种规范，定义了jvm的内存模型。<br>它屏蔽了各种硬件和操作系统的访问差异，不像c那样直接访问硬件内存，相对安全很多。<br>它的主要目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、<br>编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。可以保证并发编程场景中的原子性、可见性和有序性。</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jmm</tag>
      </tags>
  </entry>
  <entry>
    <title>统一返回处理&amp;统一异常封装</title>
    <url>/2021/0423/common-response-exception.html</url>
    <content><![CDATA[<blockquote>
<p>你们项目中是这么统一返回前台的数据的呢？自定义的异常信息又是怎么封装的呢？<br>因为所在公司封装好像不是那么好，我还是觉得自己得花点时间写出一个示例出来；权当是练手而已！</p>
</blockquote>
<h3 id="自定义异常枚举类"><a href="#自定义异常枚举类" class="headerlink" title="自定义异常枚举类"></a>自定义异常枚举类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.common.constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line">    SUCCESS(<span class="literal">true</span>, <span class="number">0000</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    UNKNOWN_REASON(<span class="literal">false</span>, <span class="number">0001</span>, <span class="string">&quot;未知错误&quot;</span>),</span><br><span class="line">    BAD_SQL_GRAMMAR(<span class="literal">false</span>, <span class="number">0002</span>, <span class="string">&quot;sql语法错误&quot;</span>),</span><br><span class="line">    JSON_PARSE_ERROR(<span class="literal">false</span>, <span class="number">0003</span>, <span class="string">&quot;json解析异常&quot;</span>),</span><br><span class="line">    PARAM_ERROR(<span class="literal">false</span>, <span class="number">0004</span>, <span class="string">&quot;参数不正确&quot;</span>),</span><br><span class="line">    FILE_UPLOAD_ERROR(<span class="literal">false</span>, <span class="number">0005</span>, <span class="string">&quot;文件上传错误&quot;</span>),</span><br><span class="line">    EXCEL_DATA_IMPORT_ERROR(<span class="literal">false</span>, <span class="number">0006</span>, <span class="string">&quot;Excel数据导入错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success; <span class="comment">// 是否响应成功</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;    <span class="comment">// 响应的状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message;  <span class="comment">// 响应的消息</span></span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(Boolean success, Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="自定义全局异常类"><a href="#自定义全局异常类" class="headerlink" title="自定义全局异常类"></a>自定义全局异常类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.common.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.constant.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;全局异常&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;状态码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收自定传递的状态码和消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GlobalException</span><span class="params">(Integer code, String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收枚举类型参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GlobalException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = resultCodeEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CodingException&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;message=&quot;</span> + <span class="built_in">this</span>.getMessage() +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="自定义返回结果"><a href="#自定义返回结果" class="headerlink" title="自定义返回结果"></a>自定义返回结果</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.common.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.constant.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;全局的统一返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回状态码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回的数据！&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok 返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.SUCCESS.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.SUCCESS.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error 返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.UNKNOWN_REASON.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.UNKNOWN_REASON.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.UNKNOWN_REASON.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setResult 自定义返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">definedResult</span><span class="params">(ResultCodeEnum resultCodeEnum)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        r.setSuccess(resultCodeEnum.getSuccess());</span><br><span class="line">        r.setCode(resultCodeEnum.getCode());</span><br><span class="line">        r.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些是为了我们方便链式编程</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">success</span><span class="params">(Boolean success)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">message</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">code</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">data</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data.put(key,value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">data</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="全局异常处理类"><a href="#全局异常处理类" class="headerlink" title="全局异常处理类"></a>全局异常处理类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.common.handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.constant.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.util.ExceptionUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.BadSqlGrammarException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理的所有的 Exception</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理自己写的统一异常 CodingException</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(GlobalException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(GlobalException e)</span>&#123;</span><br><span class="line">        log.error(ExceptionUtil.getStackMessage(e));</span><br><span class="line">        <span class="keyword">return</span> Result.error().message(e.getMessage()).code(e.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先匹配精确的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BadSqlGrammarException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(BadSqlGrammarException e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.definedResult(ResultCodeEnum.BAD_SQL_GRAMMAR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="异常工具类"><a href="#异常工具类" class="headerlink" title="异常工具类"></a>异常工具类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印异常的堆栈信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印异常堆栈信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStackMessage</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="comment">// 流</span></span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将出错的信息输出到 PrintWriter！</span></span><br><span class="line">            sw = <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw);</span><br><span class="line">            e.printStackTrace(pw);</span><br><span class="line">            pw.flush();</span><br><span class="line">            sw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sw!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pw!=<span class="literal">null</span>)&#123;</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.constant.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.handler.GlobalException;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.handler.GlobalExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.common.util.ExceptionUtil;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.demo.study.service.USERervice;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-05-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">USERervice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">testOkReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 逻辑获取返回数据</span></span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; returnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            r = Result.ok().data(<span class="string">&quot;list&quot;</span>,returnList);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(GlobalException e)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">GlobalExceptionHandler</span>().error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">definedErrorReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 逻辑获取返回数据</span></span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; returnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(returnList.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                r = Result.definedResult(ResultCodeEnum.BAD_SQL_GRAMMAR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(GlobalException e)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">GlobalExceptionHandler</span>().error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>好了，至此所有的异常处理和返回封装都已处理完毕；你的项目是不是要这样改呢？</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈对 IOC 和 AOP的认知</title>
    <url>/2021/0423/ioc-aop-talk.html</url>
    <content><![CDATA[<blockquote>
<p>Spring学了这么久，IOC 和 AOP你真的认识到位了吗？</p>
</blockquote>
<p>IOC作为<code>spring</code>的核心中的核心，这东西基本是面试必问的；而AOP作为继面向对象编程又一编程思想，则是每个java程序员必须要掌握的；</p>
<h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC,全称又叫<code>Inversion of Control</code>即控制反转；2004年，Martin Fowler探讨了一个问题，既然IoC是控制反转，那么到底是“哪些方面的控制被反转了呢？”，经过详细地分析和论证后，他得出了答案：“获得依赖对象的过程被反转了”。控制被反转之后，获得依赖对象的过程由自身管理对象变为由IoC容器主动注入。于是，他给“控制反转”取了一个更合适的名字叫做“依赖注入（Dependency Injection，DI）”；</p>
<p>好，以上是官方的描述和理解；之前笔者也看到一个比较有意思的解释：所谓控制反转，打个比方你要去炸敌人的碉堡，以前是你自己背着炸药包跑到敌人碉堡下面，点燃炸药；现在是你不用自己背着炸药到处跑了，你自己跑到敌人碉堡下，呼叫spring的ioc容器把炸药（对象及其依赖）扔向你；虽然这个比喻有些不恰当，但是也形象的说明了IOC容器的作用，将自己构建对象（携带炸药）的这一行为交给IOC容器（远程火力支援）来统一管理，以解决对象创建后，A类和B类间的耦合问题！</p>
<p>我们怎么来理解控制和反转呢？首先，我们需要知道它控制了什么？又在什么地方反转了？</p>
<ul>
<li><p>控制：其实IOC控制了创建对象的执行流程，Spring之前对象的创建大都是应用程序new一个出来的，Spring之后IOC控制了对象的创建流程；</p>
</li>
<li><p>反转：反转的是对象依赖过程；Spring之前是自己new出来对象后添加对应的依赖，Spring之后是IOC容器查找和注入依赖，它反转了获取对象依赖的过程；即你不要来找我，我来找你；当IOC注入对象的时候，对应的依赖也一并注入了进来；</p>
</li>
</ul>
<p>了解了这些后，你还需要了解IOC的底层实现原理：</p>
<ul>
<li>使用dom4j解析XML配置文件</li>
<li>使用工厂模式初始化各种Bean工厂</li>
<li>通过反射创建各种Bean</li>
</ul>
<p>那么知道了这些后，你还有必要了解下：</p>
<ul>
<li><p><em>Bean的初始化过程？</em></p>
</li>
<li><p><em>以及IOC是如何解决循环依赖的？</em></p>
</li>
<li><p><em>为啥要用上三级缓存？</em></p>
</li>
<li><p><em>IOC容器实际指的哪个集合类，为什么？(其实是CurrentHashMap，面试到IOC一般必问的！)</em></p>
</li>
</ul>
<p>这里就不在深入了，推荐去大佬的博客下学习：<a class="link"   href="https://blog.nowcoder.net/chaser/13512"  target="_blank">chaser的博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，相信你能学到很多；</p>
<p>好，知道了这些后我们再来认识下AOP；</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>Aop,全称“Aspect Oriented Programming”意为面向切面编程；我们来看下<strong>官网的描述</strong>：<a class="link"   href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop"  target="_blank">Spring Aop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>“Aspect-oriented Programming (AOP) complements Object-oriented Programming (OOP) by providing another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Aspects enable the modularization of concerns (such as transaction management) that cut across multiple types and objects. (Such concerns are often termed “crosscutting” concerns in AOP literature.)</p>
<p>One of the key components of Spring is the AOP framework. While the Spring IoC container does not depend on AOP (meaning you do not need to use AOP if you don’t want to), AOP complements Spring IoC to provide a very capable middleware solution.”</p>
<p>面向方面编程（AOP）是面向对象编程（OOP）的补充，它提供了另一种关于程序结构的思考方式。OOP中模块化的关键单元是类，而在AOP中，模块化单元是切面。切面支持跨多个类型和对象的关注点（如事务管理）的模块化。（在AOP文献中，此类关注点通常被称为“横切”关注点。）</p>
<p>Spring的关键组件之一是AOP框架。虽然springioc容器不依赖于AOP（这意味着如果您不想使用AOP，就不需要使用AOP），AOP补充了springioc，以提供一个功能非常强大的中间件解决方案。</p>
</blockquote>
<p>是的，通过官方文档的阅读，我们知道了AOP框架是IOC的一种增强，是一个强大的中间件。（学习Spring的过程中，你将会发现各种给中间件可以和Spring结合使用；这也就印证了一句话：在spring中没有啥是加一层解决不了的，这也侧面说明了Spring这个框架的强大之处，高扩展性和低耦合）；</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>开始深入理解AOP之前，我们看下AOP中各种术语概念:</p>
<p><strong>连接点（JoinPoint）</strong>：增强执行的位置（增加代码的位置），Spring只支持方法作为连接点；</p>
<p><strong>切点（PointCut）</strong>：具体的连接点，一般可能通过一个表达式来描述；</p>
<p><strong>增强（Advice）</strong>：也称为消息，指的是增加的额外的代码，Spring中，增强除了包含代码外，还包含位置信息；</p>
<p><strong>四种增强</strong>：MethodBeforeAdvice（前置增强）、MethodInterceptor（环绕增强）、ThrowsAdvice（异常增强，也叫消息增强）、AfterReturingAdvice（返回值增强）</p>
<p><strong>引介（Introduction）</strong>：特殊的增强，动态为类增加方法</p>
<p><strong>织入（Weaving）</strong>：将增强加入到目标类的过程</p>
<p><strong>织入分为三种时期</strong>：编译期（AspectJ）、类加载期、运行期(jdk动态代理，实现InvocationHandler接口;CGLIB）</p>
<p>AOP实现的关键，在于AOP框架自动创建的AOP代理，AOP代理主要分为 <strong>静态代理</strong> 和 <strong>动态代理</strong>。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表；</p>
<blockquote>
<p>AspectJ静态代理和 Spring AOP动态代理</p>
</blockquote>
<ul>
<li><p>AspectJ：关于AspectJ的底层实现，是AspectJ内置了特殊的编译器，在代码编译期间可以在不改变代码的前提下改变写入代码（在方法执行前和方法执行后加入自己的代码）；关于AspectJ的具体实现可以参考博客：<a class="link"   href="https://www.jianshu.com/p/f9acae180f81"  target="_blank">AspectJ入门 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>Spring AOP：spring aop实现动态代理主要是两种方式。一种是JDK动态代理，一种是CGLIB动态代理；我们知道使用代理模式，有个很重要的类是Proxy；那么在Spring中，还有一个很重要的接口<code>InvocationHandler</code>,实现了InvocationHandler接口的类通过JDK反射来实现动态代理（重写invoke方法），而没有实现此接口的类，则都默认使用CGLIB来实现动态代理（这一点可以扒源码了解）；</p>
</li>
</ul>
<p>实际上动态代理的本质上是:在调用代理类的方法时，动态对代理类的方法进行拦截，以此达到对方法的改造和增强！</p>
<p>了解了基本概念和本质后，我们来模仿CGLIB的实现，写个小例子测试一下：</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>新增Shopping类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;shopping&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shopping</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;到超市挑东西&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;去收银台付钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>新增切点类CutPointer：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CutPointer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.isky.visual.Shopping.shop())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择目的地超市&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;选择交通工具前往&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.isky.visual.Shopping.shop())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择交通工具回家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试类中新增测试接口：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Shopping shopping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCglib</span><span class="params">()</span>&#123;</span><br><span class="line">    shopping.shop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后查看运行结果如下，说明我们成功在shop方法前后，加入了我们自己的执行代码；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/21/UoAKDP.png"
                      alt="UoAKDP.png"
                ></p>
<p>最后关于AOP在Spring中典型的应用有：日志，性能监控，权限控制，缓存优化，事务管理</p>
<h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><p>好了，aop的东西真的太多了，就上面的应用场景每个都能怼到你怀疑人生，这里就不再发散了，让我们站在牛牛的肩膀上学习吧；关于Spring AOP的更多理解请参考博客：</p>
<ul>
<li><a class="link"   href="https://www.cnblogs.com/tian874540961/p/10812124.html"  target="_blank">Java Aop的底层实现原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://juejin.im/post/5b06bf2df265da0de2574ee1"  target="_blank">Spring AOP就是这么简单啦 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/143434806"  target="_blank">厉害了！老大利用AOP实现自定义注解，半小时完成我三天工作量 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<blockquote>
<p>小结：作为Spring的两个核心，东西确实有很多；这里只是梳理出了一个大概的认知流程，具体更深层次的认知还得去扒源码，去理解去看。哈哈，你的头发还好吗？</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ioc,aop</tag>
      </tags>
  </entry>
  <entry>
    <title>java8 新特性之optional</title>
    <url>/2021/0423/java8-optional.html</url>
    <content><![CDATA[<blockquote>
<p>拒绝非空判断，我们一起来折腾下<code>java8</code>的新特性<code>optional</code>类 吧；</p>
</blockquote>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Java 8类库 引入了一个同名的Optional类。实际上是个Optional容器类：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测，使你从繁琐的非空判断中解脱出来，写出更加优雅的代码！</p>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>废话不多说，看源码一个个方法捋一遍！</p>
<ol>
<li>私有方法和构造器</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 私有静态常量，一个空的Optional对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Optional对象&lt;?&gt; EMPTY = <span class="keyword">new</span> <span class="title class_">Optional</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 私有泛型value 成员变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line"><span class="comment">// 私有无参构造</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Optional</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有有参构造</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Optional</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = Objects.requireNonNull(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从上面可以看出我们不能通过构造器创建一个Optional 对象，那么我们就来结合代码例子看看可以通过哪些方法创建Optional对象。</p>
<ol start="2">
<li>其他方法</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个包装对象值为空的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; optional1 = Optional.empty();</span><br><span class="line"><span class="comment">// 创建包装对象值非空的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; optional2 = Optional.of(<span class="string">&quot;hello,optional&quot;</span>);</span><br><span class="line"><span class="comment">// 创建包装对象值允许为空的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; optional3 = Optional.ofNullable(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>get</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(optional2.get());</span><br><span class="line"><span class="comment">// 输出hello，optional</span></span><br><span class="line"><span class="comment">// 可以看到get方法获取optional对象的实际值。但是optional对象值为null，会抛出NoSuchElementException异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get源码如下：</span></span><br><span class="line"><span class="comment">// public T get() &#123;</span></span><br><span class="line"><span class="comment">//     if (value == null) &#123;</span></span><br><span class="line"><span class="comment">//         throw new NoSuchElementException(&quot;No value present&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return value;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>isPresent</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(optional2.isPresent());</span><br><span class="line"><span class="comment">//输出true</span></span><br><span class="line"><span class="comment">//isPresent()方法用于判断包装对象的值是否非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public boolean isPresent() &#123;</span></span><br><span class="line"><span class="comment">//     return value != null;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>ifPresent</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">Optional.ofNullable(userInfo).ifPresent(u -&gt;  System.out.println(<span class="string">&quot;The user name is : &quot;</span> + u.getName()));</span><br><span class="line"><span class="comment">// 输出The user name is 小明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public void ifPresent(Consumer&lt;? super T&gt; consumer) &#123;</span></span><br><span class="line"><span class="comment">//     if (value != null)</span></span><br><span class="line"><span class="comment">//     consumer.accept(value);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 从源码可以看出ifPresent 方法接受一个Consumer 函数，内部做了null值检查，调用前无需担心NPE问题</span></span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li>filter</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Optional.ofNullable(userInfo).filter(u -&gt;u.getId() &gt; <span class="number">1</span>).isPresent());</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) &#123;</span></span><br><span class="line"><span class="comment">//     Objects.requireNonNull(predicate);</span></span><br><span class="line"><span class="comment">//     if (!isPresent())</span></span><br><span class="line"><span class="comment">//         return this;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//         return predicate.test(value) ? this : empty();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以看到filter 方法接受一个断言型函数，过滤出我们想要的数据 当为空是返回一个 空对象</span></span><br></pre></td></tr></table></figure></div>

<ol start="7">
<li>map</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Optional.ofNullable(userInfo).map(u -&gt; Optional.u.getName()).get());</span><br><span class="line"><span class="comment">// 输出 小明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123;</span></span><br><span class="line"><span class="comment">//     Objects.requireNonNull(mapper);</span></span><br><span class="line"><span class="comment">//     if (!isPresent())</span></span><br><span class="line"><span class="comment">//         return empty();</span></span><br><span class="line"><span class="comment">//     else &#123;</span></span><br><span class="line"><span class="comment">//         return Optional.ofNullable(mapper.apply(value));</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以看到map 方法接受一个函数式接口对象 首先会判断非空 然后返回一个Optional 对象</span></span><br></pre></td></tr></table></figure></div>

<ol start="8">
<li>flatMap</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; integer = Optional.ofNullable(userInfo).flatMap(u -&gt; Optional.ofNullable(u.getId()));</span><br><span class="line">System.out.println(integer.get());</span><br><span class="line"><span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) &#123;</span></span><br><span class="line"><span class="comment">//     Objects.requireNonNull(mapper);</span></span><br><span class="line"><span class="comment">//     if (!isPresent())</span></span><br><span class="line"><span class="comment">//         return empty();</span></span><br><span class="line"><span class="comment">//     else &#123;</span></span><br><span class="line"><span class="comment">//         return Objects.requireNonNull(mapper.apply(value));</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以看到flatMap 接受一个函数式接口的参数，但和 map 方法，函数式接口类实例有两个类型一个是泛型T ，一个是Optional&lt;U&gt; 对象</span></span><br><span class="line"><span class="comment">// 而map 方法是一个U类型对象 但是可以看到都作了requireNonNull 判断</span></span><br></pre></td></tr></table></figure></div>

<ol start="9">
<li>orElse()</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">userInfo = <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">uName</span> <span class="operator">=</span> Optional.ofNullable(userInfo).map(u -&gt; u.getName()).orElse(<span class="string">&quot;Unknown name&quot;</span>);</span><br><span class="line">System.out.println(uName);</span><br><span class="line"><span class="comment">// 输出 Unknown name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public T orElse(T other) &#123;</span></span><br><span class="line"><span class="comment">//     return value != null ? value : other;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以看到 orElse 方法中实际就是一个三目运算 ,不为null就是当前值, 为null就是输入的值</span></span><br></pre></td></tr></table></figure></div>

<ol start="10">
<li>orElseGet</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">userInfo = <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">uName</span> <span class="operator">=</span> Optional.ofNullable(userInfo).map(u -&gt; u.getName()).orElseGet(() -&gt; <span class="string">&quot;unknown name&quot;</span>);</span><br><span class="line">System.out.println(uName);</span><br><span class="line"><span class="comment">// 输出 unknown name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// orElse</span></span><br><span class="line"><span class="comment">//public T orElseGet(Supplier&lt;? extends T&gt; other) &#123;</span></span><br><span class="line"><span class="comment">//	 return value != null ? value : other.get();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 可以看到 orElseGet 和 orElse接受的参不同，一个是泛型，一个提供者接口函数对象</span></span><br><span class="line"><span class="comment">// 我们可以在对应的函数中写自己的逻辑，返回get到的实际值</span></span><br></pre></td></tr></table></figure></div>

<ol start="11">
<li>orElseThrow</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserInfo</span> <span class="variable">userInfo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="number">2</span>,<span class="string">&quot;小花&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">exception1</span> <span class="operator">=</span> Optional.ofNullable(userInfo1).map(u -&gt;</span><br><span class="line">       u.getName()).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;没有获取到名字&quot;</span>));</span><br><span class="line">System.out.println(exception1);</span><br><span class="line"><span class="comment">// 输出 小花</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">exception2</span> <span class="operator">=</span> Optional.ofNullable(userInfo1).map(u -&gt;</span><br><span class="line">       u.getPassword()).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;没有获取到密码&quot;</span>));</span><br><span class="line">System.out.println(exception2);</span><br><span class="line"><span class="comment">// 这个报了个我们自定义的异常“Exception in thread &quot;main&quot; java.lang.Exception: 没有获取到密码”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) //throws X &#123;</span></span><br><span class="line"><span class="comment">//    if (value != null) &#123;</span></span><br><span class="line"><span class="comment">//        return value;</span></span><br><span class="line"><span class="comment">//    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//        throw exceptionSupplier.get();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 可以看到 orElseThrow 在有值得是后返回我们逻辑处理的值  没有值得时候抛出了我们自定义的异常</span></span><br></pre></td></tr></table></figure></div>

<ol start="12">
<li><p>equals，hacode，toString 最后这三个都重写了Object的方法，其实没什么好说的，提一下：</p>
<p>equals使用Objects.equals(value, other.value) ，那意味着我们写equals判断时也应该这么写！</p>
<p>hashCode使用Objects.hashCode(value)</p>
<p>toString使用了三目运算和String.format(“Optional[%s]”, value) 占位符，意味着我们有些打印日志可以这么写。这就是面向源码学习，多借鉴借鉴还是很不错滴！</p>
</li>
</ol>
<blockquote>
<p>小结：至此，我们已经从头到尾看了遍optional底层的实现了！ 然后平时过滤啥的知道用filter，改变值用map，判空用isPresent, if else 判断啥的用orElse 或者 orElseGet了吧，那就动手实践起来，话说最近在看一本书《重构改善既有代码的设计》,很不错推荐一哈！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>optional</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatisli逆向工程</title>
    <url>/2024/0307/mybatis-lixiang.html</url>
    <content><![CDATA[<blockquote>
<p>新做项目，怎么能少得了crud;之前有写过mybatis-plus的逆向工程，那么如果你正在搞新项目，并且你的项目还是用的mybatis，那么有必要折腾下mybatis的逆向工程；废话不多说开干！</p>
</blockquote>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="添加generatorConfig-xml配置文件"><a href="#添加generatorConfig-xml配置文件" class="headerlink" title="添加generatorConfig.xml配置文件"></a>添加generatorConfig.xml配置文件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MySqlTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;com.local.demo.util.MybatisGeneratorPlugin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否去除自动生成的注释 true:是; false:否--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接信息：驱动类、链接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/local_demo?characterEncoding=utf-8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以下配置解决mysql 8.0版本以上时,mybatis在逆向生成时xml会生成重复的标签内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--类型解析器--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认false，把jdbc decimal 和 numeric 类型解析为integer --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- true，把jdbc decimal 和 numeric 类型解析为java.math.bigdecimal--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成实体类及Example类的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.local.demo.entity&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否让schema作为包后缀--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件xml的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否让schema作为包后缀--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成Dao接口的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.local.demo.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 用于自动生成代码的数据库表；生成哪些表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;bug_t&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>上面的配置除了包路径外，劝你别动；因为我已经踩过坑了，你拿去用就好；如果要自行研究，请随意</p>
<h3 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h3><p>最上面我们引入了自定义的插件，对应的代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis生成器插件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/03/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisGeneratorPlugin</span> <span class="keyword">extends</span> <span class="title class_">PluginAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前git用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CURRENT_GIT_USER_NAME</span> <span class="operator">=</span> <span class="string">&quot;Your name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * main 方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        args = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;-configfile&quot;</span>, System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/src/main/resources/mybatis-generator.xml&quot;</span>, <span class="string">&quot;-overwrite&quot;</span> &#125;;</span><br><span class="line">        ShellRunner.main(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>();</span><br><span class="line">        processBuilder.command(<span class="string">&quot;git&quot;</span>, <span class="string">&quot;config&quot;</span>, <span class="string">&quot;--global&quot;</span>, <span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> processBuilder.start();</span><br><span class="line">            <span class="comment">// 读取标准输出流</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">            CURRENT_GIT_USER_NAME = reader.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;MybatisGeneratorPlugin 获取当前git用户名异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体类生成时添加注释</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelBaseRecordClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加import</span></span><br><span class="line">        topLevelClass.addImportedType(<span class="string">&quot;lombok.Data&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加注解</span></span><br><span class="line">        topLevelClass.addAnnotation(<span class="string">&quot;@Data&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtility.stringHasValue(introspectedTable.getRemarks())) &#123;</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; * &quot;</span> + introspectedTable.getRemarks());</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; *&quot;</span>);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; * @author &quot;</span> + CURRENT_GIT_USER_NAME);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; * @date &quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; */&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; * TODO 请添加类注释&quot;</span>);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; *&quot;</span>);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; * @author &quot;</span> + CURRENT_GIT_USER_NAME);</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; * @date &quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            topLevelClass.addJavaDocLine(<span class="string">&quot; */&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段生成时添加注释</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedColumn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelClassType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelFieldGenerated</span><span class="params">(Field field, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtility.stringHasValue(introspectedColumn.getRemarks())) &#123;</span><br><span class="line">            field.addJavaDocLine(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">            field.addJavaDocLine(<span class="string">&quot; * &quot;</span> + introspectedColumn.getRemarks());</span><br><span class="line">            field.addJavaDocLine(<span class="string">&quot; */&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper生成时添加注释</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> var1 var1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> var2 var2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientGenerated</span><span class="params">(Interface var1, IntrospectedTable var2)</span>&#123;</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot;import org.apache.ibatis.annotations.Mapper;&quot;</span>);</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot; * TODO 请添加类注释&quot;</span>);</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot; *&quot;</span>);</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot; * @author &quot;</span>+CURRENT_GIT_USER_NAME);</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot; * @date &quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        var1.addJavaDocLine(<span class="string">&quot; */&quot;</span>);</span><br><span class="line"></span><br><span class="line">        var1.addAnnotation(<span class="string">&quot;@Mapper&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去掉生成getter方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedColumn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelClassType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelGetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去掉生成setter方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topLevelClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedColumn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> introspectedTable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelClassType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">modelSetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**=====以下方法是去掉mapper及xml中不必要的DML操作方法，使得生成的代码保持干净=====*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientInsertSelectiveMethodGenerated</span><span class="params">(Method var1, Interface var2, IntrospectedTable var3)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientInsertSelectiveMethodGenerated</span><span class="params">(KotlinFunction kotlinFunction, KotlinFile kotlinFile, IntrospectedTable introspectedTable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientUpdateByExampleSelectiveMethodGenerated</span><span class="params">(Method var1, Interface var2, IntrospectedTable var3)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientUpdateAllColumnsMethodGenerated</span><span class="params">(Method var1, Interface var2, IntrospectedTable var3)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sqlMapInsertSelectiveElementGenerated</span><span class="params">(XmlElement var1, IntrospectedTable var2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sqlMapUpdateByExampleSelectiveElementGenerated</span><span class="params">(XmlElement var1, IntrospectedTable var2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientDeleteByPrimaryKeyMethodGenerated</span><span class="params">(Method var1, Interface var2, IntrospectedTable var3)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">clientDeleteByPrimaryKeyMethodGenerated</span><span class="params">(KotlinFunction kotlinFunction, KotlinFile kotlinFile, IntrospectedTable introspectedTable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sqlMapDeleteByPrimaryKeyElementGenerated</span><span class="params">(XmlElement var1, IntrospectedTable var2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="生成的效果图"><a href="#生成的效果图" class="headerlink" title="生成的效果图"></a>生成的效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/java/24/3/8/vo.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/java/24/3/8/mapper.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/java/24/3/8/xml.png"
                     
                ></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>手撸一个造数脚本工具类</title>
    <url>/2024/0618/py-shell-for-generate-db-data.html</url>
    <content><![CDATA[<blockquote>
<p>上篇博客讲到新建项目后我们需要根据表生成基础的代码，那基础代码写好后，我们要造点数据到表里怎么弄呢？有没有办法，我能生成对应的造数脚本呢？答案是有的，我们借助python强大的faker库即可生成；那总不能每次都要手写新的脚本吧，那必须不能啊；我们java写个生成py脚本的工具类即可，开搞!</p>
</blockquote>
<h3 id="定义一个注解"><a href="#定义一个注解" class="headerlink" title="定义一个注解"></a>定义一个注解</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.local.demo.enums.FakerTypeEnum;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Faker &#123;</span><br><span class="line"></span><br><span class="line">     FakerTypeEnum <span class="title function_">fakerType</span><span class="params">()</span> <span class="keyword">default</span> FakerTypeEnum.IGNORE;</span><br><span class="line"></span><br><span class="line">     String <span class="title function_">customVal</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="实体属性加上注解"><a href="#实体属性加上注解" class="headerlink" title="实体属性加上注解"></a>实体属性加上注解</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.local.demo.aop.Faker;</span><br><span class="line"><span class="keyword">import</span> com.local.demo.enums.FakerTypeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/06/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(fakerType = FakerTypeEnum.IGNORE)</span></span><br><span class="line">    <span class="keyword">private</span> Long  id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(fakerType = FakerTypeEnum.NAME)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(fakerType = FakerTypeEnum.PWD)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(fakerType = FakerTypeEnum.ADDRESS)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(customVal = &quot;admin&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(fakerType = FakerTypeEnum.NOW_TIME)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(customVal = &quot;admin&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updatedBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Faker(fakerType = FakerTypeEnum.NOW_TIME)</span></span><br><span class="line">    <span class="keyword">private</span> Date updatedTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义对应的枚举"><a href="#定义对应的枚举" class="headerlink" title="定义对应的枚举"></a>定义对应的枚举</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FakerTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    IGNORE(<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;忽略此字段&quot;</span>),</span><br><span class="line">    NAME(<span class="number">2</span>,<span class="string">&quot;faker.name()&quot;</span>,<span class="string">&quot;随机姓名&quot;</span>),</span><br><span class="line">    ADDRESS(<span class="number">3</span>,<span class="string">&quot;faker.address()&quot;</span>,<span class="string">&quot;随机地址&quot;</span>),</span><br><span class="line">    NOW_TIME(<span class="number">4</span>,<span class="string">&quot;datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span>,<span class="string">&quot;当前时间&quot;</span>),</span><br><span class="line">    PWD(<span class="number">4</span>,<span class="string">&quot;faker.password()&quot;</span>,<span class="string">&quot;随机密码&quot;</span>),</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fakerVal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fakerValDesc;</span><br><span class="line"></span><br><span class="line">    FakerTypeEnum(<span class="type">int</span> code,String fakerVal,String fakerValDesc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.fakerVal = fakerVal;</span><br><span class="line">        <span class="built_in">this</span>.fakerValDesc = fakerValDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="对应的工具类"><a href="#对应的工具类" class="headerlink" title="对应的工具类"></a>对应的工具类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.local.demo.aop.Faker;</span><br><span class="line"><span class="keyword">import</span> com.local.demo.entity.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.local.demo.enums.FakerTypeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FakerPyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">DB</span> <span class="operator">=</span> <span class="string">&quot;local_demo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">3306</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PWD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// py地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">baseFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/echo/PycharmProjects/pythonProject/mockSqlPy/&quot;</span>;</span><br><span class="line">		<span class="comment">// 生成对应实体类集合</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classes = Arrays.asList(UserInfo.class);</span><br><span class="line">        generatePyAccordEntity(classes, <span class="literal">true</span>, <span class="number">10</span>, baseFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据实体生成PY脚本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazzList           clazz列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> needTruncateOldData 是否需要清空旧数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> generateNum         生成num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseFilePath        基本文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generatePyAccordEntity</span><span class="params">(List&lt;Class&lt;?&gt;&gt; clazzList, Boolean needTruncateOldData, <span class="type">int</span> generateNum, String baseFilePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(clazzList)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : clazzList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;===&gt;&gt; 开始生成&#123;&#125;实体类的造数脚本&quot;</span>, aClass);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> aClass.getName().substring(aClass.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> convertToUnderlineName(className);</span><br><span class="line">                log.info(<span class="string">&quot;实体类对应的表：&#123;&#125;&quot;</span>, tableName);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> baseFilePath + tableName + <span class="string">&quot;.py&quot;</span>;</span><br><span class="line">                log.info(<span class="string">&quot;输出位置：&#123;&#125;&quot;</span>, filePath);</span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;# This is a Python script\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;import faker \n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;import random \n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;import pymysql \n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;from datetime import datetime \n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                fileWriter.write(<span class="string">&quot;connection = pymysql.connect(host=&#x27;&quot;</span>+HOST+<span class="string">&quot;&#x27;, port=&quot;</span>+ PORT +<span class="string">&quot;, user=&#x27;&quot;</span>+USER +<span class="string">&quot;&#x27;, password=&#x27;&quot;</span>+PWD +<span class="string">&quot;&#x27;, db=&#x27;&quot;</span>+DB +<span class="string">&quot;&#x27;)\n\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;print (\&quot;数据库连接成功\&quot;)\n\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;faker = faker.Faker(\&quot;zh_CN\&quot;)\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                fileWriter.write(<span class="string">&quot;def generate_table_name():\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    table_name1 = faker.pystr(min_chars=2,max_chars=3)\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    table_name2 = faker.pystr(min_chars=2,max_chars=3)\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    words =[table_name1, table_name2]\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    return &#x27;_&#x27;. join(words).lower()\n\n\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;def generate_field_name():\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    field_name1 = faker.pystr(min_chars=3,max_chars=5)\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    field_name2 = faker.pystr(min_chars=3,max_chars=5)\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    words =[field_name1, field_name2]\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    return &#x27;_&#x27;. join(words).lower()\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                fileWriter.write(<span class="string">&quot;def create_data():\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    try :\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;        connection_cursor = connection.cursor()\n&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (needTruncateOldData) &#123;</span><br><span class="line">                    fileWriter.write(<span class="string">&quot;        connection_cursor.execute(\&quot;TRUNCATE TABLE &quot;</span> + tableName + <span class="string">&quot;\&quot;)\n&quot;</span>);</span><br><span class="line">                    fileWriter.write(<span class="string">&quot;        connection.commit()\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fileWriter.write(<span class="string">&quot;        for _ in range(&quot;</span> + generateNum + <span class="string">&quot;):\n&quot;</span>);</span><br><span class="line">                List&lt;StringBuilder&gt; buildSqlFieldList = buildInsertSqField(fileWriter, aClass);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;            &quot;</span> + <span class="string">&quot;execute_sql = f\&quot;\&quot;\&quot;INSERT INTO &quot;</span> + tableName + <span class="string">&quot;(&quot;</span> + buildSqlFieldList.get(<span class="number">0</span>) + <span class="string">&quot;) values (&quot;</span> + buildSqlFieldList.get(<span class="number">1</span>) + <span class="string">&quot;);\&quot;\&quot;\&quot;\n\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;            &quot;</span> + <span class="string">&quot;print(execute_sql)\n\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;            &quot;</span> + <span class="string">&quot;connection_cursor.execute(execute_sql)\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;            &quot;</span> + <span class="string">&quot;connection.commit()\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    finally:\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;        connection.close()\n\n\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;if __name__ == \&quot;__main__\&quot;:\n&quot;</span>);</span><br><span class="line">                fileWriter.write(<span class="string">&quot;    create_data()\n&quot;</span>);</span><br><span class="line">                fileWriter.close();</span><br><span class="line">                log.info(<span class="string">&quot;====&gt;&gt; 生成&#123;&#125;实体的造数脚本完毕&quot;</span>, aClass);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成插入sql字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileWriter 文件写入程序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aClass     类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> List&#125;&lt;&#123;<span class="doctag">@link</span> StringBuilder&#125;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;StringBuilder&gt; <span class="title function_">buildInsertSqField</span><span class="params">(FileWriter fileWriter, Class&lt;?&gt; aClass)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;StringBuilder&gt; returnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Field&gt; allFields = getAllFields(aClass);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">beforeSqlStrBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">lastSqlStrBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">ignoreCount</span> <span class="operator">=</span> allFields.stream().filter(f -&gt; Objects.equals(f.getAnnotation(Faker.class).fakerType(), FakerTypeEnum.IGNORE) &amp;&amp;</span><br><span class="line">                StrUtil.isBlank(f.getAnnotation(Faker.class).customVal())).count();</span><br><span class="line">        <span class="type">int</span> <span class="variable">executedIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allFields.size(); i++) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> allFields.get(i);</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Faker.class)) &#123;</span><br><span class="line">                <span class="type">Faker</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Faker.class);</span><br><span class="line">                <span class="comment">//自增和有默认值的字段不处理</span></span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isBlank(annotation.customVal()) &amp;&amp; Objects.equals(field.getAnnotation(Faker.class).fakerType(), FakerTypeEnum.IGNORE)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">                <span class="type">String</span> <span class="variable">tableFieldName</span> <span class="operator">=</span> convertToUnderlineName(fieldName);</span><br><span class="line">                <span class="type">FakerTypeEnum</span> <span class="variable">fakerTypeEnum</span> <span class="operator">=</span> annotation.fakerType();</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isNotBlank(annotation.customVal())) &#123;</span><br><span class="line">                    fileWriter.write(<span class="string">&quot;            &quot;</span> + tableFieldName + <span class="string">&quot; = &#x27;&quot;</span> + annotation.customVal() + <span class="string">&quot;&#x27;\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fileWriter.write(<span class="string">&quot;            &quot;</span> + tableFieldName + <span class="string">&quot; = &quot;</span> + fakerTypeEnum.getFakerVal() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (executedIndex == allFields.size() - ignoreCount - <span class="number">1</span>) &#123;</span><br><span class="line">                    beforeSqlStrBuilder.append(tableFieldName);</span><br><span class="line">                    lastSqlStrBuilder.append(<span class="string">&quot;&#x27;&#123;&quot;</span>).append(tableFieldName).append(<span class="string">&quot;&#125;&#x27;&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    beforeSqlStrBuilder.append(tableFieldName).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    lastSqlStrBuilder.append(<span class="string">&quot;&#x27;&#123;&quot;</span>).append(tableFieldName).append(<span class="string">&quot;&#125;&#x27;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                executedIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        returnList.add(beforeSqlStrBuilder);</span><br><span class="line">        returnList.add(lastSqlStrBuilder);</span><br><span class="line">        <span class="keyword">return</span> returnList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> List&#125;&lt;&#123;<span class="doctag">@link</span> Field&#125;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Field&gt; <span class="title function_">getAllFields</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">        List&lt;Field&gt; fields = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; c = type; c != <span class="literal">null</span>; c = c.getSuperclass()) &#123;</span><br><span class="line">            Field[] declaredFields = c.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">                fields.add(declaredField);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fields;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为下划线名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">convertToUnderlineName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">char</span>[] charArray = className.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                tableName.append(Character.toLowerCase(charArray[<span class="number">0</span>]));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(charArray[i])) &#123;</span><br><span class="line">                tableName.append(<span class="string">&#x27;_&#x27;</span>).append(Character.toLowerCase(charArray[i]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tableName.append(Character.toLowerCase(charArray[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tableName.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="生成完毕截图"><a href="#生成完毕截图" class="headerlink" title="生成完毕截图"></a>生成完毕截图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/java/24/6/17/idea_over.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/java/24/6/17/py_over.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/java/24/6/17/sql_data.png"
                     
                ></p>
<blockquote>
<p>至此，一个简单的生成数据的脚本我们就创建好了；可以思考下如果要基于前置数据生成有关联关系的数据脚本要怎么弄，一对多一对一要怎么做？以及有没有办法改造mybatis生成基础代码配置，让其生成对应实体时自动加上对应的注解及对应的枚举值；</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8新特性之stream流</title>
    <url>/2021/0423/java8-stream.html</url>
    <content><![CDATA[<blockquote>
<p>在jdk1.5的时候，我们需要掌握枚举：反射、注解、泛型。现在java14都出来了<br>jdk1.8的新特性：函数式接口、链式编程、stream流、lambda表达式 都掌握的怎么样了？</p>
</blockquote>
<p><strong>本篇将着重说明 Stream 流的用法</strong></p>
<h3 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h3><p>按条件筛选用户，请你只用一行代码完成！</p>
<ul>
<li>1、id 为偶数</li>
<li>2、年龄大于24</li>
<li>3、用户名大写</li>
<li>4、用户名倒排序</li>
<li>5、输出一个用户</li>
</ul>
<p>代码(User 实体类省略)：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;jim&quot;</span>,<span class="number">23</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;tom&quot;</span>,<span class="number">24</span>,<span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;echo&quot;</span>,<span class="number">25</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;jerry&quot;</span>,<span class="number">26</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>,<span class="string">&quot;bob&quot;</span>,<span class="number">27</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="comment">//数据库、集合 ： 存数据的</span></span><br><span class="line">        <span class="comment">// Stream：计算和处理数据交给 Stream</span></span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(user1, user2, user3, user4, user5);</span><br><span class="line">        users.stream()</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span> u.getId()%<span class="number">2</span> == <span class="number">0</span>;&#125;)</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span> u.getAge() &gt; <span class="number">24</span>;&#125;)</span><br><span class="line">                .map(u-&gt;&#123;<span class="keyword">return</span> u.getName().toUpperCase();&#125;)</span><br><span class="line">                .sorted((u1,u2)-&gt;&#123;<span class="keyword">return</span> u2.compareTo(u1);&#125;)</span><br><span class="line">                .limit(<span class="number">1</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>接下来我们深入看看stream流中都有些什么？</p>
</blockquote>
<h3 id="创建流："><a href="#创建流：" class="headerlink" title="创建流："></a>创建流：</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建一个具体字符串流</span></span><br><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line"><span class="comment">//2.创建一个Stream流Builder&lt;Object&gt;对象</span></span><br><span class="line">Stream.Builder&lt;Object&gt; builder = Stream.builder();</span><br><span class="line"><span class="comment">//3.创建一个空的String 流</span></span><br><span class="line">Stream&lt;String&gt; empty = Stream.empty();</span><br><span class="line"><span class="comment">//4.合并两个流</span></span><br><span class="line">Stream&lt;String&gt; concat = Stream.concat(stream1, empty);</span><br><span class="line"><span class="comment">//5.用迭代器创建无限流</span></span><br><span class="line">Stream&lt;Integer&gt; iterate = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//6.生成 无限流</span></span><br><span class="line">Stream&lt;Double&gt; generate = Stream.generate(() -&gt; Math.random());</span><br><span class="line"><span class="comment">//7.collection的串行流  和并行流</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = list.stream();</span><br><span class="line">Stream&lt;String&gt; stream3 = list.parallelStream();</span><br><span class="line"><span class="comment">//8.Arrays.stream创建一个数组流</span></span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line"><span class="comment">//9.通过文件生成字符串流</span></span><br><span class="line">Stream&lt;String&gt; stream = Files.lines(Paths.get(<span class="string">&quot;text.txt&quot;</span>), Charset.defaultCharset());</span><br></pre></td></tr></table></figure></div>
<h3 id="流的使用："><a href="#流的使用：" class="headerlink" title="流的使用："></a>流的使用：</h3><p>看的流的使用 也就是看users.stream()能点出来哪些东西,因为太多，这里就举例说明常用的几种：</p>
<h4 id="1-filter过滤："><a href="#1-filter过滤：" class="headerlink" title="1.filter过滤："></a>1.filter过滤：</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 筛选出&gt;3的数据</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">list.stream().filter((i)-&gt;&#123;<span class="keyword">return</span> i &gt; <span class="number">3</span>;&#125;).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出4</span></span><br></pre></td></tr></table></figure></div>
<h4 id="2-limit限流"><a href="#2-limit限流" class="headerlink" title="2.limit限流"></a>2.limit限流</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取未来7天的日期(顺便看看iterate 和 generate的用法)</span></span><br><span class="line">        Stream.iterate(LocalDate.now(), date -&gt; date.plusDays(<span class="number">1</span>)).limit(<span class="number">7</span>).forEach(date-&gt; &#123;</span><br><span class="line">            System.out.print(date+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 输出 2020-03-12,2020-03-13,2020-03-14,2020-03-15,2020-03-16,2020-03-17,2020-03-18,</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 截取前三个随机数 并打印</span></span><br><span class="line">        <span class="comment">// 写在这里的 时候就想换行输出下 加个计数器判断下</span></span><br><span class="line">        <span class="comment">// 至于为什么用AtomicInteger计数而不是int,我猜是因为设计者考虑到并发情况下线程安全的问题</span></span><br><span class="line">        <span class="comment">// 因为“ Variable used in lambda expression should be final or effectively final”</span></span><br><span class="line">        <span class="comment">// AtomicInteger 在另一篇博客【并发编程之美-JUC]中有提到过</span></span><br><span class="line">        Stream.generate(()-&gt;Math.random()).limit(<span class="number">3</span>).forEach(d-&gt;&#123;</span><br><span class="line">            a.getAndIncrement();</span><br><span class="line">            <span class="keyword">if</span>(a.get() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(d+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span>+d+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//输出0.8662508892898771,0.26661993344781665,0.2584450405261183,</span></span><br></pre></td></tr></table></figure></div>
<h4 id="3-skip-跳出"><a href="#3-skip-跳出" class="headerlink" title="3.skip 跳出"></a>3.skip 跳出</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//skip（n）去掉前n个元素的流</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line"><span class="comment">//若流中元素不足n个，则返回一个空，与limit（n）互补。</span></span><br><span class="line">list.stream().skip(<span class="number">3</span>).forEach(System.out::print);</span><br><span class="line"><span class="comment">//输出4</span></span><br></pre></td></tr></table></figure></div>
<h4 id="4-sorted排序"><a href="#4-sorted排序" class="headerlink" title="4.sorted排序"></a>4.sorted排序</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//倒序排列</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">list.stream().sorted((o1, o2)-&gt;&#123;<span class="keyword">return</span> o2.compareTo(o1);&#125;).forEach(System.out::print);</span><br><span class="line"><span class="comment">//输出54321</span></span><br></pre></td></tr></table></figure></div>
<h4 id="5-distinct筛选"><a href="#5-distinct筛选" class="headerlink" title="5.distinct筛选"></a>5.distinct筛选</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去除重复数据</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.stream().distinct().forEach(System.out::print);</span><br><span class="line"><span class="comment">//输出123</span></span><br></pre></td></tr></table></figure></div>
<h4 id="6-映射"><a href="#6-映射" class="headerlink" title="6.映射"></a>6.映射</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流式计算将实体中某两个属性对应组装成key value的格式返回</span></span><br><span class="line"><span class="comment">// 项目中一般读取数据字典 根据code 返回前台数据使用</span></span><br><span class="line">Map&lt;Integer, String&gt; collect = users.stream()</span><br><span class="line">.collect(Collectors.toMap(User::getId, User::getName));</span><br><span class="line">System.out.println(collect.toString());</span><br><span class="line"><span class="comment">// 输出&#123;1=jim, 2=tom, 3=echo, 4=jerry, 5=bob&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将user按adress 分组</span></span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; addressMap = users.stream()</span><br><span class="line">.collect(Collectors.groupingBy(User::getAddress));</span><br><span class="line">System.out.println(addressMap.toString());</span><br><span class="line"><span class="comment">//输出：&#123;上海=[stream.User@52cc8049], 武汉=[stream.User@5b6f7412],</span></span><br><span class="line"><span class="comment">//深圳=[stream.User@27973e9b], 北京=[stream.User@312b1dae, stream.User@7530d0a]&#125;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>小结：以上就是stream 流的常见用法 至于规约 查找 匹配都用的都很少，暂且不再深入 ，关于lambda表达式和函数式接口后面会写,还有一个很好玩的类Optional，后面也来写写看，奥利给！！!</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>从mybatis看设计模式的应用</title>
    <url>/2021/0423/mybatis-she-ji-mo-shi.html</url>
    <content><![CDATA[<blockquote>
<p>请你说说，设计模式在mybatis有哪些具体的应用？</p>
</blockquote>
<p><strong>设计模式分类</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/20/UhROAI.png"
                     
                ></p>
<p>是不是看着头大，哈哈；头大就对了，我们没必要每个都去深究，我们只需要结合例子知道部门设计模式是如何使用的就可以了！接下来我们结合mybatis这个框架，探讨下常用设计的使用吧！</p>
<p>关于设计模式的示例及讲解可以看C语言中文网中关于设计模式的描述及示例：<a class="link"   href="http://c.biancheng.net/design_pattern/" >23种设计模式详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>那么mybatis中运用的设计模式有哪些呢？</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>简单理解，就是工厂模式就是提供一个工厂类，当客户端需要调用的时候就可以得到想要的结果，而不需要关注内部的实现！就好像买东西，不需要你关心这些东西怎么生产的，给对应的钱就可以了！</p>
<p>那么工厂模式在MyBatis中具体的应用就是SqlSessionFactory, 通过SqlSessionFactory接口类，可以得到对应的SqlSession接口，我们可以通过该接口执行SQL命令，获取映射器示例和管理事务。</p>
<p>DefaultSqlSessionFactory是SqlSessionFactory下的一个子类，我们来看下其中的openSessionFromDataSource方法的源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">  <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  DefaultSqlSession var8;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">​    <span class="comment">// 读取环境配置</span></span><br><span class="line">​    <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="built_in">this</span>.configuration.getEnvironment();</span><br><span class="line">​    <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> <span class="built_in">this</span>.getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">​    tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">​    <span class="comment">// 跟据对应的执行器类型获取对应的执行器对象</span></span><br><span class="line">​    <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="built_in">this</span>.configuration.newExecutor(tx, execType);</span><br><span class="line">​    var8 = <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(<span class="built_in">this</span>.configuration, executor, autoCommit);</span><br><span class="line"></span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception var12) &#123;</span><br><span class="line">​    <span class="built_in">this</span>.closeTransaction(tx);</span><br><span class="line">​    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session. Cause: &quot;</span> + var12, var12);</span><br><span class="line"></span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">​    ErrorContext.instance().reset();</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">return</span> var8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们可以看到对应的newExecutor方法可以根据executorType类型，创建不同的Executor对象；这就是标准的工厂模式的应用！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Executor <span class="title function_">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> &#123;</span><br><span class="line">​    executorType = executorType == <span class="literal">null</span> ? <span class="built_in">this</span>.defaultExecutorType : executorType;</span><br><span class="line">​    executorType = executorType == <span class="literal">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">​    Object executor;</span><br><span class="line">​    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">​      executor = <span class="keyword">new</span> <span class="title class_">BatchExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">​      executor = <span class="keyword">new</span> <span class="title class_">ReuseExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">​      executor = <span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">   &#125;</span><br><span class="line">​    <span class="keyword">if</span> (<span class="built_in">this</span>.cacheEnabled) &#123;</span><br><span class="line">​      executor = <span class="keyword">new</span> <span class="title class_">CachingExecutor</span>((Executor)executor);</span><br><span class="line">   &#125;</span><br><span class="line">​    <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> (Executor)<span class="built_in">this</span>.interceptorChain.pluginAll(executor);</span><br><span class="line">​    <span class="keyword">return</span> executor;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>其实单例模式一定程度上违背了“单一职责原则”；为什么呢，因为单例模式即提供了单一的实例，又提供了实例的全局访问；但是，这种模式还是有它的优势和不可替代的地方的，在mybatis框架中的单例的代表实现就是ErrorContext;我们来看下它的源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorContext</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LINE_SEPARATOR</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">  <span class="keyword">private</span> ErrorContext stored;</span><br><span class="line">  <span class="keyword">private</span> String resource;</span><br><span class="line">  <span class="keyword">private</span> String activity;</span><br><span class="line">  <span class="keyword">private</span> String object;</span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line">  <span class="keyword">private</span> String sql;</span><br><span class="line">  <span class="keyword">private</span> Throwable cause;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">ErrorContext</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ErrorContext <span class="title function_">instance</span><span class="params">()</span> &#123;</span><br><span class="line">​    <span class="type">ErrorContext</span> <span class="variable">context</span> <span class="operator">=</span> (ErrorContext)LOCAL.get();</span><br><span class="line">​    <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">​      context = <span class="keyword">new</span> <span class="title class_">ErrorContext</span>();</span><br><span class="line">​      LOCAL.set(context);</span><br><span class="line">   &#125;</span><br><span class="line">​    <span class="keyword">return</span> context;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">//...其他代码省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<p>从上面代码我们可以看到，ErrorContext私有了构造器，并且私有了一个LOCAL 线程来保存ErrorContext对象，以此来保证每个线程都有一个独立的ErrorContext对象，在初始化的instance()方法时，将ErrorContext对象 set到LOCAL中！</p>
<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>简而言之，就是将一个对象的构建过程拆分，通过多个模块一步步实现，根据模块的多少从而达到不同级别的实现！举个例子，你要组装台电脑，那么你可以根据你的需求，你可以分为：开发，办公，影音聊天，打游戏等这些需求。那么根据不同的需求，你可以选购不同级别的内存，显卡，显示屏，硬盘等。那么电脑组装人员，根据你不同的需求组装对应电脑的过程就是建造者模式！</p>
<p>那么建造者模式在mybatis是怎么应用的呢？典型的就是各种builder,我们结合SqlSessionFactoryBuilder类来分析下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader, String environment, Properties properties)</span> &#123;</span><br><span class="line">  SqlSessionFactory var5;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">​    <span class="comment">// 读取xml配置</span></span><br><span class="line">​    <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(reader, environment, properties);</span><br><span class="line">​    <span class="comment">// 构建SqlSessionFactory</span></span><br><span class="line">​    var5 = <span class="built_in">this</span>.build(parser.parse());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">​    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error building SqlSession.&quot;</span>, var14);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">​    <span class="comment">// 将单例的重置放到finally 中</span></span><br><span class="line">​    ErrorContext.instance().reset();</span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line">​      reader.close();</span><br><span class="line">​    &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>&#x2F;&#x2F;…省略其他方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Configuration config)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactory</span>(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>通过源码的阅读，我们知道SqlSessionFactoryBuilder类提供了各种build方法，通过读取解析配置，然后通过反射生成对象，最后将对象放入了缓存，然后一步步构建返回SqlSessionFactor对象；</p>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式，其实很好理解；它的运用只为了兼容，通过适配器模式，我们可以将一个不兼容的接口转换成兼容的接口，从而使不兼容的类可以协调一起工作！通俗的讲，就是一个转接头的概念，不论你用啥类型的线，我给你加个转接头，你都能玩，没有什么是加一层不能的解决的嘛！</p>
<p>例如，mybatis的日志模块适配了多种日志类型，包括：SLF4J,Log4j2,JDK loggiing等；</p>
<p>我们来看下Log接口:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Log</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isDebugEnabled</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isTraceEnabled</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String var1, Throwable var2)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">trace</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">warn</span><span class="params">(String var1)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们来看下Log4j2的实现类Log4j2Impl:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.spi.AbstractLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j2Impl</span> <span class="keyword">implements</span> <span class="title class_">Log</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Log log;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Log4j2Impl</span><span class="params">(String clazz)</span> &#123;</span><br><span class="line">​    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(clazz);</span><br><span class="line">​    <span class="keyword">if</span> (logger <span class="keyword">instanceof</span> AbstractLogger) &#123;</span><br><span class="line">​      <span class="built_in">this</span>.log = <span class="keyword">new</span> <span class="title class_">Log4j2AbstractLoggerImpl</span>((AbstractLogger)logger);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">​      <span class="built_in">this</span>.log = <span class="keyword">new</span> <span class="title class_">Log4j2LoggerImpl</span>(logger);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//...其他代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样做的好处是，当你使用log4j2时，mybatis可以直接使用它打印mybatis的日志！就是说，我是总的规范制定者，不管你们下面再怎么乱， 我把规范制定出来，你们要用的话，就实现我的这些方法就可以了！为了你们使用方便，我把你们都集成到我这里来，你们后面直接用你的东西但是还是可以调用我这边提供的方法！</p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>哈哈，这个是个比较经典的模式了！最经典的理解就是火车票代售点，它就是个代理火车站卖票的作用！那么mybatis中怎么使用的呢？我们来看下MapperProxyFactory类:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MapperProxyFactory</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mapperInterface = mapperInterface;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">public</span> Class&lt;T&gt; <span class="title function_">getMapperInterface</span><span class="params">()</span> &#123;</span><br><span class="line">​    <span class="keyword">return</span> <span class="built_in">this</span>.mapperInterface;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">public</span> Map&lt;Method, MapperMethod&gt; <span class="title function_">getMethodCache</span><span class="params">()</span> &#123;</span><br><span class="line">​    <span class="keyword">return</span> <span class="built_in">this</span>.methodCache;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
<p>&#x2F;&#x2F; 创建代理实例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">protected</span> T <span class="title function_">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;</span><br><span class="line">​    <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.mapperInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="built_in">this</span>.mapperInterface&#125;, mapperProxy);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">​    MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> <span class="title class_">MapperProxy</span>(sqlSession, <span class="built_in">this</span>.mapperInterface, <span class="built_in">this</span>.methodCache);</span><br><span class="line">​    <span class="keyword">return</span> <span class="built_in">this</span>.newInstance(mapperProxy);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>很多时候，我们做事情是有一套固定的流程模板的，例如：把东西放进冰箱；打开冰箱门-&gt;放入东西-&gt;关门,唯一不同的就是这个东西是可变的！而模板方法模式就是，规定一套流程，而降放入东西这一具体的实现放入子类中去实现，使得子类不改变整个算法流程的结构，即可以重新定义一个模板，重而达到模板复用的目的！</p>
<p>mybatis中代表的模板方法的应用是BaseExecutor类，BaseExecutor实现了大部分的SQL的执行逻辑，然后再把方法交给子类来实现，它的继承关系如下所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/20/UhvvcQ.png"
                     
                ></p>
<p>比如，doUpdate()方法就是交给子类去实现的，在BaseExecutor中定义如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement var1, Object var2)</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure></div>

<p>在SimpleExecutor中的实现如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> var6;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>, ms, parameter, RowBounds.DEFAULT, (ResultHandler)<span class="literal">null</span>, (BoundSql)<span class="literal">null</span>);</span><br><span class="line">        stmt = <span class="built_in">this</span>.prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        var6 = handler.update(stmt);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而在BatchExecutor中实现如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement ms, Object parameterObject)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">    <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>, ms, parameterObject, RowBounds.DEFAULT, (ResultHandler)<span class="literal">null</span>, (BoundSql)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> handler.getBoundSql();</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">    Statement stmt;</span><br><span class="line">    <span class="keyword">if</span> (sql.equals(<span class="built_in">this</span>.currentSql) &amp;&amp; ms.equals(<span class="built_in">this</span>.currentStatement)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="built_in">this</span>.statementList.size() - <span class="number">1</span>;</span><br><span class="line">        stmt = (Statement)<span class="built_in">this</span>.statementList.get(last);</span><br><span class="line">        <span class="built_in">this</span>.applyTransactionTimeout(stmt);</span><br><span class="line">        handler.parameterize(stmt);</span><br><span class="line">        <span class="type">BatchResult</span> <span class="variable">batchResult</span> <span class="operator">=</span> (BatchResult)<span class="built_in">this</span>.batchResultList.get(last);</span><br><span class="line">        batchResult.addParameterObject(parameterObject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="built_in">this</span>.getConnection(ms.getStatementLog());</span><br><span class="line">        stmt = handler.prepare(connection, <span class="built_in">this</span>.transaction.getTimeout());</span><br><span class="line">        handler.parameterize(stmt);</span><br><span class="line">        <span class="built_in">this</span>.currentSql = sql;</span><br><span class="line">        <span class="built_in">this</span>.currentStatement = ms;</span><br><span class="line">        <span class="built_in">this</span>.statementList.add(stmt);</span><br><span class="line">        <span class="built_in">this</span>.batchResultList.add(<span class="keyword">new</span> <span class="title class_">BatchResult</span>(ms, sql, parameterObject));</span><br><span class="line">    &#125;</span><br><span class="line">    handler.batch(stmt);</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2147482646</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在ReuseExecutor中实现如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">    <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>, ms, parameter, RowBounds.DEFAULT, (ResultHandler)<span class="literal">null</span>, (BoundSql)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="built_in">this</span>.prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">    <span class="keyword">return</span> handler.update(stmt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看出每个子类的实现都不同，SimpleExecutor中使用完Statement后，都在finally中关闭了Statement对象，而BatchExecutor和ReuseExecutor都没有关闭；并且BatchExecutor中doUpdate返回了一个最小的int值，而其他两个则返回的是实际影响的条数！</p>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>装饰模式又称作装饰器模式，它指的是在不改变原有代码结构情况下，动态给对象添加方法的模式；通俗的来讲，即是我们一般扩展对象的功能一般采用继承的方式，但是继承具有原生属性的特点，耦合度高；随着功能增多，子类也会变得越类越大；这个情况我们使用装饰模式，在不改变原有功能的情况，对原有功能进行一个扩展。</p>
<p>mybatis采用装饰模式的典型代表就是Cache,Cache除了最基本的存储和缓存的作用外，还附加了其他的Cache类；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/20/U4kgr8.png"
                     
                ></p>
<p>如图，我们可以看到防止并发访问的SynchronizedCache、先进先出的FifoCache、最近最少使用的LruCache、定时清空缓存ScheduledCache、阻塞缓存BlockingCache等；其实如果你细心的话通过命名就知道，PerpetualCache是mybatis的基本实现类，而在包<code>decorator</code>下的都是其装饰模式的扩展类。再比较下这些类，你会发现装饰器的类的在有参构造中进行了方法调用，即原有对象构造时功能进行了扩展！</p>
<blockquote>
<p>小结：关于设计模式，我们基本弄清楚这些就可以了；其他的了解即可，因为处在互联网的时代，个人很难做到面面俱到，有些东西你可以不会但是你不能不知道，或者说你不能不知道学习的路径或方法！</p>
<p>另外mybatis是一个很经典的框架，特别涉及到缓存方面，面试考点也很多；例如涉及到一级缓存，二级缓存，cachekey的算法实现，BlockingCache解决了缓存穿透和雪崩等；这就必须要求我们去读它的源码了：mybati源码带中文注释阅读地址：<a class="link"   href="https://github.com/tuguangquan/mybatis"  target="_blank">源码地址 ：https://github.com/tuguangquan/mybatis <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>经典8锁问题--助你彻底搞懂锁的概念</title>
    <url>/2021/0423/8-lock-question.html</url>
    <content><![CDATA[<blockquote>
<p>下面将通过经典的8锁问题，认清锁原理</p>
</blockquote>
<h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准情况下 是先sendEmail()　还是先callPhone()?</span></span><br><span class="line"><span class="comment"> * 答案：sendEmail</span></span><br><span class="line"><span class="comment"> * 解释：被 synchronized 修饰的方式，锁的对象是方法的调用者</span></span><br><span class="line"><span class="comment"> * 所以说这里两个方法调用的对象是同一个，先调用的先执行！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone1</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone1.sendEmail();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone1.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;senEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sendEmail()休眠三秒后  是先执行sendEmail() 还是 callPhone()</span></span><br><span class="line"><span class="comment"> * 答案： sendEmail</span></span><br><span class="line"><span class="comment"> * 解释：被 synchronized 修饰的方式，锁的对象是方法的调用者</span></span><br><span class="line"><span class="comment"> * 所以说这里两个方法调用的对象是同一个，先调用的先执行！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone2.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>); <span class="comment">// 休眠2秒</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone2.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被synchronized 修饰的方式和普通方法 先执行sendEmail() 还是 callPhone()</span></span><br><span class="line"><span class="comment"> * 答案： callPhone</span></span><br><span class="line"><span class="comment"> * 解释：新增加的这个方法没有 synchronized 修饰，不是同步方法，不受锁的影响！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone3</span> <span class="variable">phone3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone3</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone3.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone3.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有synchronized 没有static 就是普通方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被synchronized 修饰的不同方法 先执行sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：callPhone</span></span><br><span class="line"><span class="comment"> * 解释：被synchronized 修饰的不同方法 锁的对象是调用者</span></span><br><span class="line"><span class="comment"> * 这里锁的是两个不同的调用者，所有互不影响</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone4</span> <span class="variable">phoneA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone4</span>();</span><br><span class="line">        <span class="type">Phone4</span> <span class="variable">phoneB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone4</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phoneA.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phoneB.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="场景五"><a href="#场景五" class="headerlink" title="场景五"></a>场景五</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个静态同步方法 都被synchronized 修饰 是先sendEmail() 还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：sendEmial</span></span><br><span class="line"><span class="comment"> * 解释：只要方法被 static 修饰，锁的对象就是 Class模板对象,这个则全局唯一！</span></span><br><span class="line"><span class="comment"> *      所以说这里是同一个锁，并不是因为synchronized  这里程序会从上往下依次执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone5</span> <span class="variable">phone5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone5</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone5.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone5.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="场景六"><a href="#场景六" class="headerlink" title="场景六"></a>场景六</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被synchronized 修饰的普通方法和静态方法  是先sendEmail() 还是 callPhone()?</span></span><br><span class="line"><span class="comment"> * 答案：callPhone</span></span><br><span class="line"><span class="comment"> * 解释：只要被static修饰锁的是class模板, 而synchronized 锁的是调用的对象</span></span><br><span class="line"><span class="comment"> * 这里是两个锁互不影响，按时间先后执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone6</span> <span class="variable">phone6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone6</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone6.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone6.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="场景七"><a href="#场景七" class="headerlink" title="场景七"></a>场景七</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同被static+synchronized 修饰的两个方法，是先sendEmail()还是callPhone()?</span></span><br><span class="line"><span class="comment"> *  答案：sendEmail</span></span><br><span class="line"><span class="comment"> *  解释：只要方法被 static 修饰，锁的对象就是 Class模板对象,这个则全局唯一</span></span><br><span class="line"><span class="comment"> *  所以说这里是同一个锁，并不是因为synchronized</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone7</span> <span class="variable">phoneA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone7</span>();</span><br><span class="line">        <span class="type">Phone7</span> <span class="variable">phoneB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone7</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phoneA.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phoneB.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone7</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="场景八"><a href="#场景八" class="headerlink" title="场景八"></a>场景八</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个被static+synchronized 修饰的方法和普通的synchronized方法，先执行sendEmail()还是callPhone()？</span></span><br><span class="line"><span class="comment"> * 答案：callPhone()</span></span><br><span class="line"><span class="comment"> * 解释： 只要被static 修饰的锁的就是整个class模板</span></span><br><span class="line"><span class="comment"> * 这里一个锁的是class模板 一个锁的是调用者</span></span><br><span class="line"><span class="comment"> * 所以锁的是两个对象 互不影响</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone8</span> <span class="variable">phoneA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone8</span>();</span><br><span class="line">        <span class="type">Phone8</span> <span class="variable">phoneB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone8</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phoneA.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phoneB.callPhone();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone8</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">callPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPhone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>小结：<br>1、new          this       调用的这个对象，是一个具体的对象！<br>2、static       class      唯一的一个模板！<br>在我们编写多线程程序得时候，只需要搞明白这个到底锁的是什么就不会出错了！<code>synchronized(Demo.class)</code>和<code>synchronized(this)</code></p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈事务的四大特性及多线程事务问题</title>
    <url>/2021/0423/4-characteristics-of-transaction.html</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>事务是指一段程序应用中，所有的操作都在一个执行单元内，一旦一个操作失败，那么其他的操作都会回滚，简单来说要么全部执行成功，要么全部执行失败；</p>
<h3 id="事务的四大特性（简称ACID）"><a href="#事务的四大特性（简称ACID）" class="headerlink" title="事务的四大特性（简称ACID）"></a>事务的四大特性（简称ACID）</h3><ul>
<li><p>原子性：原子性是指事务包含的操作是一个极小的操作单元，是不可拆分的；其中的操作要么全部完成，要么全部不完成；在事务执行的过程中，如果出现运行时异常事务会回滚，那么事务会回滚到之前没有执行的状态；</p>
</li>
<li><p>一致性：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>
</li>
<li><p>隔离性：隔离性是对于多线程并发来说的，比如线程A和线程B,他们之间的事务的执行是隔离的，不会互相干扰，对于彼此来说是不可见得；对于事务的隔离机制，主要是数据提供的几种隔离级别；例如mysql提供了4种隔离级别：① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。③ Read committed (读已提交)：可避免脏读的发生。④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。其中mysql默认的是第二种可重复读；</p>
</li>
<li><p>持久性：持久性是指一个事务一旦提交后，那么数据库的状态就是永久的，不可更改了；</p>
</li>
</ul>
<h3 id="spring中如何管理事务的？"><a href="#spring中如何管理事务的？" class="headerlink" title="spring中如何管理事务的？"></a>spring中如何管理事务的？</h3><p>这是面试中常问的了，我们都知道spring的IOC和AOP两大特点，其中AOP的典型应用就是事务的管理；spring容器通过AOP，在需要控制的事务的方法前加上开启事务的控制器，在其后加上事务的提交和回滚方法，这样就使事务在我们的方法中生效了；当然AOP的事务控制肯定不是我说的这么简单，但是原理大致是这样；具体可以看<code>PlatformTransactionManager</code>事务管理器中的源码了解，这里不再发散哈；</p>
<p>其实我们Spring中在方法上加上<code>@Transactional</code>注解，就是声明式的事务控制方式，但是使用此注解，需要注意Spring中事务控制中只捕获了运行时异常，对于非运行时的异常，没有捕获，通常我们需要指定<code>rollbackFor=Exception.class</code>,对于有可能执行很长时间的事务，我们还需要声明超时时间<code>timeOut=60*3</code>;</p>
<h3 id="多线程中事务是互相隔离的吗？"><a href="#多线程中事务是互相隔离的吗？" class="headerlink" title="多线程中事务是互相隔离的吗？"></a>多线程中事务是互相隔离的吗？</h3><p>我们写个例子测试一下,首先我们建一张表User表，其次我们多线程插入一些数据看下，当循环到某一次手动抛出一个异常看下；</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈jvm虚拟机</title>
    <url>/2021/0423/jvm-talk.html</url>
    <content><![CDATA[<blockquote>
<p>jvm 是Java Virtual Machine（Java虚拟机）的缩写，java 虚拟机作为一种跨平台的软件是作用于操作系统之上的，那么认识并了解它的底层运行逻辑对于java开发人员来说很有必要！</p>
</blockquote>
<p>让我们来看看它一次编译，到处运行的牛叉之处！<br>废话不多说，先看看jvm的架构图(无论何时脑子里要有这样一张图)：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8nLiNj.png"
                     
                ></p>
<blockquote>
<p>总概<br><strong>从这副架构图可以看出jvm由类装载器、运行时数据区、执行引擎、本地方法接口还有垃圾回收器构成;其中垃圾回收器作用在整个jvm内存中（主要作用在堆和方法区），所以图中没有具体体现，但是我们要知道这么个东西，后面会聊jvm内存调优主要是在调堆</strong></p>
</blockquote>
<p>接下来，我们再结合jvm架构图一个个分析下：</p>
<h3 id="「类加载器"><a href="#「类加载器" class="headerlink" title="「类加载器"></a>「类加载器</h3><p>了解类加载器就是了解代码编译执行的机制</p>
<p>1.加载：查找并加载类的二进制数据</p>
<p>2.连接：</p>
<ul>
<li><p>验证：保证被加载的类的正确性；</p>
</li>
<li><p>准备：给类静态变量分配内存空间，赋值一个默认的初始值；</p>
</li>
<li><p>解析：把类中的符号引用转换为直接引用</p>
<p>把java编译为class文件的时候，虚拟机并不知道所引用的地址；助记符：符号引用转为真正的直接引用，找到对应的直接地址！</p>
</li>
</ul>
<p>3.初始化：给类的静态变量赋值正确的值；</p>
<p>来看下这行代码的执行顺序：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 1、加载  编译TestClassLoader文件为 .class 文件，通过类加载，加载到JVM</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、连接</span></span><br><span class="line">    <span class="comment">//验证(1)  保证Class类文件没有问题</span></span><br><span class="line">    <span class="comment">//准备(2)  给int类型分配内存空间，a = 0；</span></span><br><span class="line">    <span class="comment">//解析(3)  符号引用转换为直接引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、初始化</span></span><br><span class="line">    <span class="comment">//经过这个阶段的解析，把1 赋值给 变量 a；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>了解了这个加载执行顺序后，我们再来看看下面这段代码，请你说说程序是如何输出的?</p>
<p>Demo1代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*JVM 参数：</span></span><br><span class="line"><span class="comment">*-XX:+TraceClassLoading // 用于追踪类的加载信息并打印出来</span></span><br><span class="line"><span class="comment">*分析项目启动为什么这么慢，快速定位自己的类有没有被加载！</span></span><br><span class="line"><span class="comment">*rt.jar jdk 出厂自带的，最高级别的类加载器要加载的！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Children1.str2);</span><br><span class="line">        Children1.sayHello();</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">//      Parent1 static</span></span><br><span class="line">        <span class="comment">//      Children1 static</span></span><br><span class="line">        <span class="comment">//      hello,str2</span></span><br><span class="line">        <span class="comment">//      hello,str1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello,str1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent1 static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Children1</span> <span class="keyword">extends</span> <span class="title class_">Parent1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello,str2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Children1 static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看出，子类继承父类 会优先加载父类的 然后静态块是先于方法和静态变量的.那么常量又是怎样的呢？</p>
<p>Demo2代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Parent2.STR2);</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// hello static final</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STR2</span> <span class="operator">=</span> <span class="string">&quot;hello static final&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent2 static&quot;</span>); <span class="comment">// 这句话会输出吗？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Demo3代码:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Parent3.STR3);</span><br><span class="line">        <span class="comment">// 输出： Parent3 static</span></span><br><span class="line">        <span class="comment">//       ee33c452-70e2-47a6-946a-99261819a49d</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STR3</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent3 static&quot;</span>); <span class="comment">// 这句话会输出吗？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>理解：根据上面的jvm架构图可以知道类信息，常量，静态变量，编译后运行代码都是存在方法区里的，而常量是存在方法区的常量池中的。</p>
<p>而对于编译期可以<em>“确定值”</em>的常量：例如Demo2中STR2 是存放在Demo2类调用者所在的常量池中的，当STR2放到常量池后Demo2与Parent2类的关系就没有了！</p>
<p>对于编译期<em>“不确定值”</em>的常量：例如Demo3中STR3 是不存在Demo3的调用者的常量池中的，在程序运行期间会主动使用Demo3所在的类，会加载其静态块！</p>
<p>上面的程序Parent2.STR2输出后就退出了Parent2类，因为程序加载Parent2类是直接调用了常量池中关于STR2的引用，无需再加载类的其他信息包括静态块，说白了按我的理解就是常量池和类的其他信息不在一个内存区，程序根据指令扫描的时候无需扫描不相关的内存区！说到池(池？嗯，等等是不是和线程池和队列有关，哈哈。学东西要养成发散思维的习惯，这样就能串起来很多知识点，渐渐形成自己的知识面。)接下来就来扩展一下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思考：</span></span><br><span class="line"><span class="comment"> * String == 比较的是什么？</span></span><br><span class="line"><span class="comment"> * 八大基本类型哪些实现了池化技术</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exclude</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">java</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">java1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">java2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(java == java1);<span class="comment">//输出false</span></span><br><span class="line">        System.out.println(java1 == java2);<span class="comment">//输出false</span></span><br><span class="line">        <span class="comment">// 注⚠️：String用==比较的时候不仅比较的是对象的值还比较的是对象值的引用</span></span><br><span class="line">        <span class="comment">// equals</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(i == i1);<span class="comment">//输出true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(integer == integer1);<span class="comment">//输出false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line">        System.out.println(f == f1);<span class="comment">//输出false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注⚠️：java中基本类型的包装类的大部分都实现了常量池技术，这些类是Byte,Short,Integer,Long,Character,Boolean<br>另外两种浮点数类型的包装类Double Float则没有实现。<br>另外Byte,Short,Integer,Long,Character这5种整型的包装类也只是在对应值小于等于127时才可使用常量池，即对象不负责创建和管理大于127的这些类的对象</p>
<h4 id="类加载器-分类"><a href="#类加载器-分类" class="headerlink" title="类加载器 分类"></a>类加载器 分类</h4><p>1、java虚拟机自带的加载器</p>
<ul>
<li>BootStrap  根加载器 （加载系统的包，JDK 核心库中的类  rt.jar）</li>
<li>Ext        扩展类加载器 （加载一些扩展jar包中的类）</li>
<li>Sys&#x2F;App    系统（应用类）加载器 （我们自己编写的类）</li>
</ul>
<p>2、用户自己定义的加载器</p>
<ul>
<li>ClassLoader，只需要继承这个抽象类即可，自定义自己的类加载器</li>
</ul>
<p>Demo4代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// jdk 自带的</span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();  <span class="comment">// 实例化一个自己定义的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// null 在这里并不代表没有，只是Java触及不到！</span></span><br><span class="line">        System.out.println(o.getClass().getClassLoader()); <span class="comment">// null</span></span><br><span class="line">        System.out.println(demo.getClass().getClassLoader()); <span class="comment">// AppClassLoader</span></span><br><span class="line">        System.out.println(demo.getClass().getClassLoader().getParent()); <span class="comment">// ExtClassLoader</span></span><br><span class="line">        System.out.println(demo.getClass().getClassLoader().getParent().getParent()); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// jvm 中有机制可以保护自己的安全；</span></span><br><span class="line">        <span class="comment">// 双亲委派机制 ： 一层一层的让父类去加载，如果顶层的加载器不能加载，然后再向下类推</span></span><br><span class="line">        <span class="comment">// ClassLoader         04</span></span><br><span class="line">        <span class="comment">// AppClassLoader      03</span></span><br><span class="line">        <span class="comment">// ExtClassLoader      02</span></span><br><span class="line">        <span class="comment">// BootStrap (最顶层)   01  java.lang.String  rt.jar</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 双亲委派机制 可以保护java的核心类不会被自己定义的类所替代</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="「本地接口库"><a href="#「本地接口库" class="headerlink" title="「本地接口库"></a>「本地接口库</h3><blockquote>
<p>Native方法  <strong>JNI ： Java Native Interface （Java 本地方法接口）</strong></p>
</blockquote>
<p>大家都知道java是从C过度过来的，C可以直接操作硬件<br>思考一个问题：线程是基于内存的，那么应该是操作硬件 让计算机cpu来划分时间片来“同时”执行多个任务，那么程序是怎么怎么达到底层的呢？java 能直接操作硬件吗？我们来看看线程是怎么启动的，看源码（面向源码编程）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">        * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">        * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">        * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">        * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">       group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           start0();  <span class="comment">//启动 调用下面的native修饰的启动方法</span></span><br><span class="line">           started = <span class="literal">true</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                   group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">               <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                 it will be passed up the call stack */</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
<p>native : 只要是带了这个关键字的，说明 java的作用范围达不到，只能去调用底层 C 语言的库！</p>
<p>这部分知识作为java开发只需要了解即可，如果想去研究也可以看看嵌入式C的相关东西（C语言-&gt;编译器—&gt;汇编语言—&gt;驱动-&gt;硬件）。</p>
<h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>每个线程都有一个程序计数器，是线程私有的。</p>
<p>程序计数器就是一块十分小的内存空间；几乎可以不计</p>
<p>作用： 看做当前字节码执行的行号指示器<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8u0w0e.png"
                      alt="字节码"
                ></p>
<p>分支、循环、跳转、异常处理！都需要依赖于程序计数器来完成！</p>
<p><code>bipush</code>  将 int、float、String、常量值推送值栈顶</p>
<p><code>istore</code> 将一个数值从操作数栈存储到局部变量表</p>
<p><code>iadd </code> 加</p>
<p><code>imul</code> 乘</p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>Method Area 方法区 是 Java虚拟机规范中定义的运行是数据区域之一，和堆（heap）一样可以在线程之间共享！</p>
<p><strong>JDK1.7之前</strong></p>
<p>永久代：用于存储一些虚拟机加载类信息，常量，字符串、静态变量等等，这些东西都会放到永久代中；</p>
<p>永久代大小空间是有限的：如果满了 <code>OutOfMemoryError：PermGen </code></p>
<p><strong>JDK1.8之后</strong></p>
<p>彻底将永久代移除  HotSpot jvm ，Java Heap 中或者 Metaspcace（Native Heap）元空间；</p>
<p>元空间就是方法区在   HotSpot jvm  的实现；</p>
<p>方法区主要是存：类信息，常量，字符串、静态变量、符号引用、方法代码。</p>
<p>元空间和永久代，都是对JVM规范中方法区的实现。</p>
<p>元空间和永久代最大的区别：元空间并不在Java虚拟机中，使用的是本地内存！</p>
<p>设置元空间大小：<code>-XX:MetasapceSize10m</code></p>
<h4 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h4><p>堆和栈都是内存中相对独立的一块区域，jvm内存分为5个区域，分别是寄存器、本地方法区、方法区、栈内存、堆内存！</p>
<p>注⚠️：每个线程启动的时候，都会创建一个PC（Program Counter，程序计数器）寄存器，我们习惯上称呼为程序计数器，并不是什么其他的东西！</p>
<p>栈和堆的区别</p>
<ul>
<li><p>1.堆是不连续的，所以分配的内存是在运行期确认的，因此大小不固定；堆对于整个应用程序都是共享、可见的；堆内存存储的是实体；堆内存存放的实体会被垃圾回收机制不定时的回收</p>
</li>
<li><p>2.栈是连续的，所以分配的内存大小要在编译期就确认，大小是固定的；栈只对于线程是可见的，所以也是线程私有，他的生命周期和线程相同（所以说，栈里面是一定不会存在垃圾回收的问题）；栈内存存储一些基本类型的值，对象的引用，方法等；栈内存的更新速度要快于堆内存（仅次于寄存器），因为局部变量的生命周期很短；栈内存存放的变量生命周期一旦结束就会被释放。</p>
</li>
</ul>
<p>面试题：java中的基本数据类型都是存储在栈中的吗？</p>
<p>面试基本上问到这里都是三连，说说八大基本数据类型？说说堆和栈？接下来就是这个有坑的问题</p>
<p>答：不是</p>
<p>一：在方法中声明的变量，即该变量是局部变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因</p>
<p>在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。</p>
<pre><code>（1）当声明是基本类型的对象时，其变量及变量的引用都在栈中。

（2）当声明的是引用类型(new出来的)时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）是放在方法的栈中，该变量所指向的对象是放在堆内存中的。
</code></pre>
<p>二：在类中声明的变量是成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。</p>
<p>同样在类中声明的变量即可是基本类型的变量 也可是引用类型的变量</p>
<pre><code>（1）当为基本类型时，其变量名及其值放在堆内存中的

（2）当为引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中
</code></pre>
<p>扩展–&gt;请根据以下代码说说6个对象的在堆栈中是如何分配的？</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;333&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;333&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<p>结合下面的图来理解String 常量存放的位置：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8uVR5n.png"
                     
                ></p>
<p>题外话：JVM目前有 SUN公司 HotSpot、BEA公司 JRockit、IBM公司 J9VM<br>关于堆在垃圾回收器里面介绍！</p>
<h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><p>类装载器装载负责装载编译后的字节码，并加载到运行时数据区（Runtime Data Area），然后执行引擎执行会执行这些字节码。<br>字节码必须通过类加载过程加载到JVM后才能够被执行，执行有三种模式：</p>
<ul>
<li>1.解释执行</li>
<li>2.JIT（Just-In-Time）编译即执行</li>
<li>3.JIT与解释混合执行<br>来看下执行引擎的简要执行流程：</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8u5DAI.png"
                      alt="JIT"
                ></p>
<p>关于执行引擎这种底层的东西了解即可，说白了就是执行编译后字节码的一套概念模型！执行引擎包含了众多可以操作字节码的执行指令，使程序能够按照一定的顺序执行！关于执行引擎（推荐知乎<a class="link"   href="https://zhuanlan.zhihu.com/p/43324258"  target="_blank">层层剥开JVM——字节码执行引擎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,亦可以推荐孤尽老师《码出高效》一书中的第四章“走进JVM”来深入了解）</p>
<h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p>呼，长出了一口气！终于写到和堆相关的了<br>看堆之前我们先了解下JVM的内存布局：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8uLBfs.png"
                     
                ><br>物理上只有 新生、养老；元空间在本地内存中，不在JVM中！</p>
<p><strong>GC 垃圾回收主要是在 新生区和养老区，又分为 普通的GC  和 Full GC</strong>，如果堆满了，就会爆出 OutOfMemory(OOM);</p>
<blockquote>
<p>新生区</p>
</blockquote>
<p>新生区 就是一个类诞生、成长、消亡的地方！</p>
<p>新生区细分： Eden、s（from   to），所有的类Eden被 new 出来的，慢慢的当 Eden 满了，程序还需要创建对象的时候，就会触发一次轻量级GC；清理完一次垃圾之后，会将活下来的对象，会放入幸存者区（），……. 清理了 20次之后，出现了一些极其顽强的对象，有些对象突破了15次的垃圾回收！这时候就会将这个对象送入养老区！运行了几个月之后，养老区满了，就会触发一次 Full GC；假设项目1年后，整个空间彻彻底底的满了，突然有一天系统 OOM，排除OOM问题，或者重启；</p>
<p>Sun HotSpot 虚拟机中，内存管理（分代管理机制：不同的区域使用不同的算法！）</p>
<p>Eden from to</p>
<p>99% 的对象在 Eden 都是临时对象；</p>
<blockquote>
<p>养老区</p>
</blockquote>
<p>15次都幸存下来的对象进入养老区，养老区满了之后，触发 Full GC</p>
<p>默认是15次，可以修改！</p>
<blockquote>
<p>永久区（Perm）</p>
</blockquote>
<p>放一些 JDK 自身携带的 Class、Interface的元数据；</p>
<p>几乎不会被垃圾回收的；</p>
<p><code>OutOfMemoryError：PermGen</code>  在项目启动的时候永久代不够用了？加载大量的第三方包！</p>
<p>JDK1.6之前： 有永久代、常量池在方法区；</p>
<p>JDK1.7：有永久代、但是开始尝试去永久代，常量池在堆中；</p>
<p>JDK1.8 之后：永久代没有了，取而代之的是元空间；常量池在元空间中；</p>
<p>闲聊：方法区和堆一样，是共享的区域，是JVM 规范中的一个逻辑的部分，但是记住它的别名 <code>非堆</code></p>
<h4 id="jvm内存调优"><a href="#jvm内存调优" class="headerlink" title="jvm内存调优"></a>jvm内存调优</h4><p>来看以下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境:jdk1.8</span></span><br><span class="line"><span class="comment"> * jvm:HotSpot</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  默认情况：</span></span><br><span class="line"><span class="comment"> *  maxMemory : 1808.0MB （虚拟机试图使用的最大的内存量  一般是物理内存的 1/4）</span></span><br><span class="line"><span class="comment"> *  totalMemory : 123.0MB （虚拟机试图默认的内存总量 一般是物理内存的 1/64）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  自定义： -XX:+PrintGCDetails; // 输出详细的垃圾回收信息</span></span><br><span class="line"><span class="comment"> *          -Xmx: 最大分配内存； 1/4</span></span><br><span class="line"><span class="comment"> *          -Xms: 初始分配的内存大小； 1/64</span></span><br><span class="line"><span class="comment"> *          -Xmx1024m -Xms1024m -XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取堆内存的初始大小和最大大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory();</span><br><span class="line">        <span class="type">long</span> <span class="variable">totalMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;maxMemory=&quot;</span>+maxMemory+<span class="string">&quot;(字节)、&quot;</span>+(maxMemory/<span class="number">1024</span>/(<span class="type">double</span>)<span class="number">1024</span>)+<span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;totalMemory=&quot;</span>+totalMemory+<span class="string">&quot;(字节)、&quot;</span>+(totalMemory/<span class="number">1024</span>/(<span class="type">double</span>)<span class="number">1024</span>)+<span class="string">&quot;MB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出信息如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8uvt3j.png"
                      alt="heapSpace"
                ><br>由计算得出(305664K+699392K)&#x2F;1024 &#x3D; 981.5MB<br>说明新生代和老年代内存相加为整个分配内存大小，也从侧面证明了元空间不存在于jvm中，它存在于本地空间中！</p>
<p>–认识了堆后，我们再来聊聊堆的内存调优，这是每个java开发都需要掌握的！<br>模拟oom,看看GC详情：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置内存大小：-Xmx8m -Xms8m -XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.gc(); <span class="comment">// 手动唤醒GC（），等待cpu的调用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;talk is cheap,show me your code&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            str += str</span><br><span class="line">                    + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999999</span>)</span><br><span class="line">                    + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999999</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 出现问题：java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk1.8.0_171\bin\java.exe&quot;</span> -Xmx8m -Xms8m -XX:+PrintGCDetails <span class="string">&quot;-javaagent:D:\idea\IntelliJ IDEA 2019.3.3\lib\idea_rt.jar=63475:D:\idea\IntelliJ IDEA 2019.3.3\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;C:\Program Files\Java\jdk1.8.0_171\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_171\jre\lib\rt.jar;E:\sCloud\studyDemo\out\production\studyDemo&quot;</span> jvm.HeapDemo1</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 1536K-&gt;504K(2048K)] 1536K-&gt;632K(7680K), <span class="number">0.0022005</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (System.gc()) [PSYoungGen: 877K-&gt;488K(2048K)] 1005K-&gt;712K(7680K), <span class="number">0.0017541</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[Full <span class="title function_">GC</span> <span class="params">(System.gc()</span>) [PSYoungGen: 488K-&gt;0K(2048K)] [ParOldGen: 224K-&gt;645K(5632K)] 712K-&gt;645K(7680K), [Metaspace: 3441K-&gt;3441K(1056768K)], <span class="number">0.0181221</span> secs] [Times: user=<span class="number">0.03</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 1249K-&gt;325K(2048K)] 1894K-&gt;971K(7680K), <span class="number">0.0010536</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 1531K-&gt;259K(2048K)] 2960K-&gt;1689K(7680K), <span class="number">0.0009587</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 1532K-&gt;487K(2048K)] 2961K-&gt;2165K(7680K), <span class="number">0.0117368</span> secs] [Times: user=<span class="number">0.02</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 1688K-&gt;128K(2048K)] 6500K-&gt;4940K(7680K), <span class="number">0.1107265</span> secs] [Times: user=<span class="number">0.02</span> sys=<span class="number">0.00</span>, real=<span class="number">0.11</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 128K-&gt;128K(2048K)] 4940K-&gt;4940K(7680K), <span class="number">0.0211234</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs]</span><br><span class="line">[Full <span class="title function_">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 128K-&gt;0K(2048K)] [ParOldGen: 4812K-&gt;2550K(5632K)] 4940K-&gt;2550K(7680K), [Metaspace: 3939K-&gt;3939K(1056768K)], <span class="number">0.0311921</span> secs] [Times: user=<span class="number">0.03</span> sys=<span class="number">0.00</span>, real=<span class="number">0.03</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 138K-&gt;32K(2048K)] 4256K-&gt;4149K(7680K), <span class="number">0.0064069</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 32K-&gt;32K(2048K)] 4149K-&gt;4149K(7680K), <span class="number">0.0007456</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[Full <span class="title function_">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 32K-&gt;0K(2048K)] [ParOldGen: 4117K-&gt;3332K(5632K)] 4149K-&gt;3332K(7680K), [Metaspace: 3942K-&gt;3942K(1056768K)], <span class="number">0.0250859</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2048K)] 3332K-&gt;3332K(7680K), <span class="number">0.0014623</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[Full <span class="title function_">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 0K-&gt;0K(2048K)] [ParOldGen: 3332K-&gt;3277K(5632K)] 3332K-&gt;3277K(7680K), [Metaspace: 3942K-&gt;3942K(1056768K)], <span class="number">0.0241555</span> secs] [Times: user=<span class="number">0.02</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs]</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2048K, used 42K [<span class="number">0x00000000ffd80000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 1536K, <span class="number">2</span>% used [<span class="number">0x00000000ffd80000</span>,<span class="number">0x00000000ffd8a978</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line"> ParOldGen       total 5632K, used 3277K [<span class="number">0x00000000ff800000</span>, <span class="number">0x00000000ffd80000</span>, <span class="number">0x00000000ffd80000</span>)</span><br><span class="line">  object space 5632K, <span class="number">58</span>% used [<span class="number">0x00000000ff800000</span>,<span class="number">0x00000000ffb337e8</span>,<span class="number">0x00000000ffd80000</span>)</span><br><span class="line"> Metaspace       used 3974K, capacity 4568K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">space</span>    used 437K, capacity 460K, committed 512K, reserved 1048576K</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:<span class="number">3332</span>)</span><br><span class="line">	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:<span class="number">124</span>)</span><br><span class="line">	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:<span class="number">674</span>)</span><br><span class="line">	at java.lang.StringBuilder.append(StringBuilder.java:<span class="number">208</span>)</span><br><span class="line">	at jvm.HeapDemo1.main(HeapDemo1.java:<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br><span class="line"><span class="comment">// 分析：GC 普通GC(轻GC)、Full GC 重GC</span></span><br><span class="line"><span class="comment">// 1536K 执行 GC之前的大小,504K  执行 GC之后的大小</span></span><br><span class="line"><span class="comment">// (2048K) young 的total大小 ,(5632K)old 的total 大小 (7680K)整个堆已被占用的大小</span></span><br><span class="line"><span class="comment">// 0.0241555 secs 清理的时间、user 总计GC所占用CPU的时间</span></span><br><span class="line"><span class="comment">// sys OS调用等待的时间   real 应用暂停的时间</span></span><br></pre></td></tr></table></figure></div>
<p>好了，理解这些参数后基本知道怎么调优了。<br>其实Idea 还有一款插件<code>JProfiler</code> 专门用来分析程序内存占用情况的，用<code>JProfiler</code> 可以dump 内存快照帮助我们快速定位问题。教程百度上有，此处不做说明！</p>
<p>注⚠️：JVM在进行GC时，并非每次都是对三个区域进行扫描的！大部分的时候都是指的新生代！</p>
<ul>
<li>普通GC：只针对新生代  【GC】</li>
<li>全局GC：主要是针对老年代，偶尔伴随新生代！ 【Full GC】</li>
</ul>
<h4 id="GC四大算法："><a href="#GC四大算法：" class="headerlink" title="GC四大算法："></a>GC四大算法：</h4><blockquote>
<p>引用计数法</p>
</blockquote>
<p>特点：每个对象都有一个引用计数器，每当对象被引用一次，计数器就+1，如果引用失效，则计数器-1，如果为0，则GC可以清理；</p>
<p>缺点：</p>
<ul>
<li>计数器维护麻烦！</li>
<li>循环引用无法处理！</li>
</ul>
<p>注⚠️：JVM 一般不采用这种方式，现在一般使用可达性算法，GC Root…</p>
<blockquote>
<p>复制算法</p>
</blockquote>
<p>1、一般普通GC 之后，差不多Eden几乎都是空的了！</p>
<p>2、每次存活的对象，都会被从 from 区和 Eden区等复制到 to区，from 和 to 会发生一次交换；记住一个点就好，<strong>谁空谁是to</strong>，每当幸存一次，就会导致这个对象的年龄+1；如果这个年龄值大于15（默认值，后面我们会讲解调整），就会进入养老区；</p>
<p>优点：没有标记和清除的过程！效率高！没有内存碎片！</p>
<p>缺点：需要浪费双倍的空间</p>
<p>Eden 区,对象存活率极低！ 统计：99% 对象都会在使用一次之后，引用失效！推荐使用 <strong>复制算法</strong></p>
<blockquote>
<p>标记清除算法</p>
</blockquote>
<p>老年代一般使用这个，但是会和我们后面的整理压缩一起使用！</p>
<p>优点：不需要额外的空间！</p>
<p>缺点：两次扫描，耗时较为严重，会产生内存碎片，不连续！</p>
<blockquote>
<p>标记清除压缩</p>
</blockquote>
<p>减少了上面标记清除的缺点：没有内存碎片！但是耗时可能也较为严重！</p>
<p>那我们什么时候可以考虑使用这个算法呢？</p>
<p>在我们这个要使用算法的空间中，假设这个空间中很少，不经常发生GC，那么可以考虑使用这个算法！</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结：</span><br><span class="line">内存效率：复制算法 &gt; 标记清除算法 &gt; 标记整理（时间复杂度！）</span><br><span class="line">内存整齐度：复制算法=标记整理&gt;标记清除算法</span><br><span class="line">内存利用率：标记整理 = 标记清除算法 &gt; 复制算法</span><br></pre></td></tr></table></figure></div>
<h4 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h4><p>最后再来看看几个面试题：</p>
<p>1.JVM 垃圾回收的时候如何确定垃圾，GC Roots？</p>
<ul>
<li>引用计数法 （每引用一次就加一，为0或-1就会被GC清除）</li>
<li>可达性分析算法 (如果从 GC Root 这个对象开始，对于没有关联的对象GC认为不可达的，就会被清理)</li>
</ul>
<p>2.什么是GC Root?</p>
<ul>
<li>1、虚拟机栈中引用的对象！</li>
<li>2、类中静态属性引用的对象</li>
<li>3、方法区中的常量</li>
<li>4、本地方法栈中 Native 方法引用的对象！</li>
</ul>
<p>3.jvm 常用参数有哪些，你都用过哪些？</p>
<ul>
<li><p>1、标配参数：<code>-version</code>,<code>-help</code>,<code>-showversion</code></p>
</li>
<li><p>2、X参数：<code>-Xint</code> # 解释执行，<code>-Xcomp</code> # 第一次使用就编译成本地的代码，<code>-Xmixed</code> # 混合模式（Java默认）</p>
</li>
<li><p>3、XX参数：+ 或者 - 某个属性值， + 代表开启某个功能，- 表示关闭了某个功能  例如:<code>jps -l</code> ,<code>jinfo -flag PrintGCDetail 进程号</code> # 查看某个运行中的java 程序，<code>-XX:+PrintGCDetails</code> # 打印GC详情</p>
</li>
<li><p>4.XX 参数之key &#x3D; value值；例如：元空间大小：<code>-XX:MetaspaceSize=128m</code>#设置元空间大小，<code>-XX:MaxTenuringThreshold=15</code>#设置新生代需要经历多少次GC晋升到老年代中的最大阈值(默认值是15，最大也是15)</p>
</li>
<li><p>1).<code>-Xms</code> 初始堆的大小，等价： <code>-XX:InitialHeapSize</code></p>
</li>
<li><p>2).<code>-Xmx</code> 最大堆的大小 ，等价：<code>-XX:MaxHeapSize</code></p>
</li>
</ul>
<p><code> -XX:+PrintFlagsInitial</code> 查看 java 环境初始默认值；这里面只要显示的值，我们都可以手动赋值，不建议修改，了解即可！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/13/8KFXse.png"
                     
                ><br><code>=</code> 默认值</p>
<p><code>:=</code>  就是被修改过的值</p>
<p><code>java -XX:+PrintCommandLineFlags -version</code>  打印出用户手动选项的 XX 选项</p>
<p>4.你常用的项目，发布后配置过JVM 调优参数吗？</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms</span><br><span class="line">-Xmx</span><br><span class="line">-Xss  : 线程栈大小设置，默认 512k~1024k</span><br><span class="line">-Xmn  设置年轻代的大小，一般不用动！</span><br><span class="line">-XX:MetaspsaceSize  设置元空间的大小，这个在本地内存中！</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:SurvivorRatio</span><br><span class="line">设置新生代中的 s0/s1 空间的比例；</span><br><span class="line">`uintx SurvivorRatio  = 8`  Eden：s0：s1 = 8:1:1</span><br><span class="line">`uintx SurvivorRatio  = 4`  Eden：s0：s1 = 4:1:1</span><br><span class="line">-XX:NewRatio</span><br><span class="line">设置年轻代与老年代的占比：</span><br><span class="line">`NewRatio  = 2`   新生代1，老年代是2，默认新生代整个堆的 1/3;</span><br><span class="line">`NewRatio  = 4`   新生代1，老年代+是4，默认新生代整个堆的 1/5;</span><br><span class="line">-XX:MaxTenuringThreshold</span><br><span class="line">进入老年区的存活阈值；</span><br><span class="line">`MaxTenuringThreshold  = 15`</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>小结：至此JVM的知识，基本已总结完成，推荐书《码出高效》;买了很多书但是一直没看，我新增了栏目“拆书” 有时间会把买的书啃完了谢谢心得体会，或者看到精彩的地方会分享出来，当然不至于技术一类。为能看到这儿的自己点个赞吧，加油！</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个递归封装树形结构</title>
    <url>/2021/0423/recursion-for-tree.html</url>
    <content><![CDATA[<blockquote>
<p>最近改了个小bug，原有的数据字典查询，封装成树的递归写的有问题，就自己写了一个，解决这种递归的思考是：分析树形结构–&gt;&gt;找到父子层之间的关联关系–&gt;&gt;根据关系编写递归嵌套条件。代码很简单也很实用，遂总结如下</p>
</blockquote>
<h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>截取表结构如下,关联id 和pid(父id).其中树最外层pid为0</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/28/tVoaLT.png"
                     
                ></p>
<p>代码逻辑</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getRootDict</span><span class="params">()</span> &#123;</span><br><span class="line">	List&lt;Map&lt;String, Object&gt;&gt; returnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="comment">// 查询所有数据字典</span></span><br><span class="line">	List&lt;Map&lt;String, Object&gt;&gt; dictList = dictMapper.getAllDict();</span><br><span class="line">	Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;数据字典&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;id&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">	map.put(<span class="string">&quot;pid&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构建树形结构</span></span><br><span class="line">	List&lt;Map&lt;String, Object&gt;&gt; rootTree = <span class="built_in">this</span>.rebuildRootTree(<span class="string">&quot;0&quot;</span>,dictList);</span><br><span class="line">	map.put(<span class="string">&quot;child&quot;</span>, rootTree);</span><br><span class="line">	returnList.add(map);</span><br><span class="line">	<span class="keyword">return</span> returnList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建树结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dictList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">rebuildRootTree</span><span class="params">(String pid ,List&lt;Map&lt;String, Object&gt;&gt; dictList)</span>&#123;</span><br><span class="line">	List&lt;Map&lt;String, Object&gt;&gt; rootTree = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span>(Map&lt;String, Object&gt; dictMap:dictList)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dictMap.containsKey(<span class="string">&quot;pid&quot;</span>) &amp;&amp; Objects.equals(dictMap.get(<span class="string">&quot;pid&quot;</span>).toString(),pid)) &#123;</span><br><span class="line">			Map&lt;String, Object&gt; newMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">			newMap.put(<span class="string">&quot;name&quot;</span>, dictMap.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">			newMap.put(<span class="string">&quot;id&quot;</span>, dictMap.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">			newMap.put(<span class="string">&quot;pid&quot;</span>, dictMap.get(<span class="string">&quot;pid&quot;</span>));</span><br><span class="line">			<span class="comment">//递归调用</span></span><br><span class="line">			newMap.put(<span class="string">&quot;child&quot;</span>,<span class="built_in">this</span>.rebuildRootTree((dictMap.get(<span class="string">&quot;id&quot;</span>)).toString(),dictList));</span><br><span class="line">			rootTree.add(newMap);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> rootTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>若为实体，替换为对应的实体类即可；好了，就酱！日常生活的小技巧，还是总结下</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>手撸两个注解</title>
    <url>/2021/0428/double-annotation.html</url>
    <content><![CDATA[<blockquote>
<p>项目中很多地方的重复轮子都可以抽出来用AOP切面的形式搞定，这次我们就来撸两个注解玩下</p>
</blockquote>
<h3 id="TimerLog注解打印耗时"><a href="#TimerLog注解打印耗时" class="headerlink" title="TimerLog注解打印耗时"></a>TimerLog注解打印耗时</h3><p>项目中，我们经常打印日志看下逻辑的耗时，大家都是各写各的搞的很不规范，那么我们为何不弄个注解，用的时候方法上加上不就可以了；</p>
<p>自定义切面需要引入Aspect的jar包：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>自定义TimerLog注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TimerLog &#123;</span><br><span class="line">    TimerTypeEnum <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> TimerTypeEnum.MILL_SECOND;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>TimerPrinter 打印日志切面类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; TIMER_LONG_LOCAL=<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Long&gt;()&#123;</span><br><span class="line">        <span class="keyword">protected</span> Long <span class="title function_">initValue</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.example.demo.aop.TimerLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        TimerPrinter.start(signature.getDeclaringTypeName(),signature.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">TimerLog</span> <span class="variable">annotation</span> <span class="operator">=</span> ((MethodSignature)signature).getMethod().getAnnotation(TimerLog.class);</span><br><span class="line">        <span class="type">TimerTypeEnum</span> <span class="variable">typeEnum</span> <span class="operator">=</span> annotation.type();</span><br><span class="line">        TimerPrinter.end(signature.getDeclaringTypeName(),signature.getName(),typeEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(String className,String methodName)</span> &#123;</span><br><span class="line">        TIMER_LONG_LOCAL.set(System.currentTimeMillis());</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;]-[&#123;&#125;] start...&quot;</span>,className,methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(String className,String methodName)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;[]-[] total use time: [&#123;&#125;]&#123;&#125;&quot;</span>,className,methodName,buildTime(<span class="literal">null</span>),TimerTypeEnum.MILL_SECOND.value);</span><br><span class="line">        TIMER_LONG_LOCAL.get().intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(String className,String methodName,TimerTypeEnum timerTypeEnum)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;[]-[] total use time: [&#123;&#125;]&#123;&#125;&quot;</span>,className,methodName,buildTime(timerTypeEnum),TimerTypeEnum.MILL_SECOND.value);</span><br><span class="line">        TIMER_LONG_LOCAL.get().intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">buildTime</span><span class="params">(TimerTypeEnum typeEnum)</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">useTime</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">totalTime</span> <span class="operator">=</span> System.currentTimeMillis()-TIMER_LONG_LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == typeEnum)&#123;</span><br><span class="line">            useTime = totalTime;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(typeEnum,TimerTypeEnum.SECOND))&#123;</span><br><span class="line">            useTime = totalTime/<span class="number">1000</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(typeEnum,TimerTypeEnum.MINUTE))&#123;</span><br><span class="line">            useTime = totalTime/<span class="number">6000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  useTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="自定义截取字段长度注解"><a href="#自定义截取字段长度注解" class="headerlink" title="自定义截取字段长度注解"></a>自定义截取字段长度注解</h3><p>现在有个需求，为了提高某个页面的性能，页面中的某个字段是需要我们批量去调外部接口查询的，但是导出数据量较大，实时循环查询就算异步的话也要很久；<br>这个时候，不考虑数据实时性的时候，我们一般采用定时任务将接口返回的数据，落地到我们自己的库中，但很多时候我们并不能准确的知道第三方接口返回的字段长度；<br>为了确保数据库入库是塞值不报错，我们需要在入库前对字段截取后再存入(前提是这个字段，这边不要求数据完整性)；目前项目中有遇到个别数据有超长的情况，我们还是用注解加反射的方式解决</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DefFieldLength &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefinedUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义序列化时按注解截取 字段的长度</span></span><br><span class="line"><span class="comment">     * 注：只对string Integer Long类型字段生效</span></span><br><span class="line"><span class="comment">     * 其他例如Double BigDecimal float等有精度的字段 需要自行确认精度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> needSerializeList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">defSerialize</span><span class="params">(List&lt;T&gt; needSerializeList)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(needSerializeList))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Field&gt; allFields = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">        <span class="type">T</span> <span class="variable">firstT</span> <span class="operator">=</span> needSerializeList.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = firstT.getClass();</span><br><span class="line">        allFields.addAll(Arrays.stream(aClass.getDeclaredFields()).collect(Collectors.toList()));</span><br><span class="line">        Class&lt;?&gt; superClass = aClass.getSuperclass();</span><br><span class="line">        <span class="comment">// 当其父类不为Object时 停止获取属性</span></span><br><span class="line">        <span class="keyword">while</span> (superClass != Object.class)&#123;</span><br><span class="line">            Field [] declaredFields = superClass.getDeclaredFields();</span><br><span class="line">            <span class="keyword">if</span>(declaredFields.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                List&lt;Field&gt; collect= Arrays.stream(declaredFields).collect(Collectors.toList());</span><br><span class="line">                allFields.addAll(collect);</span><br><span class="line">            &#125;</span><br><span class="line">            superClass =superClass.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(allFields))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Field&gt; distinctFieldList = allFields.stream().distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        needSerializeList.stream().forEach(t-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(Field field:distinctFieldList)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!field.isAnnotationPresent(DefFieldLength.class))&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">fieldVal</span> <span class="operator">=</span> field.get(t);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="literal">null</span> == fieldVal)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">DefFieldLength</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(DefFieldLength.class);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">annotationLen</span> <span class="operator">=</span> annotation.length();</span><br><span class="line">                    <span class="keyword">if</span>(field.toString().length()&lt;= annotationLen)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">finalStr</span> <span class="operator">=</span> fieldVal.toString().substring(<span class="number">0</span>,annotationLen);</span><br><span class="line">                    setFieldVal(t,field,fieldVal,finalStr);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setFieldVal</span><span class="params">(T t,Field field,Object fieldVal,String value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span>(fieldVal <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            field.set(t,value);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fieldVal <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">            field.set(t,Integer.valueOf(value));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fieldVal <span class="keyword">instanceof</span> Long)&#123;</span><br><span class="line">            field.set(t,Long.valueOf(value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>小结：如上我们定义好了两个注解，实现了一个简单耗时打印的功能和一个自定义截取字段长度的功能，也展示了泛型和反射在我们开发中的应用；<br>思考：如果一个类中，方法A 方法B 都加了TimerLog注解，A中调用了B，两个注解都能生效吗？为什么？</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>aspect</tag>
      </tags>
  </entry>
  <entry>
    <title>链表&amp;二叉树&amp;平衡二叉树&amp;红黑树</title>
    <url>/2021/0423/balance-tree.html</url>
    <content><![CDATA[<blockquote>
<p>当你还不能对自我说这天学到了什么东西时，你最好就不要去睡觉</p>
</blockquote>
<p>最近也在看HashMap相关的东西，你知道的这基本是面试必问的东西；据说很多兄弟都是败在了HashMap的夺命连环问上的，然后铭心自问发现自己也说不清楚；那怎么办呢？当然是硬着头皮上呗，在研究HashMap的原理前，我们是需要了解了解下链表、二叉树、平衡二叉树、红黑树这些数据结构的；特别说明下，本文只是为了说清楚各种数据结构的概念及特点，对于更深层次的算法探究这里不作扩展！</p>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表是一种物理存储结构上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的；</p>
<p>它的数据结构如下图所示（注意：这里的指针实际上指的是存储的pre节点对next节点数据的引用地址！）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/22/UHsQsS.png"
                      alt="链表"
                ></p>
<p>从图中，我们可以了解到：</p>
<ul>
<li>链表在物理结构上是不连续的</li>
<li>它是大小是不确定的，链表的大小可以动态的按需分配的</li>
<li>对于尾节点来说，它的指针为null</li>
<li>在数据结构上来说，它是连续的，通过指针连续，故没有内存空间的浪费</li>
</ul>
<p>链表的优点：</p>
<ul>
<li>增，删节点效率高；因为只需要改变前面节点和当前节点的指针就可以了</li>
<li>链表在物理结构上是不连续的，所以对内存的利用率是极高的（内存就像一个杯子，链表这种结构每个节点就相当于一粒粒沙子，只要有点空间都可以利用，即它不要求连续的大空间）</li>
<li>链表的大小可以动态增减，可以做到灵活扩展</li>
</ul>
<p>链表的缺点：</p>
<ul>
<li>查询效率低；当查询某个节点，因为它是散乱分布的；并不知道每个节点的具体位置，所以不得不遍历获取！</li>
</ul>
<p>上图所示的只是一个单链表，其实链表还有很多种，例如双向链表，循环单链表，循环双链表等；对于链表的更多知识，请参考博客：<a class="link"   href="https://www.cnblogs.com/baixianlong/p/10759599.html"  target="_blank">数据结构–基于java的链表实现 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是一种每个节点最多只有两个分支节点的树形的数据结构，它的数据结构如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/22/UHTvIx.png"
                      alt="二叉树"
                ></p>
<p>从图中，我们可以了解到：</p>
<ul>
<li>二叉树每个节点最多两个子节点</li>
<li>处于顶层的是根节点；处于同一层的，同一个父节点的是兄弟节点</li>
<li>没有子节点的是叶节点（叶子就是末梢了，不会再长出新的东西来）</li>
</ul>
<p>二叉树的子节点，又可以称为左子节点和右子节点；二叉树的优点是增删查都快，缺点是算法复杂；</p>
<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>了解平衡二叉树之前，我们需要知道 <strong>二叉查找树</strong>，二叉查找树是一种有特殊规范的二叉树，二叉查找树又被称为二叉搜索树、有序二叉树、排序二叉树；</p>
<p>那什么样的树才叫二叉查找树呢？看下图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/22/UHLuAs.png"
                      alt="二叉查找树"
                ></p>
<p>上图就是一个标准的二叉查找树，它符合以下的规范：</p>
<ul>
<li>若任意节点的左子树不为空，则左子树的值均小于它根节点的值；</li>
<li>若任意节点的右子树不为空，则右子树的值均大于它根节点的值；</li>
<li>任意节点的左子树，右子树都为二叉查找树（开始套娃了，哈哈）；</li>
</ul>
<p>那么什么叫平衡二叉树呢？为啥非得要说清楚二叉查找树再说平衡二叉树呢？</p>
<p>其实所谓的平衡二叉树是指改进的二叉查找树，为了减少二叉查找树的深度，平衡二叉树将二叉查找树的节点平均的分布；一般而言，随着树的深度提高查询的平均复杂度就会提高，因此为了实现更好的查询效率就提出了平衡二叉树的这一数据结构！</p>
<p>如下图，我们看下非平衡二叉树和平衡二叉树的区别：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/22/UHXw6K.png"
                      alt="非平衡二叉树&amp;平衡二叉树"
                ></p>
<p>其实平衡二叉树比二叉查找树多了个平衡的特点，它体现在：平衡二叉树的任意节点的左子树高度和右子树高度差值都不能大于1；</p>
<p>这里需要说明一个平衡因子的概念：我们将二叉树上节点的左子树深度减去右子树深度的值称为<strong>平衡因子BF（Balance Factor）</strong>,那么平衡二叉树上所有节点的平衡因子只可能是-1，0，1；只要二叉树上有一个节点的平衡因子的绝对值大于1，则该二叉树就是不平衡的；</p>
<p>那么当扩展到N个节点来看，平衡二叉树优势明显；它显著的减少了查询的深度，从而提高了查询的效率；</p>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>了解了平衡二叉树后，我们再来看下什么样的树叫红黑树；如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/22/UbPb4S.png"
                      alt="红黑树"
                ></p>
<p>红黑树除了具有二叉查找树的基本特点外，还具有以下几个特点：</p>
<ul>
<li>各节点是红色或黑色，根节点是黑色</li>
<li>所有的叶子节点都是空节点（NIL节点）且是黑色</li>
<li>每个红色的节点都必须有两个黑色的子节点（每个叶子节点到根节点的路径上不能有连续的两个红色节点）</li>
<li>每个节点到该节点下的子孙节点的所有路径上，包含同等数目的黑色节点</li>
</ul>
<p>红黑树的优点：相对于普通的二叉树来说，普通的二叉树可能退化为链表的形式，那么时间复杂度会退化到O(n);而红黑树是一种在平衡二叉树上又添加了新特点的树形结构，它的高度趋近于log2n，它的添加删除查询的时间复杂为O(log n)。</p>
<p>红黑树是一种自平衡的平衡二叉树，它保持自平衡和红黑树特点的方式是：变色，左旋和右旋；</p>
<blockquote>
<p>对比AVL树</p>
</blockquote>
<p>AVL树也是一种自平衡树（本质也是一种二叉排序树，二叉搜索树，只是在此之上增加了平衡的特点），它和红黑树的不同在于，它增加了节点高度的属性，保存了各个节点的高度信息（以确保各节点的平衡因子绝对值不大于1）；而红黑树也包含了ACV的特性，只是实现不同，它增加了红黑属性的定义，更加简单的确保了树的再平衡计算，并且相比较每个节点记录高度信息来说，节省了内存；</p>
<blockquote>
<p>小结：关于链表，二叉树，平衡二叉树，红黑树的概念及其理解就先总结到这里；后面我们将继续了解，HashMap的底层实现，接下来就是巴源码啦，看看头发好像还能肝下去，奥利给！</p>
</blockquote>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2021/0423/wei-operation.html</url>
    <content><![CDATA[<blockquote>
<p>再肝HashMap之前，还是需要了解位运算滴</p>
</blockquote>
<p>接上篇，我们总结了链表乃至红黑树的概念及其理解；准备去扒源码的，发现里面一堆位运算；这写的都是啥啥啥？脑海中不自觉的浮现了这个表情包，可以说再形象不过了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/07/23/Uq2euq.jpg"
                     
                ><br>哈哈哈，想想这东西搞清楚了可以更好的阅读源码乃至装逼,心情不无激动了哈。废话不多说，咱们开干！</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>我们知道，所有的数字及字符在计算机中都是以二进制存储的，而位运算就是直接对二进制数据进行操作。</p>
<p>不同于我们普通的加减乘除操作，位运算符如下：</p>
<ul>
<li>位与运算：&amp;</li>
<li>位或运算：|</li>
<li>位异或运算：^</li>
<li>位左移运算：&lt;&lt;</li>
<li>位右移运算：&gt;&gt;</li>
<li>无符号右移：&gt;&gt;&gt;</li>
<li>位取反运算：~</li>
</ul>
<p>当然，和加减乘除一样，运算时有个先后顺序（先乘除后加减），位运算也有它的先后顺序；按优先级排序如下：</p>
<table>
<thead>
<tr>
<th align="center">1 取反</th>
<th align="center">2 左右位移</th>
<th align="center">3 位与</th>
<th align="center">4 位异或</th>
<th align="center">5 位或</th>
</tr>
</thead>
<tbody><tr>
<td align="center">~</td>
<td align="center">&lt;&lt;<br>&gt;&gt;</td>
<td align="center">&amp;</td>
<td align="center">^</td>
<td align="center">|</td>
</tr>
</tbody></table>
<p>我们知道二进制中只有0和1的概念（1 理解为在对应的位数上有值，为真！0理解为在对应的位数上没有值，为假），我们举例说明如下：</p>
<h3 id="用法栗子"><a href="#用法栗子" class="headerlink" title="用法栗子"></a>用法栗子</h3><blockquote>
<p>位与 &amp;（同真则真，同假则假，不同则假）</p>
</blockquote>
<ul>
<li>1 &amp; 1 &#x3D; 1；</li>
<li>0 &amp; 0 &#x3D; 0；</li>
<li>1 &amp; 0 &#x3D; 0；</li>
</ul>
<p>关于10进制转二进制这里就不在赘述了（除二取余），例如：5 &amp; 6 &#x3D; 4；我们看下怎么来的：</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>二进制（8位）</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>0000 0101</td>
</tr>
<tr>
<td>6</td>
<td>0000 0110</td>
</tr>
<tr>
<td>取&amp;</td>
<td>0000 0100   &#x3D; 1* 2的平方 &#x3D; 4</td>
</tr>
</tbody></table>
<blockquote>
<p>位或 |（同真则真，同假则假，不同则真）</p>
</blockquote>
<ul>
<li>1 | 1 &#x3D; 1；</li>
<li>0 | 0 &#x3D; 0；</li>
<li>0 | 1 &#x3D; 1；</li>
</ul>
<p>例如：5 | 6 &#x3D; 7；我们看下怎么来的：</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>二进制（8位）</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>0000 0101</td>
</tr>
<tr>
<td>6</td>
<td>0000 0110</td>
</tr>
<tr>
<td>取&amp;</td>
<td>0000 0111   &#x3D; 1* 2的平方 + 1*  2+1* 2的0次方 &#x3D; 7</td>
</tr>
</tbody></table>
<blockquote>
<p>位异或 ^（同真同假则假，不同则真）</p>
</blockquote>
<ul>
<li>1 ^ 1 &#x3D; 0;</li>
<li>0 ^ 0 &#x3D; 0;</li>
<li>0 ^ 1 &#x3D; 1;</li>
</ul>
<p>例如： 5 ^ 6 &#x3D; 3;我们看下怎么来的：</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>二进制（8位）</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>0000 0101</td>
</tr>
<tr>
<td>6</td>
<td>0000 0110</td>
</tr>
<tr>
<td>取^</td>
<td>0000 0011   &#x3D; 1*  2+1* 2的0次方 &#x3D; 3</td>
</tr>
</tbody></table>
<blockquote>
<p>左移（&lt;&lt;)</p>
</blockquote>
<p>左移就是将一个二进制的数据整体向左移动，正数后面虚位补0（负数后面虚位补1,例子略）；例如：2 &lt;&lt; 2 &#x3D; 8;</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>二进制（8位）</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>0000 0010</td>
</tr>
<tr>
<td>&lt;&lt; 2(左移2位)</td>
<td>0000 1000</td>
</tr>
<tr>
<td></td>
<td>1* 2的三次方 &#x3D; 8</td>
</tr>
</tbody></table>
<blockquote>
<p>右移（&gt;&gt;）</p>
</blockquote>
<p>右移就是将一个二进制的数据整体向右移动，前面虚位补0（负数前面虚位补1，,例子略）；例如： 6 &gt;&gt; 2 &#x3D; 1;</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>二进制（8位）</th>
</tr>
</thead>
<tbody><tr>
<td>6</td>
<td>0000 0110</td>
</tr>
<tr>
<td>&gt;&gt; 2(右移2位)</td>
<td>0000  0001</td>
</tr>
<tr>
<td></td>
<td>1* 2的0次方 &#x3D; 1</td>
</tr>
</tbody></table>
<blockquote>
<p>无符号右移&gt;&gt;&gt;</p>
</blockquote>
<p>无符号右移，不论正数负数都补0；因为无符号右移只在32位或64位下才有意义，这里不再讨论；</p>
<blockquote>
<p>取反~</p>
</blockquote>
<p>取反就是在原有的数字上加1然后取反就是了，公式如下：~ x &#x3D; - (x + 1);例如：~ 5 &#x3D; - (5+1) &#x3D; -6;</p>
<p>好，至此位运算的方法已经总结完了；我们来看下结合几个简单的算法题来看下位运算具体可以怎么用，又是如何给我们的计算带来便捷的。</p>
<h3 id="算法栗子"><a href="#算法栗子" class="headerlink" title="算法栗子"></a>算法栗子</h3><blockquote>
<p>一. 交换变量</p>
</blockquote>
<p>我们还记得冒泡算法，有个交换变量的过程；</p>
<p>大体过程如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 定义的临时变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">temp = a; a = b; b = temp;</span><br><span class="line"><span class="comment">// temp = 1; a = 2; b = 0;</span></span><br></pre></td></tr></table></figure></div>

<p>这里临时变量的做法其实是用空间换时间，这样做是需要额外的存储空间的；那么我们采用位异或^运算就可以解决这个问题：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure></div>

<p>这样就可以了？这样就可以达到交换的目的？哈哈，是不是还有点懵；别急，读懂下面这三行代码还需要知道异或运算的一些性质：</p>
<ul>
<li>位异或满足交换定律：<code>a ^ b = b ^ a</code>;</li>
<li>位异或满足结合定律：<code>（a ^ b）^ c = a ^（b ^ c)</code>;</li>
<li>任何数和0异或都是它自己：<code>x ^ 0 = x</code>;</li>
</ul>
<p>了解了这些后，我们再看看上面三个式子：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">a = a ^ b; <span class="comment">// 第一步</span></span><br><span class="line">b = a ^ b; <span class="comment">// 第二步</span></span><br><span class="line">a = a ^ b; <span class="comment">// 第三步</span></span><br><span class="line"></span><br><span class="line">将 a = a^b 代入 第二步中根据异或法则（同真同假则假，不同则真）：</span><br><span class="line">b = a^b^b = a^<span class="number">0</span> = a;</span><br><span class="line"></span><br><span class="line">将 b=a^b 代入 第三步中根据异或法则（同真同假则假，不同则真）：</span><br><span class="line">a = a^a^b = <span class="number">0</span>^b = b;</span><br><span class="line"></span><br><span class="line">这样就完成了数值的交换，是不是有点意思了；那咱们继续！</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>二. 2的幂运算</p>
</blockquote>
<p>假设给定一个数，我们需要判断一个数是否是2的多少次幂，如果是则返回true,不是则返回false;</p>
<p>通常我们怎么做呢？写一个循环，然后一直除以2当能除净且除到最后值为1时，我们判断这个值为2的幂返回true;</p>
<p>通常我们怎么写呢？示例如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> checkMi(<span class="number">8</span>);</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkMi</span><span class="params">(<span class="type">float</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        x = x/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么这种写法算是很普通的写法了，逼格不够高哈！我们来看看位运算一般怎么解决的：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> x&amp;(x-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> x&gt;<span class="number">1</span> &amp; z == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>是不是少了很多代码，也显得逼格满满！哈哈，要读懂这行代码，我们需要明白什么样的数才是2的幂。来看下列数据找下规律：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1： 0000 0001</span><br><span class="line">2： 0000 0010</span><br><span class="line">3： 0000 0011</span><br><span class="line">4： 0000 0100</span><br><span class="line">7： 0000 0111</span><br><span class="line">8： 0000 1000</span><br><span class="line">15：0000 1111</span><br><span class="line">16：0001 0000</span><br><span class="line">...以此类推，我们知道类似于这样的的高位数都是1，低位数都是0的数才能是2的幂</span><br></pre></td></tr></table></figure></div>

<p>对于1，3，7，15这样的数都是高位是0低位都是1的数；所以此时<code>x&amp;(x-1)==0</code></p>
<blockquote>
<p>三. 找不同</p>
</blockquote>
<p>假如给出一个字符串s1,然后将s1字符串中字符顺序打乱，再加入一个新的字符生成一个s2,让你比较这两个字符串找出新插入的字符；</p>
<p>例如：String s1 &#x3D; “abca”;加入一个新字符”x”,String s2 &#x3D; “bacxa”,请你设计一个算法找出新插入的字符”x”;我想我们大多数人的想法就是用获取每个字符的HashCode，并记录每个字符出现的次数；然后比较两个字符串中，每个字符的出现次数；直到在s2中找到出现一次的”x”为止；算法我就不写了，感兴趣的同学可以自己尝试写下；我们这里重点说下利用位运算怎么实现：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abca&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;bacxa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(findChar(s1,s2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">findChar</span><span class="params">(String s1, String s2)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        first ^= Integer.valueOf(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span>)first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>有没有被惊艳到？哈哈，我们还是来看下这个算法：我们这里用了异或这个位运算（同真同假则假，不同则真）；其次<code>Integer.valueOf(s.charAt(i))</code>是获取每个字符的Ascii码。这里就不计算每个字符的Ascii码了，就拿的值“53135”举例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0^5^3^1^3^5 = 0^(5^5)^(3^3)^1 = 0^0^0^1 = 1;//就酱紫找到了多出来的那个数了</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>四. “1”个数的奇偶</p>
</blockquote>
<p>假设给定一个8位的二进制，我们要统计下这个8个数字中1的个数的奇偶；若为奇数个则返回1，若为偶数个则返回0；例如：0011 0111共有5个1，则返回1；这里我们就不讨论平常的做法了哈，我们直接来位运算的实现：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> <span class="string">&quot;00010110&quot;</span>;</span><br><span class="line">    System.out.println(findOddEven(number));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findOddEven</span><span class="params">(String number)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        count += Integer.parseInt(String.valueOf(number.charAt(i))) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们来解释下：这段代码就是运用了位与运算，<code>Integer.parseInt(String.valueOf(number.charAt(i))) &amp; 1</code>取出每一个数字和1与运算；为1则count自增1；这点和我们自己写代码完全一致哈，关键是后面这句<code>count &amp; 1</code>；count 是偶数返回0，是奇数返回1；我们知道用位与运算，同真则真，同假则假，不同则假；1的8位二进制是<code>0000 0001</code>那么任何数和它位与运算，高位都会被抵消掉变成0，那么最关键的就是看最后一位了是不是1了；很明显，最后一位为1的就是奇数，否则为偶数；这个算法正是运用了这一点；</p>
<p>同理，更牛掰的写法如下（但是可读性不好）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = n^(n&gt;&gt;1)</span><br><span class="line">n = n^(n&gt;&gt;2)</span><br><span class="line">n = n^(n&gt;&gt;4)</span><br><span class="line">return n &amp; 1</span><br><span class="line">//这里的n代表循环中每一个元素 这个可以自行推导下</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>小结：关于位运算就先总结到这儿；算法的例子皆来源于LeetCode（还是要多去上面多摩擦摩擦智商）；搞懂这些后我们再来掰扯下那些源码，相信肯定不会再那么痛苦！</p>
</blockquote>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度&amp;空间复杂度</title>
    <url>/2021/0423/time-space-complexity.html</url>
    <content><![CDATA[<blockquote>
<p>老说时间复杂度，空间复杂度，能不能简单描述一下？说人话！</p>
</blockquote>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Space Complexity,对一个算法在运行过程中临时占用存储度空间的度量，记做<code>S(n)=O(f(n))</code>;</p>
<p>其实白话就是，一段程序运行需要分配的空间，我们用一个线性函数来描述它的变化趋势，我们把这个变化趋势整体就叫做这个算法的空间复杂度！</p>
<p>来看以下代码示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">b+=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">mi</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">int</span>)Math.pow(n,mi);</span><br><span class="line"><span class="type">int</span> [] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br></pre></td></tr></table></figure></div>

<p>那么上面一段代码的空间复杂度分别怎么表示呢？</p>
<p>可以看到因为a,b,c 三个变量都是加减操作，存储空间根据字节长度有关，它们的字节都是线性增长的，所以它的空间复杂度我们记做：<br>$$<br>S(n)&#x3D;O(1)<br>$$<br>arr 数组分配的空间和它的初始长度n 相关，所以它的空间复杂度我们记做：<br>$$<br>S(n) &#x3D; O(n);<br>$$<br>arr1 数组分配的空间和它的初始长度m 相关，而m 是n的mi次方即: <code>m = n^mi</code></p>
<p>这里是mi为2, 则arr1的空间复杂度我们记做：<br>$$<br>S(n) &#x3D; O(n^2)<br>$$</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>Time Complexity, 对一个算法运行时所需要消耗的时间的度量，记做：<code>T(n) = O(n)</code>;</p>
<p>白话理解就是一个程序运行所需要的时间，我们并不是直接描述它占用时间的长短，而是从宏观上评估它的所消耗时间的一个趋势，而它的变化趋势我们也可以用各种线性函数来表示（即所写代码的执行次数和什么相关的函数），那这种线性函数的描述方式我们叫做时间复杂度；</p>
<p>来看以下代码示例：</p>
<h4 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">count = i + j + k;</span><br></pre></td></tr></table></figure></div>

<p>从上面代码我们可以看到，这段代码程序是自上向下执行一次的，那么对于这种只执行一次的代码时间复杂度我们记做：<br>$$<br>T(n)&#x3D;O(1)<br>$$</p>
<h4 id="O-log3n"><a href="#O-log3n" class="headerlink" title="O(log3n)"></a>O(log3n)</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">    i=<span class="number">3</span>*i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在上面代码中，while循环每次i都自增3倍，如果自增x次后i&gt;n就退出循环了，也就是3的x次方时退出了循环，可以确定的是x次循环后i一定是一个大于n的某个值，在时间复杂度的考量中我们将此值忽略直接记做n,那么3的x次方等于n,成对数即是<code>x = log(3)(n)</code>。说明这段代码的执行次数x 是个对数函数，对应的时间复杂度我们记做：<br>$$<br>T(n) &#x3D; O(log_3n)<br>$$</p>
<h4 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面代码是一个简单的for循环，那么很明显它的执行次数和n的大小有关，我们将这种for循环的时间复杂度记做：<br>$$<br>T(n)&#x3D;O(n)<br>$$</p>
<h4 id="O-nlogN"><a href="#O-nlogN" class="headerlink" title="O(nlogN)"></a>O(nlogN)</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n)&#123;</span><br><span class="line">        j = <span class="number">2</span>*j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在上面一段代码中，我们可以看到for循环中每次都对i 重新做了赋值操作;</p>
<p>保证 while 循环每次都能执行<code>log(2)(n)</code>次，那么它总的执行次数就是<code>n*log(2)(n)</code>, 那么这个时候决定执行的次数的关键就在于n的大小了，至于是2倍还是几倍的增长变得不再那么重要，我们可以忽略（极限思维）统一记做N。那么它的时间复杂度我们就记做：<br>$$<br>T(n)&#x3D; O(nlogN)<br>$$</p>
<h4 id="O-n-k"><a href="#O-n-k" class="headerlink" title="O(n^k)"></a>O(n^k)</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面代码三个for循环，明显执行了n* n * n即n^3,它的时间复杂度我们记做：<br>$$<br>T(n) &#x3D; O(n^3)<br>$$</p>
<h4 id="O-2-n-，O-n"><a href="#O-2-n-，O-n" class="headerlink" title="O(2^n)，O(n!)"></a>O(2^n)，<strong>O(n!)</strong></h4><p>实际上幂指数增长和穷举，基本没有见过这样的程序，你想什么样的算法会是指数性的和穷举型的？（网络攻击？这两个不常见，了解即可）</p>
<h4 id="常见时间复杂度函数图"><a href="#常见时间复杂度函数图" class="headerlink" title="常见时间复杂度函数图"></a>常见时间复杂度函数图</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/28/J5Fsn1.png"
                     
                ></p>
<p>从图中我们可以看到趋势越陡的函数时间复杂度肯定大，那么以上的时间复杂度从大到小依次是：<br><code>2^n &gt; (n^3)/3 &gt; 5n^2 &gt; 500log(2)(n) &gt; 100n</code></p>
<p>那么我们可以推断出常见的时间时间复杂度从大到小依次是：<br>$$<br>O(2^n) &gt; O(n^3)&gt;O(n^2)&gt;O(nlog_2n)&gt;O(n)&gt;O(log_2n)&gt;O(1)<br>$$</p>
<p><strong>时间复杂度越大，算法的执行效率越低！</strong></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>最后关于时间复杂度的更形象的总结，推荐篇博客 :<a class="link"   href="https://blog.csdn.net/qq_41523096/article/details/82142747"  target="_blank">一套图 搞懂“时间复杂度” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>关于8大排序算法时间复杂度稳定性的总结，推荐博客：<a class="link"   href="https://blog.csdn.net/Elsa15/article/details/90138249"  target="_blank">八大排序算法、稳定性及时间复杂度 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>小结：我们学习了解任何知识，一定不能死啃概念，要试着把自己不能理解的东西抽象成自己可以理解的东西!很多东西我们不能理解，是很多时候是有些技术类文章不说人话。有些也是自己眼界不够，而有些则是说的人能力不够还无法做到通俗易懂的讲解出来！如果你能做到通俗易懂的讲解出来，那说明你已经掌握了！</p>
</blockquote>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>六大设计原则及使用场景</title>
    <url>/2021/0423/6-sheji-yuan-ze.html</url>
    <content><![CDATA[<blockquote>
<p>构成我们学习最大障碍的是已知的东西，而不是未知的东西</p>
</blockquote>
<h4 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h4><p>即一个类只负责一个职责，例如现在比较流行的微服务，就是将一个复杂的耦合性很高的业务，拆分成多个独立的功能单一的接口，然后通过服务编排的方式实现不同的业务需求；</p>
<p>单一职责的好处：</p>
<ol>
<li>类的复杂性降低，功能明确，可读性提高，可维护性和可扩展性提高；</li>
<li>变更引起的风险降低</li>
</ol>
<h4 id="2-开闭原则"><a href="#2-开闭原则" class="headerlink" title="2.开闭原则"></a>2.开闭原则</h4><p>开闭原则指的是对扩展开发，对修改关闭。它的意思是说我们在实现一个新的功能时，我们要想着在原有的基础上扩展，而不是去修改原有的功能！</p>
<p>例如，我们移动端的应用，随着版本迭代，我们不能强制要求我们的用户每次都去升级或者协助用户去升级，那么就要求新增的功能不允许在原有的接口上修改，而是要在原有的接口上进行扩展。</p>
<h4 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3.里氏替换原则"></a>3.里氏替换原则</h4><p>里氏替换原则是面向对象编程的实现基础，它的意思是所有引用了父类的地方都能被子类所替换，且不会引起任何的异常或错误；</p>
<p>例如如果我们将鸵鸟归为鸟类，那么鸵鸟也是鸟的子类，但是鸟类会飞，而鸵鸟不会飞，那么鸵鸟这个子类就违背了里氏替换原则。</p>
<h4 id="4-依赖倒置原则"><a href="#4-依赖倒置原则" class="headerlink" title="4.依赖倒置原则"></a>4.依赖倒置原则</h4><p>依赖倒置原则指的是针对接口编程，而不是面向具体的实现编程；它的意思是我们在做一个功能时，应该依赖于高层面的实现，而不是依赖于底层的实现；即高层模块不应该依赖于底层的模块，因为底层的模块的职责单一，不足以应对高层模块的变动；</p>
<p>例如，我们我们打车从A地点出发前往B地点，我们只需要预约一个车就可以了，而这个车就是一个顶层的接口，它的实现类可以是各种各样的车，不同厂商的车，不同颜色的车。我们只需要依赖于这个顶层的车就可以了，而不是依赖于具体的某一个车，或者车牌号为“xxx”的车，一旦我们依赖于具体的车，那么这辆车被占用或者发生故障，那么就会对我们从A到B的行程产生影响。</p>
<h4 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5.接口隔离原则"></a>5.接口隔离原则</h4><p>接口隔离原则是对接口进行规范约束，它指的是使用多个专门的接口比使用单一的总结口要好，即接口应该是互相隔离的小接口，而不是复杂的大接口；</p>
<p>接口隔离原则包含四个定义：</p>
<ol>
<li>接口要尽量小，这个小指的是不能违反单一职责原则。</li>
<li>接口要高内聚； 高内聚就是提高接口、类、模块的处理能力，减少对外的交互。在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也越有利于降低成本。</li>
<li>定制服务；一个系统或系统内的模块之间必然会有耦合，有耦合就要有相互访问的接口（并不一定就是Java中定义的Interface，也可能是一个类或单纯的数据交换），我们设计时就需要为各个访问者（即客户端）定制服务。定制服务就是单独为一个个体提供优良的服务。我们在做系统设计时也需要考虑对系统之间或模块之间的接口采用定制服务。采用定制服务就必然有一个要求：只提供访问者需要的方法。</li>
<li>接口设计是有限度的。 接口的设计粒度越小，系统越灵活，这是不争的事实。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性低，这不是一个项目或产品所期望看到的，所以接口设计一定要注意适度，这个“度”如何来判断？根据经验和常识判断，没有一个固话或可测量的标准</li>
</ol>
<p>例如现在的微服务开发，各种服务间的调用，我们应该只暴露出对方需要的接口；</p>
<h4 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6.迪米特法则"></a>6.迪米特法则</h4><p>迪米特法则又称最少知识原则，它是指一个类对于另一个类知道的越少越好。它设计的初衷是降低类之前的耦合度，每个类之前的联系少了，那么每个类都单独的处理自己的事，这样就能降低类之前的耦合性；只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。</p>
<p>例如，电影中看到的，有些人在遇到强盗时会选择闭着眼睛不看强盗，因为这样知道的越少对自己来说越安全！</p>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2024/0110/chain-responsibility-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>在源码中典型应用：<br>Netty 中的 Pipeline和ChannelHandler通过责任链设计模式来组织代码逻辑。<br>Spring Security 使用责任链模式，可以动态地添加或删除责任（处理 request 请求）。<br>Spring AOP 通过责任链模式来管理 Advisor。<br>Dubbo Filter 过滤器链也是用了责任链模式（链表），可以对方法调用做一些过滤处理，譬如超时(TimeoutFilter)，异常(ExceptionFilter)，Token(TokenFilter)等。<br>Mybatis 中的 Plugin 机制使用了责任链模式，配置各种官方或者自定义的 Plugin，与 Filter 类似，可以在执行 Sql 语句的时候做一些操作。<br>Tomcat 调用 ApplicationFilterFactory过滤器链。</p>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>responsibility</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2024/0110/proxy-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>代理模式很简单，只要记住以下关键点，简单易实现：</p>
<ul>
<li>代理类与委托类实现同一接口</li>
<li>在委托类中实现功能，在代理类的方法中中引用委托类的同名方法</li>
<li>外部类调用委托类某个方法时，直接以接口指向代理类的实例，这正是代理的意义所在：屏蔽</li>
</ul>
<p>代理分为静态代理和动态代理；</p>
<p>静态代理，就是写代码是预先定义好对应的代理类，那么一个接口就对应一个代理类；如果接口方法改变，那么代理类也需要变，n个接口就需要n个代理类；代码臃肿，不美观</p>
<p>动态代理又可以分为cglib动态代理和jdk动态代理；</p>
<p>其中CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑；</p>
<p>而jdk动态代理则是通过 Proxy.newProxyInstance 创建动态代理类；<br>通过设置系统属性，把生成的代理类保存下来</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>动态代理的例子可以参考此篇博客：<br><a class="link"   href="https://blog.csdn.net/weixin_53188541/article/details/128005570" > <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>总结：<br>CgLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CgLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CgLib合适，反之，使用JDK方式要更为合适一些。同时，由于CgLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</p>
<p>JDK动态代理是在运行时JDK根据class文件的格式动态拼装class文件，并加载到jvm中生成代理对象的。而Cglib动态代理是通过ASM库来操作class文件动态生成代理类的。同时你应该了解到：JDK动态代理是基于java中的接口实现的，Cglib是基于java中的继承实现的</p>
<p>请看例子的实现</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── <span class="built_in">local</span>/demo/test/shejimoshi/proxy/</span><br><span class="line">│   │      ├── Subject.java     <span class="comment"># 接口类</span></span><br><span class="line">│   │      ├── RealSubject.java <span class="comment"># 真实对象</span></span><br><span class="line">│   │      ├── Proxy.java       <span class="comment"># 代理类</span></span><br><span class="line">│   │      └── ClientMain.java  <span class="comment"># 客户端调用示例</span></span><br></pre></td></tr></table></figure></div>
<h3 id="1-定义操作接口类"><a href="#1-定义操作接口类" class="headerlink" title="1.定义操作接口类"></a>1.定义操作接口类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-真实对象实现-操作接口类"><a href="#2-真实对象实现-操作接口类" class="headerlink" title="2.真实对象实现 操作接口类"></a>2.真实对象实现 操作接口类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RealSubject: Handling request.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-代理类实现-操作接口类"><a href="#3-代理类实现-操作接口类" class="headerlink" title="3.代理类实现 操作接口类"></a>3.代理类实现 操作接口类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(RealSubject realSubject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="literal">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy: Checking access before handling request.&quot;</span>);</span><br><span class="line">        realSubject.request();</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy: Logging the time of request.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-客户端调用示例"><a href="#4-客户端调用示例" class="headerlink" title="4.客户端调用示例"></a>4.客户端调用示例</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RealSubject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(realSubject);</span><br><span class="line"></span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>总结：代理类的作用是：屏蔽真实对象的一些细节，比如：权限控制，日志记录，性能监控，缓存，事务控制等；</p>
</blockquote>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/2021/0423/singleton-pattern.html</url>
    <content><![CDATA[<blockquote>
<p>聊聊单例模式，面试加分题</p>
</blockquote>
<p>犹记得之前面xx时，面试官一上来就问你知道哪些设计模式,来手写一个单例模式的场景；尴尬的我，只写了懒汉式饿汉式，对于单例其他的变种一概不知；这次就来弥补下这方面的知识盲区！</p>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>饿汉式，从字面上理解就是很饿，一上来就要吃的，那么它会把吃的先准备好，以满足它的需求；那么对应到程序上的表现就为：在类加载的时候就会首先进行实例的初始化，后面如果应用程序需要这个实例的话，就有现成的了，可以直接使用当前的单例对象！</p>
<p>我们来手写下饿汉式的代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="comment">// 声明静态私有实例 并实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供对外初始化方法 静态类加载就初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明私有构造方法  即在外部类无法通过new 初始化实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do some thing!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.initInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>饿汉式的优点：它是线程安全的，因为单例对象在类加载的时候就被初始化了，当调用单例对象时只需要去把对应的对象赋值给变量即可！</p>
<p>饿汉式的缺点：如果这个类不经常使用，会造成一定的资源浪费！</p>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>懒汉式，就是比较懒，每次需要填饱肚子时才会外出觅食；那么对应到程序层面的理解，当应用程序需要某个对象时，该对象的类就会去创建一个实例，而不是提前准备好的！</p>
<p>我们来手写下懒汉式的代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="comment">// 声明私有静态对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 singleton2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)&#123;</span><br><span class="line">            singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do some thing!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonDemo2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton2</span> <span class="variable">singleton2</span> <span class="operator">=</span> Singleton2.initInstance();</span><br><span class="line">        singleton2.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同样我们看下<strong>懒汉式的优点</strong>：不会造成资源的浪费</p>
<p><strong>懒汉式的缺点</strong>：多线程情况下，可能会有线程安全的问题；</p>
<p>上面我们可以看到，饿汉式和懒汉式的唯一区别就是：饿汉式在类加载时就完成了对象的初始化，而懒汉式是在需要初始化的时候再去初始化对象；其实在单线程情况下，他们都是线程安全的；但是我们写的代码，必须考虑多线程情况下的并发问题，那么懒汉式的这种写法基本不满足需求，我们需要做些改造，使得它变得线程安全，满足我们的需求！</p>
<h3 id="双重检测锁"><a href="#双重检测锁" class="headerlink" title="双重检测锁"></a>双重检测锁</h3><p>我们知道，懒汉式下对象的初始化在并发环境下，可能多个线程同时执行到<code>singleton2 == null</code>,从而初始化了多个实例，这就引发了线程安全问题！</p>
<p>我们就需要改写它的初始化方法，我们知道加锁可以解决一般的线程安全问题，<code>synchronized</code>这个关键字可以修饰一个代码块或方法，被其修饰的方法或代码块就被加了锁；而从某些方面理解，<code>synchronized</code>是个同步锁，亦是个可重入锁！哈哈，关于锁的种类及概念有点多，后面准备写一篇关于锁的博客来总结下；不在发散了，回归正题</p>
<p>我们来改造下懒汉式的初始化方法如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对外提供初始化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton2 <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)&#123;</span><br><span class="line">        singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们看下上面的代码，初看没什么问题是解决了线程安全问题；但是由于整个方法都被<code>synchronized</code>修饰，那么在多线程的情况下就增加了线程同步的开销，降低了程序的执行效率；为了改进这个问题，我们将<code>synchronized</code>放入到方法内，实现代码块的同步；改下如下:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对外提供初始化方法</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> Singleton2 <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton2.class)&#123;</span><br><span class="line">            singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>呃，这样就满足了我们的要求了吗？聪明如你一定发现了，虽然我们将<code>synchronized</code>移到了方法内部，降低了同步的开销，但是在并发的情况下假设多个线程同时执行到<code>if(singleton2 == null)</code>时，依旧会排队初始化<code>Singleton2</code>实例，这样又会造成新的线程安全问题；那么为了解决这个问题，就出现了大名鼎鼎的“双重检测锁”。我们来看下它的实现，将上述代码改写如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对外提供初始化方法</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> Singleton2 <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)&#123;<span class="comment">// 第一次非空判断</span></span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton2.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)<span class="comment">// 第二次非空判断</span></span><br><span class="line">                singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>哈哈，这个双重即是判断两次的意思，并不是加两把锁哈；那么这样就能行了吗？初看没问题啊，但是我们细想之下这样写真的没问题吗？你写的代码，执行的时候真的会按你想的过程执行吗？有没有考虑过指令重排呢？问题就出现在<code>new Singleton2()</code>这个代码上，这行代码不是一个原子操作！</p>
<p>我们再来回顾下指令重排的大致执行流程：</p>
<p>1.给对象实例分配内存空间</p>
<p>2.调用对象构造方法，初始化成员变量</p>
<p>3.将构造的对象指向分配的内存空间</p>
<p>问题就出在指令重排后，cpu对指令重排的优化上，也就是说上述的三个过程并不是每次都是1-2-3顺序执行的，而是也有可能1-3-2；那么我们试想下并发情况下可能出现的场景，当线程A执行到步骤3时，cpu时间片正好轮询到线程B,那么线程B判断实例已经指向了对应的内存空间，不为null就不会 初始化实例了，就得到了一个未初始化完成的对象，这就导致了问题的诞生！</p>
<p>为了解决这个问题，我们知道还有一个关键字<code>volatile</code>可以完美的解决指令重排，使得非原子性的操作对其他对象是可见的！（volatile关键字保障了变量的内存的可见性和一致性问题，关于内存屏障可以看我之前的一篇文章<a class="link"   href="http://imecho.life/archives/java-memory-model"  target="_blank">JMM 内存模型知识点探究 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>了解）。那么我们将懒汉式改写如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="comment">// 声明私有静态对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton2 singleton2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供初始化方法</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton2 <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton2.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton2 == <span class="literal">null</span>)</span><br><span class="line">                    singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do some thing!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonDemo2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton2</span> <span class="variable">singleton2</span> <span class="operator">=</span> Singleton2.initInstance();</span><br><span class="line">        singleton2.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其实除了上面的单例实现外，还有两种常见的单例实现</p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassSingleton</span> &#123;</span><br><span class="line">    <span class="comment">// 私有静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerInstance</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">InnerClassSingleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对外提供的初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerInstance.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 私有构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InnerClassSingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do some thing!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClassSingletonDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InnerClassSingleton</span> <span class="variable">innerClassSingleton</span> <span class="operator">=</span> InnerClassSingleton.initInstance();</span><br><span class="line">        innerClassSingleton.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其实，静态内部类的方式和饿汉式本质是一样的，都是根据类加载机制来初始化实例，从而保证单例和线程安全的；不同的是静态内部类的方式是按需构建实例，不会如饿汉式一样造成资源浪费的问题；所以这个是饿汉式一个比较好的变种！</p>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>枚举是比较推荐的一种单例模式，它是线程安全的，且通过反射序列已经反序列化都无法破坏它的单例属性(其他的单例采用私有构造器的实现其实并不安全)，至于为什么呢?这个可以参考博客：<a href="[为什么要用枚举实现单例模式（避免反射、序列化问题）](https://www.cnblogs.com/chiclee/p/9097772.html)" target="_blank"><a class="link"   href="https://www.cnblogs.com/chiclee/p/9097772.html" >为什么要用枚举实现单例模式（避免反射、序列化问题） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></a></p>
<p>代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    <span class="comment">// 声明私有的枚举类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">Enum</span>&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="comment">// 声明单例对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> EnumSingleton instance;</span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        Enum()&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">EnumSingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> EnumSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对外提供的初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title function_">initInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Enum.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EnumSingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do some thing!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnumSingletonDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">EnumSingleton</span> <span class="variable">enumSingleton</span> <span class="operator">=</span> EnumSingleton.initInstance();</span><br><span class="line">        enumSingleton.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>好，至此我们总结了单例的几种实现方式；比较推荐的是后面两种方式，一般懒汉式我们就采用双重检测锁的方式；你可以发散思考下单例的应用场景，例如Spring中的Bean的初始化就是单例模式的典型应用，或者有些项目中的长链接等！</p>
</blockquote>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>基于注解实现策略模式</title>
    <url>/2024/0110/strategy-pattern.html</url>
    <content><![CDATA[<blockquote>
<p>背景: 在佣金项目时，查询佣金总额接口根据dbType的不同走的不同的if else逻辑；然后让改为策略模式的实现，这里将整个改造的过程记录在此；</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码如下</span></span><br><span class="line"><span class="keyword">if</span>(dbType == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//查主库</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dbType == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//查从库</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dbType == <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//查缓存</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dbType == <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="comment">//优先查缓存，缓存不存在再查主库</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dbType == <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="comment">//优先查缓存，缓存不存在再查从库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="新增strategyType注解"><a href="#新增strategyType注解" class="headerlink" title="新增strategyType注解"></a>新增strategyType注解</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StrategyType &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseCommonStrategy</span>&lt;?,?,?&gt;&gt; value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="新增基础策略接口"><a href="#新增基础策略接口" class="headerlink" title="新增基础策略接口"></a>新增基础策略接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共策略接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> * P 代表params参数</span></span><br><span class="line"><span class="comment"> * K 代表路由key</span></span><br><span class="line"><span class="comment"> * R 代表返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseCommonStrategy</span> &lt;P,K,R&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由关键字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> K&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    K <span class="title function_">routeKey</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> R&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    R <span class="title function_">handle</span><span class="params">(P p)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="新增策略工厂类"><a href="#新增策略工厂类" class="headerlink" title="新增策略工厂类"></a>新增策略工厂类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共策略工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonStrategyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两层级map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TwoLevelConcurrentHashMap&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseCommonStrategy</span>&lt;?,?,?&gt;&gt;, Object,BaseCommonStrategy&lt;?,?,?&gt;&gt; STRATEGY = <span class="keyword">new</span> <span class="title class_">TwoLevelConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立战略工厂</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routes 路线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildStrategyFactory</span><span class="params">(List&lt;BaseCommonStrategy&lt;?,?,?&gt;&gt; routes)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;构建通用策略start:&#123;&#125;&quot;</span>, routes.size());</span><br><span class="line">        routes.forEach(strategy-&gt;&#123;</span><br><span class="line">            Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseCommonStrategy</span>&gt; aClass = strategy.getClass();</span><br><span class="line">            <span class="type">StrategyType</span> <span class="variable">annotation</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(aClass, StrategyType.class);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span>==annotation)&#123;</span><br><span class="line">                log.error(<span class="string">&quot;构建策略路由失败，找不到对应的annotation.clazz:&#123;&#125;&quot;</span>, aClass);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(ResponseCodeEnum.ANNOTATION_CAN_NOT_FIND);</span><br><span class="line">            &#125;</span><br><span class="line">            STRATEGY.put(annotation.value(),strategy.routeKey(),strategy);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aClass     策略类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routeKey   路由关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameters 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> R&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;P,K,R,S <span class="keyword">extends</span> <span class="title class_">BaseCommonStrategy</span>&lt;P,K,R&gt;&gt; R <span class="title function_">handle</span><span class="params">(Class&lt;? extends BaseCommonStrategy&lt;P,K,R&gt;&gt; aClass,K routeKey,P parameters)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> aClass.getSimpleName();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BaseCommonStrategy&lt;P, K, R&gt; strategy = (BaseCommonStrategy&lt;P, K, R&gt;) STRATEGY.get(aClass, routeKey);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> == strategy)&#123;</span><br><span class="line">                log.error(<span class="string">&quot;未找到对应的处理策略，routeKey:&#123;&#125;,parameters:&#123;&#125;&quot;</span>, routeKey, JSON.toJSON(parameters));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(ResponseCodeEnum.STARTEGY_CAN_NOT_FIND,simpleName+<span class="string">&quot;未找到对应的处理策略&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> strategy.handle(parameters);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;strategy handle occurs error:&quot;</span>+e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两级map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TwoLevelConcurrentHashMap</span>&lt;K, R, P <span class="keyword">extends</span> <span class="title class_">BaseCommonStrategy</span>&lt;?, ?, ?&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 层级map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> ConcurrentHashMap&lt;K, ConcurrentHashMap&lt;R, P&gt;&gt;  levelMap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 两级map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TwoLevelConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.levelMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 放</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k k</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r r</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> p p</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K k,R r,P p)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(levelMap.containsKey(k))&#123;</span><br><span class="line">                ConcurrentHashMap&lt;R, P&gt; rpConcurrentHashMap = levelMap.get(k);</span><br><span class="line">                rpConcurrentHashMap.put(r,p);</span><br><span class="line">                levelMap.put(k, rpConcurrentHashMap);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ConcurrentHashMap&lt;R, P&gt; hashMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">            hashMap.put(r,p);</span><br><span class="line">            levelMap.put(k,hashMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 取</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> aClass   策略类</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> routeKey 路由关键字</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> P&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> P <span class="title function_">get</span><span class="params">(K aClass, R routeKey)</span> &#123;</span><br><span class="line">            ConcurrentHashMap&lt;R, P&gt; rpConcurrentHashMap = levelMap.get(aClass);</span><br><span class="line">            <span class="keyword">return</span> rpConcurrentHashMap.get(routeKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>以上是核心实现，将同类型的策略类放到map中，第一层key为注解里的顶层策略类class,第二层key为路由key，value则为对应的策略实现类；</p>
<h3 id="设计顶层查询接口"><a href="#设计顶层查询接口" class="headerlink" title="设计顶层查询接口"></a>设计顶层查询接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本用户查询策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseUserQueryStrategy</span>&lt;P,K,R&gt; <span class="keyword">extends</span> <span class="title class_">BaseCommonStrategy</span>&lt;P,K,R&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="设计基于注解区分的抽象类"><a href="#设计基于注解区分的抽象类" class="headerlink" title="设计基于注解区分的抽象类"></a>设计基于注解区分的抽象类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于数据库类型策略基本用户查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@StrategyType(BaseUserQueryByDbTypeStrategy.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseUserQueryByDbTypeStrategy</span> <span class="keyword">implements</span> <span class="title class_">BaseUserQueryStrategy</span>&lt;Long,Integer, UserInfo&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="各策略类的实现"><a href="#各策略类的实现" class="headerlink" title="各策略类的实现"></a>各策略类的实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按主库略查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryUserByMasterStrategy</span> <span class="keyword">extends</span> <span class="title class_">BaseUserQueryByDbTypeStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主库用户服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MasterUserService masterUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由关键字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Integer&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">routeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DbTypeEnums.MASTER.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> UserInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">handle</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询主库。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> masterUserService.queryUserInfoById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按从库策略查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryUserBySlaveStrategy</span> <span class="keyword">extends</span> <span class="title class_">BaseUserQueryByDbTypeStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从库用户服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SlaveUserService slaveUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由关键字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Integer&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">routeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DbTypeEnums.SLAVE.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">handle</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询从库。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> slaveUserService.queryUserInfoById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按缓存策略查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryUserByCacheStrategy</span> <span class="keyword">extends</span> <span class="title class_">BaseUserQueryByDbTypeStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由关键字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Integer&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">routeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DbTypeEnums.CACHE.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> UserInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">handle</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询缓存。。。&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询缓存</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按缓存和主库策略查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryUserByCacheAndMasterStrategy</span> <span class="keyword">extends</span> <span class="title class_">BaseUserQueryByDbTypeStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主库用户服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MasterUserService masterUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由关键字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Integer&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">routeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DbTypeEnums.CACHE_AND_MASTER.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> UserInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">handle</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询缓存和主库。。。&quot;</span>);</span><br><span class="line">        <span class="comment">// 先查询缓存</span></span><br><span class="line">        <span class="comment">// 如果缓存查询为空,再查询主库。。。代码略</span></span><br><span class="line">        <span class="keyword">return</span> masterUserService.queryUserInfoById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按缓存和从库策略查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryUserByCacheAndSlaveStrategy</span> <span class="keyword">extends</span> <span class="title class_">BaseUserQueryByDbTypeStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从库用户服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SlaveUserService slaveUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由关键字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Integer&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">routeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DbTypeEnums.CACHE_AND_SLAVE.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> UserInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">handle</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询缓存和从库。。。&quot;</span>);</span><br><span class="line">        <span class="comment">// 先查询缓存</span></span><br><span class="line">        <span class="comment">// 如果缓存查询为空,再查询从库。。。代码略</span></span><br><span class="line">        <span class="keyword">return</span> slaveUserService.queryUserInfoById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CommonStrategyFactory commonStrategyFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id     主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dbType db类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ResponseVO&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">ResponseVO <span class="title function_">queryUserInfo</span><span class="params">(<span class="meta">@PathParam(&quot;id&quot;)</span> Long id, <span class="meta">@PathParam(&quot;dbType&quot;)</span> Integer dbType)</span> &#123;</span><br><span class="line">    <span class="type">ResponseVO</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseVO</span>();</span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> commonStrategyFactory.handle(BaseUserQueryByDbTypeStrategy.class, dbType, id);</span><br><span class="line">    <span class="keyword">return</span> vo.data(userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>然后根据dbType的不同会切换到不同的策略类执行对应的handle方法实现；<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/sheji/24/1/14/postman.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/sheji/24/1/14/strategy_switch.png"
                     
                ></p>
<blockquote>
<p>总结：策略模式的作用是: 将策略类与调用者分离，调用者只需要知道调用接口，而不需要知道具体的实现类，从而达到解耦的目的。以上就是基于注解实现的一个策略模式，主要是核心点在于两层级map的实现及基于注解的策略类；</p>
</blockquote>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2024/0110/factory-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>举个例子，比如我们要做文件解析，那么我们可能用xml,json,text,html等；那么我就建四个对应的工厂，封装对应的解析方法就好；调用时只用根据文件类型获取对应的工厂，调用对应的解析方法即可；对于外部而言，就是一个工厂做了一个解析动作；封装内部的变化及实现</p>
<p>如上例子的实现</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── <span class="built_in">local</span>/demo/test/shejimoshi/factory/</span><br><span class="line">│   │      ├── Parser.java         <span class="comment"># 解析器接口</span></span><br><span class="line">│   │      ├── XmlParser.java      <span class="comment"># XML解析器</span></span><br><span class="line">│   │      ├── JsonParser.java     <span class="comment"># JSON解析器</span></span><br><span class="line">│   │      ├── TextParser.java     <span class="comment"># 文本解析器</span></span><br><span class="line">│   │      ├── HtmlParser.java     <span class="comment"># HTML解析器</span></span><br><span class="line">│   │      ├── ParserFactory.java  <span class="comment"># 工厂接口</span></span><br><span class="line">│   │      ├── ClientMain.java     <span class="comment"># 客户端调用示例</span></span><br><span class="line">│   │      └── ParserFactoryCreator.java  <span class="comment"># 工厂创建器</span></span><br></pre></td></tr></table></figure></div>
<h3 id="1-定义解析类接口"><a href="#1-定义解析类接口" class="headerlink" title="1.定义解析类接口"></a>1.定义解析类接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Parser</span> &#123;</span><br><span class="line">    String <span class="title function_">parse</span><span class="params">(String content)</span>;  <span class="comment">// 解析方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-实现解析类接口"><a href="#2-实现解析类接口" class="headerlink" title="2.实现解析类接口"></a>2.实现解析类接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XML 解析器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlParser</span> <span class="keyword">implements</span> <span class="title class_">Parser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parse</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟 XML 解析逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;XML Parsed: &quot;</span> + content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他类型省略</span></span><br></pre></td></tr></table></figure></div>
<h3 id="3-定义工厂接口-ParserFactory-java"><a href="#3-定义工厂接口-ParserFactory-java" class="headerlink" title="3.定义工厂接口 ParserFactory.java"></a>3.定义工厂接口 ParserFactory.java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParserFactory</span> &#123;</span><br><span class="line">    Parser <span class="title function_">createParser</span><span class="params">()</span>;  <span class="comment">// 创建解析器的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-实现具体的工厂类"><a href="#4-实现具体的工厂类" class="headerlink" title="4.实现具体的工厂类"></a>4.实现具体的工厂类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlParserFactory</span> <span class="keyword">implements</span> <span class="title class_">ParserFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Parser <span class="title function_">createParser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XmlParser</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="5-创建工厂生成器ParserFactoryCreator"><a href="#5-创建工厂生成器ParserFactoryCreator" class="headerlink" title="5.创建工厂生成器ParserFactoryCreator"></a>5.创建工厂生成器ParserFactoryCreator</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParserFactoryCreator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ParserFactory <span class="title function_">getFactory</span><span class="params">(String fileType)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (fileType.toLowerCase()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xml&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XmlParserFactory</span>();</span><br><span class="line">            <span class="comment">//其他略...</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported file type: &quot;</span> + fileType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="6-调用示例"><a href="#6-调用示例" class="headerlink" title="6.调用示例"></a>6.调用示例</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据文件类型获取工厂</span></span><br><span class="line">        <span class="type">ParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> ParserFactoryCreator.getFactory(<span class="string">&quot;xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建解析器并解析内容</span></span><br><span class="line">        <span class="type">Parser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.createParser();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> parser.parse(<span class="string">&quot;&lt;root&gt;data&lt;/root&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);  <span class="comment">// 输出: XML Parsed: &lt;root&gt;data&lt;/root&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>总结：工厂模式解决对象如何创建的问题，核心是生产对象；作用是创建对象，将对象的创建与使用分离</p>
</blockquote>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>factory</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2024/0110/builder-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>就是我们链式编程的各种builder的实现；它将产品和构建过程做了个拆分，例如我们创建一个电脑，那么需要组装显示屏，需要组装主机；主要做法是抽象构建过程，再由一个实现类来实现抽象类，通过各种builder链式调用构建出想要的产品；</p>
<p>如上例子的实现</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── <span class="built_in">local</span>/demo/test/shejimoshi/builder/</span><br><span class="line">│   │      ├── A1Builder.java    <span class="comment"># 建造者实现类</span></span><br><span class="line">│   │      ├── Builder.java      <span class="comment"># 建造者接口</span></span><br><span class="line">│   │      ├── ClentMain.java    <span class="comment"># 客户端调用示例</span></span><br><span class="line">│   │      ├── Director.java     <span class="comment"># 负责调用建造者的构建过程</span></span><br><span class="line">│   │      └── Product.java <span class="comment"># 工厂创建器</span></span><br></pre></td></tr></table></figure></div>
<h3 id="1-定义产品"><a href="#1-定义产品" class="headerlink" title="1.定义产品"></a>1.定义产品</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String part1;</span><br><span class="line">    <span class="keyword">private</span> String part2;</span><br><span class="line">    <span class="keyword">private</span> String part3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart1</span><span class="params">(String part1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part1 = part1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart2</span><span class="params">(String part2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part2 = part2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPart3</span><span class="params">(String part3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.part3 = part3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;part1=&#x27;&quot;</span> + part1 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part2=&#x27;&quot;</span> + part2 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, part3=&#x27;&quot;</span> + part3 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-定义构建接口"><a href="#2-定义构建接口" class="headerlink" title="2.定义构建接口"></a>2.定义构建接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPart1</span><span class="params">(String part1)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPart2</span><span class="params">(String part2)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPart3</span><span class="params">(String part3)</span>;</span><br><span class="line">    Product <span class="title function_">getResult</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-实现建造者接口"><a href="#3-实现建造者接口" class="headerlink" title="3.实现建造者接口"></a>3.实现建造者接口</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A1Builder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart1</span><span class="params">(String part1)</span> &#123;</span><br><span class="line">        product.setPart1(part1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart2</span><span class="params">(String part2)</span> &#123;</span><br><span class="line">        product.setPart2(part2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPart3</span><span class="params">(String part3)</span> &#123;</span><br><span class="line">        product.setPart3(part3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-组织构建过程"><a href="#4-组织构建过程" class="headerlink" title="4.组织构建过程"></a>4.组织构建过程</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        builder.buildPart1(<span class="string">&quot;Part1&quot;</span>);</span><br><span class="line">        builder.buildPart2(<span class="string">&quot;Part2&quot;</span>);</span><br><span class="line">        builder.buildPart3(<span class="string">&quot;Part3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="5-调用示例"><a href="#5-调用示例" class="headerlink" title="5.调用示例"></a>5.调用示例</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A1Builder</span>();</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line">        director.construct();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> builder.getResult();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>建造者模式的作用是：1. 封装一个复杂对象的构造过程；2. 允许你通过一个简单的接口创建一个复杂的对象；3. 允许你使用相同的创建过程创建不同种类的对象</p>
<blockquote>
<p>总结：建造者模式是一种创建型设计模式，它允许你分步骤构造复杂对象。这种模式特别适用于当对象的构造过程需要多个步骤时</p>
</blockquote>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>builder</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2024/0110/observer-mode.html</url>
    <content><![CDATA[<p>观察者模式适用于发布订阅的场景，具体代码见<code>LocalDemo之shejimoshi</code>模块；<br>关键点：<br>1、针对观察者与被观察者分别定义接口，有利于分别进行扩展。<br>2、重点就在被观察者的实现中：<br>　　（1）定义观察者集合，并定义针对集合的添加、删除操作，用于增加、删除订阅者（观察者）<br>　　（2）定义通知方法，用于将新情况通知给观察者用户（订阅者用户）<br>3、观察者中需要有个接收被观察者通知的方法</p>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>observer</tag>
      </tags>
  </entry>
  <entry>
    <title>模板模式</title>
    <url>/2024/0110/template-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>模板模式是在抽象父类中公开定义方法，可以将一些通用的方法封装在这个方法中，子类可以根据需要来覆盖重写父类中的方法；如果想限定哪些方法子类不可重新，则将其方法声明为final修饰；</p>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>template</tag>
      </tags>
  </entry>
  <entry>
    <title>门面模式</title>
    <url>/2024/0110/facade-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>门面模式（Facade Pattern） 又叫外观模式，提供了一个统一的接口，用来访问子系统中的一群接口 。其主要特征是定义了一个高层接口，让子系统更容易使用，属于结构型模式。在我们日常编码中也在无意中大量的使用着门面模式，例如ServiceA中调用其他多个Service的方法，然后再将ServiceA的方法暴露给Controller调用，ServiceA就相当于一个门面使得Controller能够间接的调用其他Service子系统，这也就是门面模式的一种应用。</p>
<p>可参考博客：<br>()[<a class="link"   href="https://blog.csdn.net/weixin_45538589/article/details/120403384]" >https://blog.csdn.net/weixin_45538589/article/details/120403384] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>facade</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/2024/0110/decorator-mode.html</url>
    <content><![CDATA[<p>具体代码见<code>LocalDemo之shejimoshi</code>模块</p>
<p>装饰器模式（Decorator Pattern） 也称为包装模式(Wrapper Pattern) 是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案(扩展原有对象的功能)，属于结构型模式。装饰器模式的核心是功能扩展，使用装饰器模式可以透明且动态地扩展类的功能。</p>
<p>可参考博客：<br>()[<a class="link"   href="https://blog.csdn.net/weixin_45538589/article/details/120808658]" >https://blog.csdn.net/weixin_45538589/article/details/120808658] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>sheji</category>
      </categories>
      <tags>
        <tag>decorator</tag>
      </tags>
  </entry>
  <entry>
    <title>String 聊源码解读</title>
    <url>/2021/0423/string-source-code.html</url>
    <content><![CDATA[<blockquote>
<p>你真的了解String吗？之前一篇博客写jvm时，就觉得String可以单独拎出来写一篇博客，毕竟几乎所有的面试都是以String开始的，由此可以延伸出线程安全问题，jvm内存模型等问题。也以此告诫我们，作为一个技术开发人员，时刻需要关注底层的实现，保持刨根问底的好奇心的重要性！</p>
</blockquote>
<p>这里提一下解读源码的思路：</p>
<ul>
<li>1.看其实现、继承</li>
<li>2.看其构造方法</li>
<li>3.看其重写的方法</li>
<li>4.了解其其他方法的实现</li>
</ul>
<h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><p>1.以主流的jdk1.8来说，Spring 内部实际存储的结构为char数组，源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6849794470754667710L</span>;</span><br><span class="line">    <span class="comment">//...其他内容省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>我们先来看看它重要的4个构造方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String 为参数的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(String original)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = original.value;</span><br><span class="line">    <span class="built_in">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// char[] 为参数的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span> value[])</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// StringBuffer 为参数的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(StringBuffer buffer)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// StringBuilder 为参数的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(StringBuilder builder)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到除了String 为参数的构造方法是直接赋值，其他三个方法都是调用Arrays.copyOf()方法复制一份等长的数据，并且StringBuffer考虑到线程安全的问题，使用了synchronized关键字。</p>
<p>Arrays.copyOf()实际上是调用了底层的实现(native本地方法，实际调用了C的方法库，对内存进行读写操作)：System.arraycopy(original, 0, copy, 0,Math.min(original.length, newLength));</p>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>String 重写了equals() 方法，源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @see  #compareTo(String)</span></span><br><span class="line"><span class="comment">* @see  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123; <span class="comment">// 对象引用相同直接返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123; <span class="comment">// 判断值是否为String类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="comment">// 把两个值都转为char[] 数组对比</span></span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 循环比对两个字符串的每一个字符</span></span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果有一个字符不相同就返回false</span></span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>还有一个和equals()比较类似的方法equalsIgnoreCase(),用于忽略字符串大小写后进行字符串比对！</p>
<p>compareTo()方法,用于比较两个字符串，返回int类型，源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> anotherString.value.length;</span><br><span class="line">        <span class="comment">// 获取到两个字符串长度最短的那个长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> Math.min(len1, len2);</span><br><span class="line">        <span class="type">char</span> v1[] = value;</span><br><span class="line">        <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 对比每个字符</span></span><br><span class="line">        <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> v1[k];</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> v2[k];</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                <span class="comment">// 有字符不相等就返回差值（隐式转换 a为1 z为26）</span></span><br><span class="line">                <span class="keyword">return</span> c1 - c2;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len1 - len2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>从源码可以看出，compareTo方法会循环对比所有的字符，当连个字符串中有任意一个字符串不相同时，就返回差值。当相等时返回0；（注：equals 和 compareTo只比较字符层面是否相等，不比较对象的引用是否一致）<br>例如下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1==str2); <span class="comment">// true</span></span><br><span class="line">System.out.println(str1.equals(str2)); <span class="comment">// true</span></span><br><span class="line">System.out.println(str1.compareTo(str2)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">System.out.println(str2==str3); <span class="comment">// false</span></span><br><span class="line">System.out.println(str2.equals(str3)); <span class="comment">// true</span></span><br><span class="line">System.out.println(str2.compareTo(str3)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">System.out.println(str3==str4); <span class="comment">//false</span></span><br><span class="line">System.out.println(str3.equals(str4)); <span class="comment">// true</span></span><br><span class="line">System.out.println(str3.compareTo(str4)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></div>
<p>可以看出，equals() 和 compareTo() 方法是等价的，唯一的不同是equals(Object),compareTo(String) 参数不同！</p>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li>indexOf() 查询字符串首次出现的下标位置</li>
<li>lastIndexOf() 查询字符串最后出现的下标位置</li>
<li>contain() 查询字符串是否包含另一个字符串</li>
<li>toLowerCase() 把字符串全部转为小写</li>
<li>toUpperCase() 把字符串全部转换为大写</li>
<li>length() 查询字符串长度 （数组查看长度size(),但是前台数组查看长度依然是length()，有时候前端写忘记了关键还不报错！）</li>
<li>trim() 去掉首位空格</li>
<li>replace() 替换字符串中某些字符</li>
<li>split() 把字符串分割并返回字符串数组</li>
<li>join() 把字符串数组转换为字符串</li>
</ul>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p>1.为什么String 要有final修饰？<br>2.String中StringBuilder 和StringBuffer 有什么区别？<br>3.String 的intern() 方法有什么含义？<br>4.String 类型在jvm 中是如何存储的？编译器对String 做了哪些优化？</p>
<p>接下来我们一个个看下这些问题的答案：<br>1.为了安全和高效的考虑，如果不是final的话，传参和内部指令调用时，它的值被改变了的话可能会引起不可预知的系统崩溃问题，且传参的时候需要重新拷贝一个新值，性能上会有一定损失！<br>2.StringBuilder 是非线程安全的，StringBuffer是线程安全的，但是考虑了线程安全就兼顾不了性能，在非并发的操作下我们选择StringBuilder来操作字符串的拼接。<br>3.intern() 方法是将字符串保存到常量池中。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s3.intern();</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s3); <span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">// false s3在堆中 s4在常量池中</span></span><br></pre></td></tr></table></figure></div>
<p>4.编译器堆代码进行了优化如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;ja&quot;</span> + <span class="string">&quot;va&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>
<p>其中”ja” + “va”被直接编译成了”java”.因此s1&#x3D;&#x3D;s2才成立！</p>
<blockquote>
<p>小结：String的面试点基本就在&#x3D;&#x3D; equals()和StringBuild和StringBuffer这里！若还要深问就会问jvm 线程并发了。还是要多看源码，做到知其然知其所以然!</p>
</blockquote>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 源码分析</title>
    <url>/2021/0423/hashmap-source-code.html</url>
    <content><![CDATA[<blockquote>
<p>一个字：干！</p>
</blockquote>
<h3 id="HashMap的常量设置"><a href="#HashMap的常量设置" class="headerlink" title="HashMap的常量设置"></a>HashMap的常量设置</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认初始长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">//最大长度10 7374 1824</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//转变为树的阀值（当链表长度大于8 且哈希桶数组长度大于64时转换为红黑树）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//转换为链表的阀值（当树节点小于6时将转换为链表）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">//最小树容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="哈希桶"><a href="#哈希桶" class="headerlink" title="哈希桶"></a>哈希桶</h3><p>在JDK1.7中，HashMap是以 数组 + 链表 的形式组成的(jdk1.8增加了红黑树)。其中数组中的元素我们称之为哈希桶，它的源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment">* TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;<span class="comment">//hash值</span></span><br><span class="line">    <span class="keyword">final</span> K key;<span class="comment">//key 值</span></span><br><span class="line">    V value; <span class="comment">//value 值</span></span><br><span class="line">    Node&lt;K,V&gt; next; <span class="comment">//下个节点</span></span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 亦或取出hashCOde</span></span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当是Map类型 比较key及value值</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们知道红黑树的概念是在JDK1.8中添加的，之所以添加进来是因为链表一旦过长。HashMap的性能就很受影响，而之前我们介绍了红黑树的数据结构具有快速增删改查的特点，这就有效的解决了链表过长所导致的性能问题；</p>
<h3 id="什么时候转换为红黑树？"><a href="#什么时候转换为红黑树？" class="headerlink" title="什么时候转换为红黑树？"></a>什么时候转换为红黑树？</h3><p>当链表的长度大于8且容量大于64时，链表结构会转换为红黑树结构；我们来看以下源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment">* table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// MIN_TREEIFY_CAPACITY = 64</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<span class="comment">// 当链表的长度小于64时扩容</span></span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);<span class="comment">// 创建新的节点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新的节点已挂载且不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);<span class="comment">//转为红黑树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 哈希表为空则创建表</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 如果tab[i]为null 则插入新的节点</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 如果key 已存在 且和对应p节点的hash值,key都相等 则覆盖e节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 否则判断是否是树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 如果是树节点  则直接插入</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果key不存在 也不是树节点表明为链表 则循环准备插入链表下个节点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 链表下个节点为空时</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// binCount &gt;= 7是转为红黑树（及链表长度大于8时）</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// key值存在 并且和下个节点（e）的hash值相等 则覆盖p节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 超出最大容量扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab); <span class="comment">// 转为红黑树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="加载因子为何设定为0-75？"><a href="#加载因子为何设定为0-75？" class="headerlink" title="加载因子为何设定为0.75？"></a>加载因子为何设定为0.75？</h3><p>出于容量和性能的平衡考虑的结果；</p>
<ul>
<li>假如加载因子设置过大，那么发生扩容的门栏就比较高，那么扩容的频率就很低，发生Hash冲突的概率就会提高。</li>
<li>假如加载因子设定的比较小，那么扩容的频率就会变高，那么将会占用更多的空间；并且此时，数据的存储就会比较稀疏，对各种操作的性能要求比较高！</li>
</ul>
<h3 id="Hash冲突了怎么查找节点？"><a href="#Hash冲突了怎么查找节点？" class="headerlink" title="Hash冲突了怎么查找节点？"></a>Hash冲突了怎么查找节点？</h3><p>我们看下获取节点的源码<code>getNode</code>:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 判断非空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="comment">// while循环 判断第一个元素是否是需要查询的元素</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 判断下一个元素不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果第一个节点为树节点  则去树节点里找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 如果第一节点不为树节点  则循环判断</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// hash 值相同且key相同  则找到此节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当hash冲突了即hash值相等了，还需要判断key值是否相等来确定节点元素；</p>
<h3 id="HashMap是如何扩容的？"><a href="#HashMap是如何扩容的？" class="headerlink" title="HashMap是如何扩容的？"></a>HashMap是如何扩容的？</h3><p>我们来看下扩容方法<code>resize</code>:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">* accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">* Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">* elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">* with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//我们来解读下注释的意思：表的大小可以通过初始化或者扩容时变为原有的两倍；</span></span><br><span class="line"><span class="comment">//如果为空,将根据字段阀值的初始容量分配大小</span></span><br><span class="line"><span class="comment">//否则 我们将采用二次扩容的方式 每个bin中的元素必须保持在同一索引中 或者在新表中以两个偏移量的幂次移动</span></span><br><span class="line"><span class="comment">//有点绕，我们结合代码来理解</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 扩容前的数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 扩容前的大小 和阀值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="comment">// 新扩容的大小 和阀值</span></span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大容量 不再扩容直接返回原始数组</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新容量扩到大为原有的2倍 且小于最大容量  且扩容前的容量大于默认容量16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold  新阀值扩大2倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扩容前容量为0  阀值大于0（即当前数组没有数据）</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr; <span class="comment">// 新扩容的容量大小 设置为扩容前阀值（就是用户自定义的阀值）</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 如果初始化值为0 则使用默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">// 新扩容的容量设置为16</span></span><br><span class="line">        <span class="comment">// 新扩容的阀值设置为12</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果新扩容的阀值为0</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据新扩容容量和负载算出一个当前阀值</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        <span class="comment">// 如果新扩容的容量小于最大值  并且当前阀值也小于最大值  就取当前阀值  否则为最大int值</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;<span class="comment">//更新实际阀值</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 原数组不为空</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 如果只有一个链表  直接赋值</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 如果是红黑树  则进行拆分</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 以下是链表复制部分，jdk1.8重点优化部分</span></span><br><span class="line">                    <span class="comment">// 注：JDK1.7中rehash 旧链表迁移新链表的时候</span></span><br><span class="line">                    <span class="comment">// 如果在新表的数组索引位置相同，则链表元素会倒置,而jdk1.8不会</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原有索引</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;<span class="comment">//非原有索引</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">//loHead为首的链表放到数组的原位置</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 将hiHead为首的链表放到原位置+oldCap的位置</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>若HashMap 创建时没有指定大小和扩容阀值，则默认为16，负载因子是0.75。那么容量默认为12,当容量大于12时则扩容为原来16的两倍即32；从源码可以看到，扩容后会进行元素的位置调整；因为jdk1.7在迁移过程中会倒置链表，即头插法有可能倒置循环引用问题（HashMap本身即是非线程安全的，所以官方jdk1.7未处理此问题）；而jdk1.8使用了尾插法，解决了此问题；但在扩容的时候依然会有线程安全的问题，并且在扩容的过程中若是红黑树则会进行拆分，否则才会进行链表迁移；</p>
<h3 id="左右旋"><a href="#左右旋" class="headerlink" title="左右旋"></a>左右旋</h3><p>左右旋的本质是为了包装树的平衡，我们知道红黑树的本质是一颗平衡二叉树！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左旋</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="comment">// p节点不为空 右子节点r赋值的同时也判断p节点的右子节点不为空</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (r = p.right) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 左子节点 赋值为p节点的右子节点  同时和右子节r点的左子节点相等</span></span><br><span class="line">        <span class="comment">// 则p是父节点</span></span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="literal">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="comment">// pp节点赋值为右子节点的父节点  且和p节点的父节点相等 并且他们的父节点都为null</span></span><br><span class="line">        <span class="comment">// 则当前右子节点为根节点（red=false 根节点为黑色）</span></span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">            (root = r).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// pp节点的左子节点 为p节点</span></span><br><span class="line">        <span class="comment">// 则pp的左子节点为当前右子节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="comment">// 否则 pp的右子节点为当前右子节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// r的左字节变为p节点</span></span><br><span class="line">        r.left = p;</span><br><span class="line">        <span class="comment">// p的父节点变为右子节点</span></span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右旋和左旋相反，代码略</span></span><br></pre></td></tr></table></figure></div>

<p>关于左右旋的更形象理解可以查阅《大话数据结构》中关于红黑树的描述；</p>
<blockquote>
<p>小结：HashMap 基本数据结构是数组（EntryNode Hash桶）+链表+红黑树；当链表节点的长度大于8，且数组的长度小于64时，对数组扩容；当链表节点长度大于8，数组长度大于64时，链表转换为红黑树；扩容的过程是，数组放在原有的索引处，链表放在原有的索引加上原有的数组长度的地方；扩容后如果树节点小于6，就将树还原成链表;</p>
</blockquote>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>hashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>宏观的认识SpringCloud</title>
    <url>/2021/0423/understand-springcloud.html</url>
    <content><![CDATA[<blockquote>
<p>学了也用了这么久SpringBoot,你有没有思考过SpringBoot和SpringCloud 的关系呢？SpringCloud这么火的原因究竟有哪些呢？SpringCloud解决了哪些问题呢？Dubbo 和 SpringCloud 对比有什么不同呢？接下来我们就来带着问题，捋一捋。</p>
</blockquote>
<h3 id="宏观了解"><a href="#宏观了解" class="headerlink" title="宏观了解"></a>宏观了解</h3><p>MVC架构（三层架构）:结构清晰，方便开发人员协调分工，简化开发；</p>
<p>Spring(IOC、AOP): Spring是一个轻量级的JAVA框架，或者我们可以把它叫做一个IOC容器。它的诞生解决了企业级的开发复杂性问题，但是随着时间推移，越来越多的东西集成到Spring中，Spring也变得越来越复杂了；这似乎已经背离了Spring的初衷，再也不是简单易用的程序员的春天了！</p>
<p>那么SpringBoot应势头而生，它简化了Sprig的开发，我们可以理解为是Spring的升级版，是Spring的一个脚手架，提供了很多自动化配置的组件（约定大于配置)!于是乎，慢慢演进到现在成为了新一代的JavaEE的开发标准；</p>
<p>那么基于SpringBoot我们就可以快速开发一个企业级应用，企业级的单体应用因为SpringBoot的出现，又可以拆分成一个个的微服务应用。对比于以前的单体应用，业务逻辑没有发生任何改变，变的只是服务的架构，也叫微服务架构；</p>
<h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构解决的根本问题是解藕，本质就是模块化开发。那么这就带来了一个问题，服务多了后管理不是很方便啊，大大增加了运维及排错成本。相比单体的架构，它主要带来了以下四个问题：</p>
<ul>
<li>这么多服务，客户端怎么访问服务端？</li>
<li>这么多服务，服务之间如何通信？</li>
<li>这么多服务，如何管理呢（又叫服务治理）？</li>
<li>这么多服务，服务挂了这么办？（运维成本大增）</li>
</ul>
<p>那么SpringCloud也就这些问题应运而生，注意SpringCloud并不是一个技术，它是微服务架构的一站式解决方案，是基于SpringBoot的一个微服务生态圈！</p>
<p>那么解决上面问题，目前有哪些解决方案呢？</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpringCloud Netflix:</span><br><span class="line">    api网关 -- zuul</span><br><span class="line">    服务间通信 -- Feign (HttpClient-ribbon-feign)</span><br><span class="line">    服务治理(服务注册与发现) -- Eureka</span><br><span class="line">    服务熔断 -- Hystrix</span><br><span class="line"></span><br><span class="line">Apache Dubbo + Zookeeper:</span><br><span class="line">    api网关 -- 很遗憾，dubbo并没有开发自己的网关组件，目前使用了第三方提供的（例如:Zuul,Soul,Gateway...)</span><br><span class="line">    服务间通信 -- 一个基于Java的Rpc通信框架</span><br><span class="line">    服务治理(服务注册与发现) -- Zookeeper(多用于大数据相关，Hadoop、hive...)</span><br><span class="line">    服务熔断 -- 也没有，用的是Hystrix</span><br><span class="line"></span><br><span class="line">SpringCloud Alibaba:</span><br><span class="line">    api网关 -- 也是用的zuul或Gateway</span><br><span class="line">    服务间通信 -- 默认使用的也是Feign (HttpClient-ribbon-feign)</span><br><span class="line">    服务治理(服务注册与发现) -- Nacos</span><br><span class="line">    服务熔断 -- 也没有，默认使用的是Hystrix（可惜的是Hystrix也宣布不再维护了，官方推荐的替换版本是resilience4）</span><br></pre></td></tr></table></figure></div>
<p>springCloud 官网：<a class="link"   href="https://spring.io/projects/spring-cloud"  target="_blank">https://spring.io/projects/spring-cloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>SpringCloud 中文网：<a class="link"   href="https://www.springcloud.cc/"  target="_blank">https://www.springcloud.cc/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Dubbo 官网：<a class="link"   href="http://dubbo.apache.org/en-us/"  target="_blank">http://dubbo.apache.org/en-us/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Dubbo 中文手册：<a class="link"   href="https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html"  target="_blank">https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>SpringCloud Alibaba Wiki：<a class="link"   href="https://github.com/alibaba/spring-cloud-alibaba/wiki"  target="_blank">https://github.com/alibaba/spring-cloud-alibaba/wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h3><p>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。<br>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它提倡将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储；</p>
<p><strong>可能有的人觉得官方的话太过生涩，我们从技术维度来理解下</strong>：</p>
<p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p>
<p>关于微服务的详细理解，推荐博客: <a class="link"   href="https://www.cnblogs.com/liuning8023/p/4493156.html"  target="_blank">微服务（Microservices）——Martin Flower <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="微服务优缺点"><a href="#微服务优缺点" class="headerlink" title="微服务优缺点"></a>微服务优缺点</h3><p><em><strong>优点</strong></em></p>
<ul>
<li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li>
<li>开发简单，开发效率提高，一个服务可能就是专一的只干一件事；</li>
<li>微服务能够被小团队单独开发，这个小团队是2~5人的开发人员组成； 最少3个人！</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。</li>
<li>微服务能使用不同的语言开发。</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。</li>
<li>微服务允许你利用融合最新技术。</li>
<li>微服务只是业务逻辑的代码，不会和 HTML ， CSS 或其他界面混合</li>
<li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一数据库</li>
</ul>
<p><em><strong>缺点</strong></em></p>
<ul>
<li>开发人员要处理分布式系统的复杂性</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大</li>
<li>系统部署间依赖增加</li>
<li>服务间通信成本增加</li>
<li>数据一致性问题</li>
<li>系统集成测试问题</li>
<li>性能监控问题</li>
</ul>
<h3 id="微服务目前技术栈"><a href="#微服务目前技术栈" class="headerlink" title="微服务目前技术栈"></a>微服务目前技术栈</h3><table>
<thead>
<tr>
<th>微服务条目</th>
<th>落地技术</th>
</tr>
</thead>
<tbody><tr>
<td>服务开发</td>
<td>SpringBoot,Spring,SpringMVC</td>
</tr>
<tr>
<td>服务配置与管理</td>
<td>Netflix公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka、Consul、Zookeeper等</td>
</tr>
<tr>
<td>服务调用</td>
<td>Rest、RPC、gRPC</td>
</tr>
<tr>
<td>服务熔断器</td>
<td>Hystrix、Envoy等</td>
</tr>
<tr>
<td>负载均衡</td>
<td>Ribbon、Nginx等</td>
</tr>
<tr>
<td>服务接口调用（客户端调用服务的简｜化工具）</td>
<td>Feign等</td>
</tr>
<tr>
<td>消息队列</td>
<td>Kafka、RabbitMQ、ActiveMQ等｜</td>
</tr>
<tr>
<td>服务配置中心管理</td>
<td>SpringCloudConfig、Chef等</td>
</tr>
<tr>
<td>服务路由（API网关）</td>
<td>Zuul等</td>
</tr>
<tr>
<td>服务监控</td>
<td>Zabbix、Nagios、Metrics、Specatator等</td>
</tr>
<tr>
<td>服务部署</td>
<td>Docker、OpenStack、Kubernetes等</td>
</tr>
<tr>
<td>数据流操作开发包</td>
<td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td>
</tr>
<tr>
<td>事件消息总线</td>
<td>SpringCloud Bus</td>
</tr>
</tbody></table>
<h3 id="SpringCloud和Dubbo的对比"><a href="#SpringCloud和Dubbo的对比" class="headerlink" title="SpringCloud和Dubbo的对比"></a>SpringCloud和Dubbo的对比</h3><blockquote>
<p>其实，它们注重的领域不一样，按理说没有太多的可比性.Dubbo的定位是一款RPC框架，Spring Cloud的目标是微服务架构下的一站式解决方案</p>
</blockquote>
<table>
<thead>
<tr>
<th>-</th>
<th>Dubbo</th>
<th>Spring</th>
</tr>
</thead>
<tbody><tr>
<td>服务注册中心</td>
<td>Zookeeper</td>
<td>Spring Cloud Netfilx Eureka</td>
</tr>
<tr>
<td>服务调用方式</td>
<td>RPC</td>
<td>REST API</td>
</tr>
<tr>
<td>服务监控</td>
<td>Dubbo-monitor</td>
<td>Spring Boot Admin</td>
</tr>
<tr>
<td>断路器</td>
<td>不完善</td>
<td>Spring Cloud Netflix Hystrix</td>
</tr>
<tr>
<td>服务网关</td>
<td>无</td>
<td>Spring Cloud Netflix Zuul</td>
</tr>
<tr>
<td>分布式配置</td>
<td>无</td>
<td>Spring Cloud Config</td>
</tr>
<tr>
<td>服务跟踪</td>
<td>无</td>
<td>Spring Cloud Sleuth</td>
</tr>
<tr>
<td>消息总线</td>
<td>无</td>
<td>Spring Cloud Bus</td>
</tr>
<tr>
<td>数据流</td>
<td>无</td>
<td>Spring Cloud Stream</td>
</tr>
<tr>
<td>批量任务</td>
<td>无</td>
<td>Spring Cloud Task</td>
</tr>
</tbody></table>
<p><strong>最大区别</strong>：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。<br>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上<br>面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契<br>约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。</p>
<p><strong>品牌机与组装机的区别:</strong></p>
<p>很明显，Spring Cloud的功能比DUBBO更加强大，涵盖面更广，而且作为Spring的拳头项目，它也能够<br>与Spring Framework、Spring Boot、Spring Data、Spring Batch等其他Spring项目完美融合，这些对于微服务而言是至关重要的。</p>
<p>使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题；</p>
<p>而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。</p>
<p><strong>社区支持与更新力度</strong></p>
<p>最为重要的是，DUBBO停止了5年左右的更新，虽然2017.7重启了。对于技术发展的新需求，需要由开发者自行拓展升级（比如当当网弄出了DubboX），这对于很多想要采用微服务架构的中小软件组织，显然是不太合适的，中小公司没有这么强大的技术能力去修改Dubbo源码+周边的一整套解决方案，并不是每一个公司都有阿里的大牛+真实的线上生产环境测试过。</p>
<blockquote>
<p>好，关于微服务的宏观理解及扩展就总结到这里；其实不要轻视这些思想层面的东西，因为这就是你的谈资；能做不代表会说，会说健谈也是一种能力的体现，做程序员这一行还是不能沉迷于闭门造车，交流总结很重要！后面就去开撸SpringCloud相关的东西了，奥利给！</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成mybatis和druid监控</title>
    <url>/2021/0423/springboot-mybaits-druid.html</url>
    <content><![CDATA[<blockquote>
<p>springboot操作数据的库的方式有很多，jdbcTemplate,jpa,集成mybatis…现在的日常开发，几乎都是采用mybatis框架;它灵活而又层次分明的设计极大的简化了我们对数据库的操作！</p>
</blockquote>
<h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul>
<li><p>MyBatis是一流的持久性框架,mybatis支持自定义SQL，存储过程和高级映射。MyBatis消除了几乎所有的JDBC代码以及参数的手动设置和结果检索。MyBatis可以使用简单的XML或注释进行配置，并将图元，映射接口和Java POJO（普通的旧Java对象）映射到数据库记录.官网：<a class="link"   href="https://mybatis.org/mybatis-3/"  target="_blank">mybatis <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>druid 德鲁伊是阿里巴巴的开源组件之一，结合了C3P0，DBCP的优点，并且自带日志监控！Druid 可以天然的监控 SQL 和 数据库连接池的状况！wiki: <a class="link"   href="https://github.com/alibaba/druid/wiki"  target="_blank">druid wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>看下它的配置属性列表：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>配置</th>
<th>缺省值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td></td>
<td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是：”DataSource-“ + System.identityHashCode(this). 另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错。<a class="link"   href="http://blog.csdn.net/lanmo555/article/details/41248763" >详情-点此处 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</td>
</tr>
<tr>
<td>url</td>
<td></td>
<td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td>username</td>
<td></td>
<td>连接数据库的用户名</td>
</tr>
<tr>
<td>password</td>
<td></td>
<td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。<a class="link"   href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" >详细看这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>driverClassName</td>
<td>根据url自动识别</td>
<td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName</td>
</tr>
<tr>
<td>initialSize</td>
<td>0</td>
<td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td>
</tr>
<tr>
<td>maxActive</td>
<td>8</td>
<td>最大连接池数量</td>
</tr>
<tr>
<td>maxIdle</td>
<td>8</td>
<td>已经不再使用，配置了也没效果</td>
</tr>
<tr>
<td>minIdle</td>
<td></td>
<td>最小连接池数量</td>
</tr>
<tr>
<td>maxWait</td>
<td></td>
<td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>false</td>
<td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td>
</tr>
<tr>
<td>maxPoolPreparedStatementPerConnectionSize</td>
<td>-1</td>
<td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td>
</tr>
<tr>
<td>validationQuery</td>
<td></td>
<td>用来检测连接是否有效的sql，要求是一个查询语句，常用select ‘x’。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</td>
</tr>
<tr>
<td>validationQueryTimeout</td>
<td></td>
<td>单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>true</td>
<td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>false</td>
<td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>false</td>
<td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td>
</tr>
<tr>
<td>keepAlive</td>
<td>false （1.0.28）</td>
<td>连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td>1分钟（1.0.14）</td>
<td>有两个含义： 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td>30分钟（1.0.14）</td>
<td>不再使用，一个DruidDataSource只支持一个EvictionRun</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td></td>
<td>连接保持空闲而不被驱逐的最小时间</td>
</tr>
<tr>
<td>connectionInitSqls</td>
<td></td>
<td>物理连接初始化的时候执行的sql</td>
</tr>
<tr>
<td>exceptionSorter</td>
<td>根据dbType自动识别</td>
<td>当数据库抛出一些不可恢复的异常时，抛弃连接</td>
</tr>
<tr>
<td>filters</td>
<td></td>
<td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall</td>
</tr>
<tr>
<td>proxyFilters</td>
<td></td>
<td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td>
</tr>
</tbody></table>
<h3 id="创建project"><a href="#创建project" class="headerlink" title="创建project"></a>创建project</h3><p>选择Spring Initializr初始化项目，说一下选择依赖这里：Developer Tools-&gt; 我一般三个都勾选(免得后面自己手动添加麻烦)，Web 勾选上Spring Web就可以了。因为我们这里选择用mysql，所以SQL 这里我们选择MySQL Driver;最后项目生成后别忘了选择Enable Atuo Import，选择自动导入依赖！</p>
<p>选择Idea开发我一般都会连上数据库，选择右侧Database链接好数据源，这样就不用每次都打开数据库看表了！第一次设置要下载链接驱动包，这里按常识来就好不再赘述！下载好测试链接：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/18/8wYOht.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/18/8wYxc8.png"
                     
                ></p>
<h3 id="druid配置"><a href="#druid配置" class="headerlink" title="druid配置"></a>druid配置</h3><p>添加pom依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>新建application.yaml 增加如下数据源和mybatis配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 注意8.0以上需要时区的配置</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://xxx.xxx.xxx.xxx:3306/usertest?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错 java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实体类和mapper配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.springstudy.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#当查询数据为空时字段返回为null，不加这个查询数据为空时，字段将被隐藏</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<p>新增配置类DruidConfig:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * druid配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定配置的bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDateSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册后台监控页面。SpringBoot 如何注册Servlet</span></span><br><span class="line">    <span class="comment">// 没有web.xml 的情况配置 Servlet 的方法:ServletRegistrationBean</span></span><br><span class="line">    <span class="comment">// 测试访问 /druid</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// StatViewServlet 配置后台监控</span></span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">StatViewServlet</span>(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//后台的登录用户名和密码</span></span><br><span class="line">        map.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 访问权限</span></span><br><span class="line">        <span class="comment">// map.put(&quot;allow&quot;,&quot;localhost&quot;); //只允许本机访问</span></span><br><span class="line">        map.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 所有人都可以访问</span></span><br><span class="line">        <span class="comment">// deny拒绝访问</span></span><br><span class="line">        <span class="comment">// map.put(&quot;deny&quot;,&quot;192.168.1.1&quot;); // ip会被拒绝访问</span></span><br><span class="line">        bean.setInitParameters(map); <span class="comment">//设置servlet的初始化参数</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤器的配置，看看哪些请求需要被过滤</span></span><br><span class="line">    <span class="comment">// 没有web.xml 的情况配置 Filter 的方法！ FilterRegistrationBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line">        <span class="comment">// 配置内容</span></span><br><span class="line">        <span class="comment">// 配置哪些请求可以被过滤！</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line">        bean.setInitParameters(map);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>启动项目访问：localhost:8080&#x2F;druid 输入用户名密码<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/18/8wYv1f.png"
                     
                ></p>
<h3 id="新增接口测试"><a href="#新增接口测试" class="headerlink" title="新增接口测试"></a>新增接口测试</h3><p>代码省略。。。<br>访问<a class="link"   href="http://localhost:8080/test/queryAllUser" >http://localhost:8080/test/queryAllUser <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>查看druid 监控：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/18/8wYLtI.png"
                     
                ></p>
<blockquote>
<p>至此，spingboot集成mybatis和druid sql监控界面完毕，你就可以放开手脚的实现你的业务代码了！Just do it!</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>springboot,mybatis,druid</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合多数据源</title>
    <url>/2021/0423/springboot-more-datasource.html</url>
    <content><![CDATA[<blockquote>
<p>不知道你们项目中有没有用到多数据源呢？SpringBoot整合多数据源的方式有哪些呢？我们一起来总结下：</p>
</blockquote>
<p>共有三种方式：</p>
<ul>
<li>整合JdbcTemplate</li>
<li>整合JPA</li>
<li>整合Mybatis</li>
</ul>
<p>注：三种方式只能选择一种使用，如果你用了mybatis 再定义其他的方式，springboot无法识别该用哪种方式</p>
<h4 id="JdbcTemplate-多数据源"><a href="#JdbcTemplate-多数据源" class="headerlink" title="JdbcTemplate 多数据源"></a>JdbcTemplate 多数据源</h4><ol>
<li>新建项目，引入依赖</li>
</ol>
<p>选择开发工具那三个依赖，选择web依赖 选择mysql驱动<code>MySQL Driver</code> 选择<code>JDBC API</code></p>
<p>用到的是druid连接池，所以还需要引入对应的依赖</p>
<p>pom依赖如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>新建数据库连接<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># myStudy 库</span></span><br><span class="line"><span class="attr">spring.datasource.one.url</span> = <span class="string">jdbc:mysql://localhost:3306/myStudy?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.one.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"># myStudy1 库</span></span><br><span class="line"><span class="attr">spring.datasource.two.url</span> = <span class="string">jdbc:mysql://localhost:3306/myStudy1?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.two.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></div></li>
<li>新增DataSource数据源配置</li>
</ol>
<p>因为这里是自定义的数据库连接配置，那么springboot 自动识别就失效了，我们需要手动指定对应的DataSource</p>
<p>新增DataSourceConfig类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix=&quot;spring.datasource.one&quot;)</span></span><br><span class="line">    DataSource <span class="title function_">dbOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix=&quot;spring.datasource.two&quot;)</span></span><br><span class="line">    DataSource <span class="title function_">dbTwo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>新增JDBCTemplateConfig类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JdbcTemplate <span class="title function_">jdbcTemplateOne</span><span class="params">(<span class="meta">@Qualifier(&quot;dbOne&quot;)</span> DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JdbcTemplate <span class="title function_">jdbcTemplateTwo</span><span class="params">(<span class="meta">@Qualifier(&quot;dbTwo&quot;)</span> DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li><p>添加UserInfo实体，代码略</p>
</li>
<li><p>测试验证</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> more.dbs.entity.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;jdbcTemplateOne&quot;)</span></span><br><span class="line">    JdbcTemplate jdbcTemplateOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;jdbcTemplateTwo&quot;)</span></span><br><span class="line">    JdbcTemplate jdbcTemplateTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJDBCTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;UserInfo&gt; queryOne = jdbcTemplateOne.query(<span class="string">&quot;select * from user_info&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(UserInfo.class));</span><br><span class="line"></span><br><span class="line">        List&lt;UserInfo&gt; queryTwo = jdbcTemplateTwo.query(<span class="string">&quot;select * from user_info&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(UserInfo.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(queryOne);</span><br><span class="line">        System.out.println(queryTwo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>验证结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/06/Gs4dqe.png"
                      alt="jdbcTemplate_test"
                ></p>
</li>
</ol>
<h4 id="JPA-多数据源"><a href="#JPA-多数据源" class="headerlink" title="JPA 多数据源"></a>JPA 多数据源</h4><ol>
<li>在以上pom 依赖中添加<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
application.propertise中需要加上jpa的配置<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.jpa.properties.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="attr">spring.jpa.properties.database-platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">spring.jpa.properties.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">spring.jpa.properties.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.dialect</span> = <span class="string">org.hibernate.dialect.MySQL57Dialect</span></span><br></pre></td></tr></table></figure></div></li>
<li>因为用了JPA 所以我们的实体要指定表，这里我们新建一个实体<code>UserInfoJpa</code><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity(name=&quot;user_info&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoJpa</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserInfoJpa&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, deleted=&quot;</span> + deleted +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>新增JPA 数据源bean<br>新增jpa配置,JpaConfig1代码：<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;more.dbs.jpaDao&quot;,entityManagerFactoryRef = &quot;factoryBean1&quot;,transactionManagerRef = &quot;transactionManager1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaConfig1</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dbOne&quot;)</span></span><br><span class="line">    DataSource dbOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    LocalContainerEntityManagerFactoryBean <span class="title function_">factoryBean1</span><span class="params">(EntityManagerFactoryBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dbOne)</span><br><span class="line">                .properties(jpaProperties.getProperties())</span><br><span class="line">                .persistenceUnit(<span class="string">&quot;jpa_db1&quot;</span>)</span><br><span class="line">                .packages(<span class="string">&quot;more.dbs.entity&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置事务</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PlatformTransactionManager <span class="title function_">transactionManager1</span><span class="params">(EntityManagerFactoryBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionManager</span>(factoryBean1(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
同理，新增JpaConfig2，将1改成2，dbOne 改成 dbTwo即可,代码略</li>
</ol>
<p>注⚠️：这个地方必须加上@Primary注解，表示当有多个LocalContainerEntityManagerFactoryBean 优先使用加了此注解的bean,同样需要在DataSourceConfig类中的dbOne()上加上此注解；</p>
<p>新建jpaDao 中创建两个dao接口 继承自JpaRepository&lt;UserInfoJpa,Integer&gt;</p>
<p>UserInfoDao1代码如下,UserInfoDao2同UserInfoDao1：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.jpaDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> more.dbs.entity.UserInfoJpa;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfoDao1</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;UserInfoJpa,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>测试<br>新增测试代码如下：<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserInfoDao1 userInfoDao1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserInfoDao2 userInfoDao2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJpa</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;UserInfoJpa&gt; userInfoList1 = userInfoDao1.findAll();</span><br><span class="line">    List&lt;UserInfoJpa&gt; userInfoList2 = userInfoDao2.findAll();</span><br><span class="line"></span><br><span class="line">    System.out.println(userInfoList1);</span><br><span class="line">    System.out.println(userInfoList2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/06/Gy9YWV.png"
                      alt="jpa_test"
                ></li>
</ol>
<h4 id="MyBatis-多数据源"><a href="#MyBatis-多数据源" class="headerlink" title="MyBatis 多数据源"></a>MyBatis 多数据源</h4><ol>
<li>新增pom依赖：<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>新增mybatis 数据源配置</li>
</ol>
<p>MybatisConfig1代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;more.dbs.mybatisMapper&quot;,sqlSessionFactoryRef = &quot;sqlSessionFactory1&quot;,sqlSessionTemplateRef = &quot;sqlSessionTemplate1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig1</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dbOne&quot;)</span></span><br><span class="line">    DataSource dbOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SqlSessionFactory <span class="title function_">sqlSessionFactory1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean.setDataSource(dbOne);</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SqlSessionTemplate <span class="title function_">sqlSessionTemplate1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>同理，增加MybatisConfig2 配置，将1改成2，dbOne改成dbTwo即可</p>
<ol start="3">
<li>新增dao 和 mapper 层</li>
</ol>
<p>mybatisMapper 下新增UserInfoMapper1 和UserInfoMapper1.xml</p>
<p>UserInfoMapper1 代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> more.dbs.mybatisMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> more.dbs.entity.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfoMapper1</span> &#123;</span><br><span class="line">    List&lt;UserInfo&gt; <span class="title function_">getAllUserInfo1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>UserInfoMapper1.xml 代码：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;more.dbs.mybatisMapper.UserInfoMapper1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserInfo1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;more.dbs.entity.UserInfo&quot;</span>&gt;</span></span><br><span class="line">        select * from user_info</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>同理在mybatisMapper 下新增UserInfoMapper2 和UserInfoMapper2.xml，代码略</p>
<ol start="4">
<li>测试<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserInfoMapper1 userInfoMapper1;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserInfoMapper2 userInfoMapper2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMybatis</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;UserInfo&gt; userInfoList1 = userInfoMapper1.getAllUserInfo1();</span><br><span class="line">    List&lt;UserInfo&gt; userInfoList2 = userInfoMapper2.getAllUserInfo2();</span><br><span class="line"></span><br><span class="line">    System.out.println(userInfoList1);</span><br><span class="line">    System.out.println(userInfoList2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/06/GyYbOU.png"
                      alt="mybatis_test"
                ></li>
</ol>
<blockquote>
<p>小结： 至此springBoot整合多数据源的三种配置方式总结完了，其实工作中很少这么玩儿，基本都是分库分表拆分业务了。<br>但是如果有些需求真的要是如此的话，希望我们也能找到对应的办法！</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>多数据源</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Eureka</title>
    <url>/2021/0423/springcloud-eureka.html</url>
    <content><![CDATA[<blockquote>
<p>上篇我们了解了SpringCloud的一个整体架构，我们知道Eureka是Netflix的一个核心组件，那么我们有必要彻底去了解一下它；废话不多说，我们开始</p>
</blockquote>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。</p>
<p>Eureka包含两个组件：<strong>Eureka Server</strong>和<strong>Eureka Client</strong>。</p>
<p><strong>Eureka Server</strong>提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p>
<p><strong>Eureka Client</strong>是一个java客户端，用于简化与Eureka Server的交互，客户端同时也就是一个内置的、使用轮询(round-robin)负载算法的负载均衡器。</p>
<p>注：Eureka 遵循AP原则<br>CAP 原则：c -&gt; 一致性;A -&gt; 可用性；p -&gt; 分区容错性；<br>和Zookeeper 相比，zookeeper遵循CP原则；<br>具体可以参考博客：<a class="link"   href="https://www.jianshu.com/p/5c5753d2aeb0"  target="_blank">Eureka与Zookeeper对比 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><p>开始之前我们回顾下不用注册中心，我们都是怎么调用的<br>httpClient或者restTemplate，这里我们回顾下RestTemplate的 写法如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">setRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/call&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;localhost:xxxx/test/call&quot;</span>,String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>那么这种写法，相当于写死了通信地址，硬编码格式；那么eureak 就是提供了一个地方动态的感知这些服务，让处于一个注册中心或者注册中心集群内的客户端间能互相通信，并且ribbon 和feign提供了负载均衡的算法，能让服务在多个节点上访问均匀分布以此来缓解单台服务的压力；</p>
<h4 id="注册中心搭建"><a href="#注册中心搭建" class="headerlink" title="注册中心搭建"></a>注册中心搭建</h4><p>新建项目eureka-test,新建子模块eureka-server9001作为注册中心服务端</p>
<p>导入依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>yaml配置</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#appname: eureka-server9001</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#当为单例时是否从eureka上获取服务的具体信息</span></span><br><span class="line">    <span class="attr">fetch-register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#当为单例时是否将自己注册到eureka</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server-9001</span></span><br></pre></td></tr></table></figure></div>
<p>启动测试<br>记得启动类上加上<code>@EnableEurekaServer</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/27/tFxRrq.png"
                     
                ></p>
<p>注⚠️：注册中心的实例名即配置的<code>appname</code> 如果未设置将默认为配置的<code>spring.application.name</code><br>从截图我们看到，服务端9001自己注册上去了，我们只需要将配置文件中的<code>fetch-register-with-eureka</code>改为false即可，另外你也可以将<code>fetch-registry</code>改为true 看下结果哈，或者将两个配置都改为true，你将会有神奇的发现；</p>
<p>注⚠️：当仅有自己一个节点时，以上两个配置才会生效。当有多个实例子时，服务端都会将自己注册到注册中心；</p>
<h4 id="创建eureka客户端实例"><a href="#创建eureka客户端实例" class="headerlink" title="创建eureka客户端实例"></a>创建eureka客户端实例</h4><p>创建新模块，eureka-client8001,eureka-client8002；并将它们注册到9001的eureka 服务端上去，以实现客户端的通信</p>
<p>同上引入eureka的starter依赖，启动类上加上<code>@EnableEurekaClient</code>注解<br><em><strong>小技巧：</strong></em><br>为了后面可以看到实例信息，我们将8001依赖及配置改写如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- maven 构建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring-eureka<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--以$ 开头或结尾的在src/main/resources下的配置就可以被分割读取到--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>yaml配置如下:</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#注册服务时使用服务的ip地址</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">eureka客户端8001</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:9001/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-client-8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">eureka-client-8001</span></span><br><span class="line">  <span class="attr">app.author:</span> <span class="string">echo</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">ycl</span></span><br><span class="line">  <span class="attr">build.version:</span> <span class="string">$&#123;project.version&#125;</span></span><br><span class="line">  <span class="attr">build.artifactId:</span> <span class="string">$&#123;project.artifactId&#125;</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/29/tmmUTP.png"
                     
                ></p>
<p>8002配置同上</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/28/tmPkxx.png"
                     
                ></p>
<h4 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/30/tKBtC6.png"
                     
                ><br>Eureka在运行期间会统计心跳失败的比例，在15分钟内是否低于85%,如果出现了低于的情况，Eureka Server会将当前的实例注册信息保护起来，同时提示一个警告，一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据。也就是不会注销任何微服务。</p>
<p>默认情况下不建议关闭自我保护机制，如果要关闭<br><code>eureka.server.enable-self-preservation=false</code></p>
<h4 id="eureka-集群搭建"><a href="#eureka-集群搭建" class="headerlink" title="eureka 集群搭建"></a>eureka 集群搭建</h4><p>新增子模块eureka-server9002，eureka-server9003<br>将以上三个服务端互相注册，注⚠️：集群至少是三个起步才叫集群哈<br>9001 yaml配置<br><code>defaultZone: http://eureka9002.com:9002/eureka,http://eureka9003.com:9003/eureka</code><br>9002 yaml配置 9001 9003,9003 配置9001 9002 这样保证了一个节点在其他节点都有配置</p>
<p>host 配置如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       eureka9001.com</span><br><span class="line">127.0.0.1       eureka9002.com</span><br><span class="line">127.0.0.1       eureka9003.com</span><br></pre></td></tr></table></figure></div>
<p>我们将8001 注册到9001 注册中心，查看其他两个注册中心是否有同步该注册信息<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/30/tK6C0e.png"
                     
                ><br>可以发现通过集群的配置，单一注册的实例也会注册到其他节点上，这也侧面说明了eureka的ap原则中的高可用性</p>
<h4 id="eureka和ZK的区别"><a href="#eureka和ZK的区别" class="headerlink" title="eureka和ZK的区别"></a>eureka和ZK的区别</h4><p>eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p>
<ul>
<li><ol>
<li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>
</ol>
</li>
<li><ol start="2">
<li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)</li>
</ol>
</li>
<li><ol start="3">
<li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li>
</ol>
</li>
</ul>
<p>Zookeeper 集群中的节点会自动选举一个作为主节点，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这将导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用。</p>
<blockquote>
<p>小结：有了注册中心后，我们的服务间就可以统一注册到一个地方，从而实现服务间的负载均衡调用了；后面将继续总结ribbon</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Ribbon(待填坑)</title>
    <url>/2021/0423/springcloud-ribbon.html</url>
    <content><![CDATA[<blockquote>
<p>紧接上篇，我们来总结下ribbon负载均衡相关知识点</p>
</blockquote>
<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>回顾上篇文章，我们了解了Eureka注册中心集群的搭建及和ZK的类比，我们知道eureka的核心价值在于保证服务集群的高可用，那除了它内部的心跳检测及自我保护机制之外呢，ribbon提供来负载均衡的算法，将我们的请求均摊到集群的各个节点上，从而作为我们服务器降压及扩容的一个手段！</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3>]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>ribbon,feign</tag>
      </tags>
  </entry>
  <entry>
    <title>世界上最流行的框架Swagger</title>
    <url>/2021/0423/swagger-ui.html</url>
    <content><![CDATA[<blockquote>
<p>你们项目中有用到Swagger吗？你真的会用这个框架吗？哈哈，都说用了Swagger的都不用写文档了，但是打开项目的Swagger地址看看，惨不忍睹啊！都是些什么东西啊，东西没用好就是这样的结果！</p>
</blockquote>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<a class="link"   href="http://swagger.io/"  target="_blank">官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>&#x3D;&#x3D;作用&#x3D;&#x3D;</p>
<ul>
<li><ol>
<li>接口的文档在线自动生成</li>
</ol>
</li>
<li><ol start="2">
<li>功能测试</li>
</ol>
</li>
</ul>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>之前我们说springboot用啥就引入对应的starter就好了，那么这里你也可以引入对应的starter</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>注：Springfox是践行OAS的一个项目，它将Swagger融合进流行的Spring框架，根据OpenAPI规范，帮助开发者自动生成API文档</p>
<h3 id="开启Swagger及其配置"><a href="#开启Swagger及其配置" class="headerlink" title="开启Swagger及其配置"></a>开启Swagger及其配置</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册bean Docket</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">// 使Swagger生效，默认是不开启!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringStudyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(SpringStudyApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>默认地址：<a class="link"   href="http://localhost:8080/swagger-ui.html" >http://localhost:8080/swagger-ui.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/24/8OUK7d.png"
                     
                ><br>可以看到这里有一个basic-error-controller 和我们自己定义的一个controller</p>
<p>点开我们自己定义的一个controllerk看下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8OdTmD.png"
                     
                ><br>可以看到一个接口各种类型的请求，这是为什么呢？是因为我用到是@RequestMapping注解，且没有指定请求类型。<br>我们改成<code>@RequestMapping(value=&quot;/getDepartments&quot;,method= RequestMethod.GET)</code>或<code>@GetMapping(value=&quot;/getDepartments&quot;)</code>再看：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8Ow2DS.png"
                     
                ><br>现在就只剩一个方式的请求了，所以写接口这里一定要精确！别偷懒，习惯真的很重要！</p>
<p>但是很多人用就仅仅用到这一步了，打开看看别说前端看不懂时间长了自己写的都认不得了！</p>
<h3 id="再配置及规范"><a href="#再配置及规范" class="headerlink" title="再配置及规范"></a>再配置及规范</h3><blockquote>
<p>配置docket</p>
</blockquote>
<p>可以点进源码看看，阅读源码的方法：看其实现和继承-&gt;看其构造方法-&gt;看其重写方法-&gt;看其其他方法实现</p>
<p>这里就不再赘述，直接看其构造方法，配置Swagger的参数！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Profiles;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册bean Docket</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment env)</span>&#123;</span><br><span class="line">        <span class="comment">// 设置要显示swagger的环境 在application.properties 中配置spring.profiles.active=dev</span></span><br><span class="line">        <span class="comment">// spring 配置的优先级是properties&gt;yaml文件的  所以我一般保留一个properties来配置最高权限的配置</span></span><br><span class="line">        <span class="comment">// 而application.yaml用来配置数据库连接池等通用配置</span></span><br><span class="line">        <span class="type">Profiles</span> <span class="variable">pro</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否是对应的环境</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">enable</span> <span class="operator">=</span> env.acceptsProfiles(pro);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo()) <span class="comment">// 配置文档信息!</span></span><br><span class="line">                .enable(enable) <span class="comment">// 如果是false就无法在浏览器中访问，可以配置</span></span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.springstudy.controller&quot;</span>))<span class="comment">//配置哪些目录下的被扫描</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/test/**&quot;</span>)) <span class="comment">//配置只扫描/test开头的请求</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置文档信息 apiInfo</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;城南花已开&quot;</span>,<span class="string">&quot;http://123.57.82.136:8080/&quot;</span>,<span class="string">&quot;1156947957@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//public static final Contact DEFAULT_CONTACT = new Contact(&quot;name&quot;, &quot;url&quot;, &quot;email&quot;);</span></span><br><span class="line">    <span class="comment">//DEFAULT = new ApiInfo(</span></span><br><span class="line">        <span class="comment">// &quot;Api Documentation&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;Api Documentation&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;1.0&quot;, &quot;urn:tos&quot;,</span></span><br><span class="line">        <span class="comment">// DEFAULT_CONTACT,</span></span><br><span class="line">        <span class="comment">// &quot;Apache 2.0&quot;,</span></span><br><span class="line">        <span class="comment">// &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;,</span></span><br><span class="line">        <span class="comment">// new ArrayList());</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">    <span class="string">&quot;SpringBoot-Plus 接口文档信息&quot;</span>,</span><br><span class="line">            <span class="string">&quot;所有的测试请求地址&quot;</span>,</span><br><span class="line">            <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://123.57.82.136:8080/&quot;</span>, <span class="comment">//服务地址，可以配置公司官网</span></span><br><span class="line">             contact,<span class="comment">//组织连接</span></span><br><span class="line">            <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>补充说明：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8OclSH.png"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">any() <span class="comment">// 扫描所有，项目的所有接口都会被扫描的</span></span><br><span class="line">none() <span class="comment">// 不扫描接口</span></span><br><span class="line">basePackage() <span class="comment">// 根据包路径扫描</span></span><br><span class="line">withMethodAnnotation(GetMapping.class) <span class="comment">// 通过方法注解扫描! 比如 GetMapping.class</span></span><br><span class="line">withClassAnnotation(Controller.class) <span class="comment">// 通过类上的注解扫描! 比如 Controller.class</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8Oc1ld.png"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ant() <span class="comment">// 指定扫描路径</span></span><br><span class="line">any() <span class="comment">// 扫描整个项目</span></span><br><span class="line">none() <span class="comment">// 都不扫描</span></span><br><span class="line">regex() <span class="comment">// 根据正则匹配扫描</span></span><br></pre></td></tr></table></figure></div>
<p>新增“&#x2F;test&#x2F;hello”路径下接口我们来看下效果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8O2ePO.png"
                     
                ></p>
<blockquote>
<p>分组</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">        .groupName(<span class="string">&quot;test&quot;</span>)<span class="comment">//新增分组配置</span></span><br><span class="line">        <span class="comment">// ...其他代码省略</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>看下分组效果：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8OhWh6.png"
                     
                ></p>
<h3 id="swagger注解"><a href="#swagger注解" class="headerlink" title="swagger注解"></a>swagger注解</h3><p>实体：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;部门实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;部门id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;部门名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>controller :</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springstudy.dao.DepartmentMapper;</span><br><span class="line"><span class="keyword">import</span> com.springstudy.entity.Department;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/department&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;部门接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过id获取部门数据&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDepartment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">getDepartment</span><span class="params">(<span class="meta">@ApiParam(&quot;部门id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDepartment(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">基本写到这样就可以来哈，太多了也显得乱！简洁明了即可</span><br></pre></td></tr></table></figure></div>
<h3 id="ui选型"><a href="#ui选型" class="headerlink" title="ui选型"></a>ui选型</h3><ul>
<li>1.默认的 <a class="link"   href="http://localhost:8081/swagger-ui.html" >http://localhost:8081/swagger-ui.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>2.BootStrap-ui <a class="link"   href="http://localhost:8080/doc.html" >http://localhost:8080/doc.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/swagger-bootstrap-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/25/8O4T2T.png"
                     
                ><br>个人最喜欢这款，其他的自己去尝试，或者可以研究下底层api接口自己写个皮肤出来，然后开源出来嘛！</li>
<li>3.Layui的框架 <a class="link"   href="http://localhost:8080/docs.html" >http://localhost:8080/docs.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.caspar-chen/swagger-ui-layer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>4.mg-ui <a class="link"   href="http://localhost:8080/document.html" >http://localhost:8080/document.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<blockquote>
<p>本来没想写swagger的，但是最近改别个系统遗留下的bug，前台传参巨复杂,后台代码写的及其没有层次感，关键地方一句注释没有，真是要了老命，想着看看swagger-ui 上接口及返回值有没有说明，发现啥也没有。可真是骂人的心都有了，怎么一点规范都没有呢？！如果你也有同样的烦恼希望这篇博客可以帮到你，加油，奥利给！</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义一个starter</title>
    <url>/2021/0423/write-one-starter.html</url>
    <content><![CDATA[<blockquote>
<p>spring 发展至今，已经可以变得很轻巧了。需要用什么配置只需导入对应的依赖也就是对应的starter即可，为何加入了对应的start就可以实现对应的配置和功能呢？我们带着问题来探讨一下：</p>
</blockquote>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>我们以mybatis为例，看看它的starter实现：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;2.1.1&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>加入此依赖，maven会为我们加载两个依赖：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/18/8DyPxg.png"
                     
                ></p>
<p>一个是autoconfigure, 一个是starter<br>先看看里面MATE-INF都有些什么？<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/19/8D4NFJ.png"
                     
                ><br>定义了EnableAutoConfiguration 要加载的两个配置的地址</p>
<p>我们再看看对应starter下的pom.xml 和pom.properties<br>我们看下里面都有些什么。</p>
<p>pom.properties：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Created by Apache Maven 3.6.1</span></span><br><span class="line"><span class="string">groupId=org.mybatis.spring.boot</span></span><br><span class="line"><span class="string">artifactId=mybatis-spring-boot-starter</span></span><br><span class="line"><span class="string">version=2.1.1</span></span><br></pre></td></tr></table></figure></div>
<p>可以看出其实是声明了自己的版本</p>
<p>pom.xml：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;?xml</span> <span class="string">version=&quot;1.0&quot;</span> <span class="string">encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span></span><br><span class="line"></span><br><span class="line">       <span class="string">Copyright</span> <span class="number">2015</span><span class="number">-2019</span> <span class="string">the</span> <span class="string">original</span> <span class="string">author</span> <span class="string">or</span> <span class="string">authors.</span></span><br><span class="line"></span><br><span class="line">       <span class="string">Licensed</span> <span class="string">under</span> <span class="string">the</span> <span class="string">Apache</span> <span class="string">License,</span> <span class="string">Version</span> <span class="number">2.0</span> <span class="string">(the</span> <span class="string">&quot;License&quot;</span><span class="string">);</span></span><br><span class="line">       <span class="string">you</span> <span class="string">may</span> <span class="string">not</span> <span class="string">use</span> <span class="string">this</span> <span class="string">file</span> <span class="string">except</span> <span class="string">in</span> <span class="string">compliance</span> <span class="string">with</span> <span class="string">the</span> <span class="string">License.</span></span><br><span class="line">       <span class="string">You</span> <span class="string">may</span> <span class="string">obtain</span> <span class="string">a</span> <span class="string">copy</span> <span class="string">of</span> <span class="string">the</span> <span class="string">License</span> <span class="string">at</span></span><br><span class="line"></span><br><span class="line">          <span class="string">http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"></span><br><span class="line">       <span class="string">Unless</span> <span class="string">required</span> <span class="string">by</span> <span class="string">applicable</span> <span class="string">law</span> <span class="string">or</span> <span class="string">agreed</span> <span class="string">to</span> <span class="string">in</span> <span class="string">writing,</span> <span class="string">software</span></span><br><span class="line">       <span class="string">distributed</span> <span class="string">under</span> <span class="string">the</span> <span class="string">License</span> <span class="string">is</span> <span class="string">distributed</span> <span class="string">on</span> <span class="string">an</span> <span class="string">&quot;AS IS&quot;</span> <span class="string">BASIS,</span></span><br><span class="line">       <span class="string">WITHOUT</span> <span class="string">WARRANTIES</span> <span class="string">OR</span> <span class="string">CONDITIONS</span> <span class="string">OF</span> <span class="string">ANY</span> <span class="string">KIND,</span> <span class="string">either</span> <span class="string">express</span> <span class="string">or</span> <span class="string">implied.</span></span><br><span class="line">       <span class="string">See</span> <span class="string">the</span> <span class="string">License</span> <span class="string">for</span> <span class="string">the</span> <span class="string">specific</span> <span class="string">language</span> <span class="string">governing</span> <span class="string">permissions</span> <span class="string">and</span></span><br><span class="line">       <span class="string">limitations</span> <span class="string">under</span> <span class="string">the</span> <span class="string">License.</span></span><br><span class="line"></span><br><span class="line"><span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;project</span> <span class="string">xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="string">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="string">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span> <span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span><br><span class="line">  <span class="string">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line">  <span class="string">&lt;parent&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;mybatis-spring-boot&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;2.1.1&lt;/version&gt;</span></span><br><span class="line">  <span class="string">&lt;/parent&gt;</span></span><br><span class="line">  <span class="string">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">  <span class="string">&lt;name&gt;mybatis-spring-boot-starter&lt;/name&gt;</span></span><br><span class="line">  <span class="string">&lt;properties&gt;</span></span><br><span class="line">    <span class="string">&lt;module.name&gt;org.mybatis.spring.boot.starter&lt;/module.name&gt;</span></span><br><span class="line">  <span class="string">&lt;/properties&gt;</span></span><br><span class="line">  <span class="string">&lt;dependencies&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">      <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">      <span class="string">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">      <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">      <span class="string">&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;!--可以看见这里导入了对应的一个配置依赖--&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">      <span class="string">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line">      <span class="string">&lt;artifactId&gt;mybatis-spring-boot-autoconfigure&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">      <span class="string">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line">      <span class="string">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">      <span class="string">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line">      <span class="string">&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line">  <span class="string">&lt;/dependencies&gt;</span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>那么starter中没有什么，真正的配置在其autoconfigure中<br>可以看出autoconfigure中一个接口，4个类。<br>我们从下往上解读一下：</p>
<ul>
<li>SpringBootVFS 是一个读取文件的类 继承自VFS抽象类</li>
<li>MybatisProperties 顾名思义 mybatis 属性类</li>
<li>MybatisLanguageDriverAutoConfiguration mybatis语言驱动类</li>
<li>MybatisAutoConfiguration mybatis 自动配置类</li>
<li>ConfigurationCustomizer 函数式接口  提供了一个customize()方法可以设置自己的配置</li>
</ul>
<p>customize()方法配置可以参考：<a class="link"   href="http://www.yyjjssnn.cn/articles/839.html"  target="_blank">博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>那么重要的就是看MybatisAutoConfiguration 这个类了</p>
<p>我们来看下其源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;SqlSessionFactory.class, SqlSessionFactoryBean.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MybatisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MybatisAutoConfiguration.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MybatisProperties properties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Interceptor[] interceptors;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeHandler[] typeHandlers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LanguageDriver[] languageDrivers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatabaseIdProvider databaseIdProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ConfigurationCustomizer&gt; configurationCustomizers;</span><br><span class="line">    ...省略其余代码</span><br></pre></td></tr></table></figure></div>
<p>首先我们看下类上的注解：</p>
<ul>
<li>@ConditionalOnBean，仅在当前上下文中存在某个bean时，才会实例化这个Bean。</li>
<li>@ConditionalOnClass，某个class位于类路径上，才会实例化这个Bean。</li>
<li>@ConditionalOnExpression，当表达式为true的时候，才会实例化这个Bean。</li>
<li>@ConditionalOnMissingBean，仅在当前上下文中不存在某个bean时，才会实例化这个Bean。</li>
<li>@ConditionalOnMissingClass，某个class在类路径上不存在的时候，才会实例化这个Bean。</li>
<li>@ConditionalOnNotWebApplication，不是web应用时才会实例化这个Bean。</li>
<li>@AutoConfigureAfter，在某个bean完成自动配置后实例化这个bean。</li>
<li>@AutoConfigureBefore，在某个bean完成自动配置前实例化这个bean</li>
</ul>
<p>要完成Mybatis的自动配置，需要在类路径中存在SqlSessionFactory.class、SqlSessionFactoryBean.class这两个类，需要存在DataSource这个bean且这个bean要完成自动注册</p>
<p>@Configuration @Bean正是完成bean注册的关键！<br>那完成bean注册后又是如何找到对应的bean的呢？我们来看下面的一个类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguredMapperScannerRegistrar</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span>, ImportBeanDefinitionRegistrar &#123;</span><br><span class="line">        <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AutoConfiguredMapperScannerRegistrar</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!AutoConfigurationPackages.has(<span class="built_in">this</span>.beanFactory)) &#123;</span><br><span class="line">                MybatisAutoConfiguration.logger.debug(<span class="string">&quot;Could not determine auto-configuration package, automatic mapper scanning disabled.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MybatisAutoConfiguration.logger.debug(<span class="string">&quot;Searching for mappers annotated with @Mapper&quot;</span>);</span><br><span class="line">                List&lt;String&gt; packages = AutoConfigurationPackages.get(<span class="built_in">this</span>.beanFactory);</span><br><span class="line">                <span class="keyword">if</span> (MybatisAutoConfiguration.logger.isDebugEnabled()) &#123;</span><br><span class="line">                    packages.forEach((pkg) -&gt; &#123;</span><br><span class="line">                        MybatisAutoConfiguration.logger.debug(<span class="string">&quot;Using auto-configuration base package &#x27;&#123;&#125;&#x27;&quot;</span>, pkg);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);</span><br><span class="line">                builder.addPropertyValue(<span class="string">&quot;processPropertyPlaceHolders&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                builder.addPropertyValue(<span class="string">&quot;annotationClass&quot;</span>, Mapper.class);</span><br><span class="line">                builder.addPropertyValue(<span class="string">&quot;basePackage&quot;</span>, StringUtils.collectionToCommaDelimitedString(packages));</span><br><span class="line">                <span class="type">BeanWrapper</span> <span class="variable">beanWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(MapperScannerConfigurer.class);</span><br><span class="line">                Stream.of(beanWrapper.getPropertyDescriptors()).filter((x) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> x.getName().equals(<span class="string">&quot;lazyInitialization&quot;</span>);</span><br><span class="line">                &#125;).findAny().ifPresent((x) -&gt; &#123;</span><br><span class="line">                    builder.addPropertyValue(<span class="string">&quot;lazyInitialization&quot;</span>, <span class="string">&quot;$&#123;mybatis.lazy-initialization:false&#125;&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">                registry.registerBeanDefinition(MapperScannerConfigurer.class.getName(), builder.getBeanDefinition());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>AutoConfiguredMapperScannerRegistrar 故名思义 自动配置扫描注册 好了我们基本已经知道了starter的原理，再去照猫画虎写一个类似的例子就可以加深理解了</p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个空的项目，增加两个module</p>
<p>规约：Spring 自带的spring-boot-starter-xxx 自己定义或第三方提供的xxx-spring-boot-starter<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/19/8DW3LD.png"
                     
                ></p>
<p>starter的pom.xml配置中新增autoconfigure的依赖：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependencies&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;com.coding&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;coding-spring-boot-start-autoconfigure&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>autoconfigure 的 pom.xml中新增spring-boot-starter的依赖：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependencies&gt;</span></span><br><span class="line">    <span class="string">&lt;!--所有启动器的基础模块--&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>autoconfiguer 模块新增三个类：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/19/8Dfsc6.png"
                     
                ><br>代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 不要使用Lombok 写上get set方法 如果别人不用Lombok 亦要保证可用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;coding.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloProperties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrefix</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuffix</span><span class="params">(String suffix)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="comment">//注入配置类</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="keyword">public</span> HelloProperties <span class="title function_">getHelloProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String userName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() +userName+ helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span> <span class="comment">// 关联配置文件</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">// 只在web项目才生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceAutoconfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将HelloSerive 放入容器  并和helloProperties 配置关联</span></span><br><span class="line">    <span class="keyword">public</span>  HelloService <span class="title function_">helloService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">        helloService.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span>  helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在autoconfigure模块下resource下增加META-INF 下添加spring.factories</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">com.coding.HelloServiceAutoconfiguration</span></span><br></pre></td></tr></table></figure></div>

<h3 id="install到本地仓库"><a href="#install到本地仓库" class="headerlink" title="install到本地仓库"></a>install到本地仓库</h3><p>注：⚠️ 两个都要install完成<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/19/8D4om8.png"
                     
                ></p>
<h3 id="新建项目测试"><a href="#新建项目测试" class="headerlink" title="新建项目测试"></a>新建项目测试</h3><p>在新建的pom.xml文件中添加starter依赖：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.coding&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;coding-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>看到依赖已新增：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/19/8D5itJ.png"
                     
                ><br>在application.properties中添加配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">coding.hello.prefix = &quot;hello, &quot;</span><br><span class="line">coding.hello.suffix = &quot; hao are you?&quot;</span><br></pre></td></tr></table></figure></div>
<p>新增接口测试：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/19/8D5n0O.png"
                     
                ></p>
<p>可以看到 配置类通过starter依赖项已经读取到了。至此我们实现了一个简单的starter定义，后面我们如果一些重复的功能我们是不是可以考虑以这种方式放到我们自己的maven上面，谁要使用引入对应的starter即可，还可以支持对应的配置！</p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>starter</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的会打印日志吗？</title>
    <url>/2021/0423/teache-you-log.html</url>
    <content><![CDATA[<blockquote>
<p>作为一个猿，大家多多少少应该都改过线上的bug吧，这种本地复现不了，线上又有的bug你们都是怎么定位的呢？我想日志可能是首选办法了吧，那么你们的日志打印都有什么规范呢？你还是用的log4j吗？一起来了解下logback吧</p>
</blockquote>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Logback是由log4j创始人设计的一个开源日志组件，可以说是log4j的升级版也不为过！</p>
<p>logback 官网：<a class="link"   href="http://logback.qos.ch/index.html"  target="_blank">官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>logbook 中文网：<a class="link"   href="http://www.logback.cn/"  target="_blank">中文网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>我们知道，我们平时打印的日志级别一般为info 和error 较多，那么我们为了标明不同的日志级别，我们需要借助一个彩色日志插件：<code>Grep Console</code></p>
<p>可以去对应的插件plugins处下载，但是我这边idea marketPlace中就是没有，蛋疼！<br>还是去idea官网下吧，<a class="link"   href="https://plugins.jetbrains.com/plugin/7125-grep-console"  target="_blank">插件下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>下载后，我们解压到idea 的安装目录下的plugin中然后重启idea即可，<span style="color:red">记得查看自己的idea 版本下载对应的插件版本哈！</span><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/06/Ykg8DH.jpg"
                     
                ></p>
<h4 id="1-新建项目，引入依赖："><a href="#1-新建项目，引入依赖：" class="headerlink" title="1.新建项目，引入依赖："></a>1.新建项目，引入依赖：</h4><p>选择lombok 和 Springweb 依赖</p>
<p>因为后面我们需要用Slf4j来打印日志，所以需要添加Lombok依赖哈！<br>因为后面打印日志的配置指定了对应的环境，所以我们需要在配置中也指定对应的环境，否则无法打印</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure></div>
<h4 id="2-新增配置："><a href="#2-新增配置：" class="headerlink" title="2.新增配置："></a>2.新增配置：</h4><p>在resource下新配置文件 logback.xml 和log文件夹<br>注：<code>log.path</code> 对应的value值即为 log文件夹的位置，记得不要写错！<br>配置如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以后这个文件只需要改几个地方！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG（开发） &lt; INFO(SpringBoot默认的！) &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出文件的位置！--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/Users/echo/Documents/sCloud/spring-study/src/main/resources/log&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 和我们项目的环境对应一定要！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.coding&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span></span><br><span class="line"><span class="comment">            可以包含零个或多个appender元素。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志在生成环境中的级别一定要提高，保证效率！ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.coding&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>注⚠️：这些配置基本都不会变动的，拿过去用即可；如果想去了解原理，也可以去官网了解（意义不大）！</p>
<h3 id="3-打印测试"><a href="#3-打印测试" class="headerlink" title="3.打印测试"></a>3.打印测试</h3><p>测试类如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;测试打印 info信息&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;测试打印 error信息&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;测试打印 warn信息&quot;</span>);</span><br><span class="line">        log.trace(<span class="string">&quot;测试打印 trace信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>启动测试查看控制台输入如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/07/YV6v26.jpg"
                     
                ><br>查看log文件夹下产生文件如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/07/YVchod.png"
                     
                ></p>
<blockquote>
<p>至此，我们已经完成了 日志的统一处理，有木有很简单呢？赶快动手试一下吧，这么好看的日志输出，怎能不尝试一下！</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Interceptor的使用及探究</title>
    <url>/2021/0423/use-interceptor.html</url>
    <content><![CDATA[<blockquote>
<p>拦截器都在用，可为啥这么用？为啥不用filter呢？你得知道这些东西</p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Spring MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等；</p>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="Interceptor-拦截器示例："><a href="#Interceptor-拦截器示例：" class="headerlink" title="Interceptor 拦截器示例："></a>Interceptor 拦截器示例：</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.isky.visual.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.constant.CommonConstant;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.interceptor.annotation.LoginValidate;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.result.CodeMsg;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.result.ResultVo;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.user.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.resource.ResourceHttpRequestHandler;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验是否登录的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是接口调用就校验 如果是资源请求就放行</span></span><br><span class="line">            <span class="keyword">if</span>(handler <span class="keyword">instanceof</span> HandlerMethod)&#123;</span><br><span class="line">                validate = validate(request, response,  (HandlerMethod)handler);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(handler <span class="keyword">instanceof</span> ResourceHttpRequestHandler)&#123;</span><br><span class="line">                validate = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 校验不通过,即表示用户未登录或登录session 失效</span></span><br><span class="line">            <span class="keyword">if</span>(!validate)&#123;</span><br><span class="line">                response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">				out = response.getWriter();</span><br><span class="line">                ResultVo&lt;String&gt; error = ResultVo.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">                out.print(JSONObject.toJSONString(error));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">	    	validate = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span>!=out) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> validate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handler)</span>&#123;</span><br><span class="line">        <span class="type">RestController</span>  <span class="variable">annotationController</span> <span class="operator">=</span> handler.getBeanType().getAnnotation(RestController.class);</span><br><span class="line">        <span class="keyword">if</span>(annotationController == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//LoginValidate 是自定义的一个注解</span></span><br><span class="line">        <span class="type">LoginValidate</span> <span class="variable">annotation</span> <span class="operator">=</span> handler.getBeanType().getAnnotation(LoginValidate.class);</span><br><span class="line">        <span class="keyword">if</span>(annotation != <span class="literal">null</span> &amp;&amp; !annotation.value())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        annotation = handler.getMethodAnnotation(LoginValidate.class);</span><br><span class="line">        <span class="keyword">if</span>(annotation != <span class="literal">null</span> &amp;&amp; !annotation.value())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session== <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据sessionid 获取用户信息</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(CommonConstant.USER_SESSION_ID);</span><br><span class="line">        <span class="keyword">if</span>(user== <span class="literal">null</span> || !(user <span class="keyword">instanceof</span> User))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存用户信息</span></span><br><span class="line">        PlatformUserManager.setUser((User)user);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>LoginValidate 自定义注解，代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.isky.visual.interceptor.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoginValidate &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不使用注解，默认需要校验用户登入，</span></span><br><span class="line"><span class="comment">     * 如果不需要校验，请使用<span class="doctag">@LoginValidate</span>(false) 标注类或方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>从代码注释，我们可以了解到如果我们需要放行某个请求或这个某个Controller 下的所有请求的话，只需要在对应的方法或类上加上对应的注解<code>@LoginValidate(false)</code>即可，当然对于类等资源的放行也可以这样写：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.isky.visual.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.isky.visual.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义WebMvcConfigurer 配置类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultWebMvcConfigurer</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>()&#123;</span><br><span class="line">            <span class="comment">//注册拦截器</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">                registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>());</span><br><span class="line">				<span class="comment">// 添加放行路径 过滤、/user 下的所有请求 或者指定某一个或多个</span></span><br><span class="line">				<span class="comment">// registry.addInterceptor(new LoginInterceptor()).addPathPatterns(&quot;*&quot;).excludePathPatterns(&quot;/user/*&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>PlatformUserManager 保存用户信息，代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.isky.visual.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.isky.visual.exception.GlobalException;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.result.CodeMsg;</span><br><span class="line"><span class="keyword">import</span> com.isky.visual.user.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.NamedThreadLocal;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个线程存储类  存储用户信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlatformUserManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; userMap = <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>(<span class="string">&quot;user resources&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userMap.set(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">       	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMap.get();</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GlobalException</span>(CodeMsg.SESSION_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>基于以上代码，我们已经知道了如何实现HandlerInterceptor并重写其preHandle对请求做自定义校验及拦截放行处理，那么它是怎么做到呢，重写的三个方法执行顺序又是怎么样的呢？带着问题我们来看下源码探究下：</p>
<h4 id="doDispatch-源码分析"><a href="#doDispatch-源码分析" class="headerlink" title="doDispatch 源码分析"></a>doDispatch 源码分析</h4><p>首先要分析拦截器的原理及执行流程之前，我们得知道Springmvc 整个调度流程中有个很重要的调度控制器叫<code>DispatcherServlet</code>，那么我们重点来看下它的调度方法<code>doDispatch</code></p>
<p>源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">        <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processedRequest = <span class="built_in">this</span>.checkMultipart(request);</span><br><span class="line">                    multipartRequestParsed = processedRequest != request;</span><br><span class="line">                    mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">                    <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">                    <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">		    <span class="comment">// 调用我们自定义的拦截器中的preHandle方法 如果校验不通过 !false 就直接返回了</span></span><br><span class="line">                    <span class="comment">// 可以看到后面的postHandle 如果前面的preHandle校验失败，postHandle是不会执行的</span></span><br><span class="line">                    <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                    <span class="comment">// 调用我们自定义的拦截器中的postHandle方法</span></span><br><span class="line">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                    dispatchException = var20;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                    dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, var21);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">                <span class="comment">// 细心的你如果点进triggerAfterCompletion中就会发现</span></span><br><span class="line">                <span class="comment">// 如果发生异常将调用的我们自定义拦截器中的afterCompletion方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">                <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">                <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, var23));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                <span class="built_in">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>注：afterCompletion 并不是发生异常才会执行，<code>this.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</code>这个中也有调用，源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv, <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">                mv = ((ModelAndViewDefiningException)exception).getModelAndView();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>;</span><br><span class="line">                mv = <span class="built_in">this</span>.processHandlerException(request, response, handler, exception);</span><br><span class="line">                errorView = mv != <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.render(mv, request, response);</span><br><span class="line">            <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">                WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment">// 当前解析已经开始，即通过反射数据已经绑定到对应的视图上了，接下来执行afterCompletion方法</span></span><br><span class="line">    	<span class="comment">// 我们可以在afterCompletion记录异常日志，但是如果我们结合@ExceptionHandler自定义了异常处理</span></span><br><span class="line">    	<span class="comment">// 这里就会是一个null，即表示异常已经处理过了,spring这里不会再将异常传递出去（感兴趣可以自行试下）；</span></span><br><span class="line">    	<span class="comment">// 实际上我们也很少在afterCompletion 这个节点再去处理异常，我们一般都在postHandle中处理，因为业务上的异常基本发生在数据查询及逻辑处理中</span></span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.triggerAfterCompletion(request, response, (Exception)<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="类比filter"><a href="#类比filter" class="headerlink" title="类比filter"></a>类比filter</h3><p>好，了解了拦截器的基本执行逻辑及源码后，我们来类比下filter</p>
<p>顾名思义，filter 是过滤器是过滤资源、请求、参数、地址等的，而Interceptor 是拦截器是拦截请求方法的；它们二者还是有很大区别的，宏观上将filter 的过滤范围Interceptor比拦截器大，还记得我们讲过SpringSecurity其实就是一组基于filte的实现吗？另外filter在整个action的生命周期中，是伴随Spring容器初始化时被调用一次的，而拦截器是可以被多次调用的！</p>
<h4 id="filter-实现示例："><a href="#filter-实现示例：" class="headerlink" title="filter 实现示例："></a>filter 实现示例：</h4><p>spring中我们需要使用@WebFilter注解来声明</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/*&quot;&#125;,filterName = &quot;FilterConfig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(javax.servlet.FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 添加过滤处理逻辑</span></span><br><span class="line">        <span class="comment">// String urlsString= request.getRequestURI();</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>或者如下自定义一个FilterRegistrationBean 类的bean：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">timeFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        <span class="type">TimerFilter</span> <span class="variable">timerFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerFilter</span>();</span><br><span class="line">        registrationBean.setFilter(timerFilter);</span><br><span class="line">        List&lt;String&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        urls.add(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registrationBean.setUrlPatterns(urls);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>小结：filter 的过滤范围要大于interceptor,故而interceptor 显得更加轻量一点，对于基本的权限、日志、状态等的判断，我们一般选择使用interceptor更灵活些！</p>
<p>需要注意的filter 是基于Servlet容器的，而interceptor 是基于spring 容器的，在单体web项目中我们经常配置filter通配符来保护页面，图片，文件不被过滤处理！而在前后端分离的这种spring 项目，我们需要优先考虑使用interceptor！</p>
</blockquote>
<p>更多请参考文章：<a class="link"   href="https://blog.csdn.net/heweimingming/article/details/79993591"  target="_blank">spring boot 过滤器、拦截器的区别与使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatisPlus 实践篇之逆向工程</title>
    <url>/2021/0423/mybatisplus-generate-code.html</url>
    <content><![CDATA[<blockquote>
<p>初次听说mybatis-plus感觉这东西取名字都很有意思，像极了现在的iPhone 到iPhone xplus;不得不说水果公司真的引领了很多的“潮流”啊；<br>最近公司的一个新的项目，用的也是mybatis-plus,但是用的感觉不是那么好，所有就有了这篇实践！其实了解了也就和JPA差不多，废话不多说我们开始吧！</p>
</blockquote>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Mybatis-Plus（简称MP）是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生.<br>其实要我说，最大的亮点就是它的逆向工程和去mapper.xml了,但是也仅是针对单表，多表还是需要mapper.xml的，后面我们都会给出示例。</p>
<p>官网：<a class="link"   href="https://mp.baomidou.com/"  target="_blank">MyBatis-Plus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul>
<li><p><strong>无侵入</strong>: 只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</p>
</li>
<li><p><strong>损耗小</strong>: 启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p>
</li>
<li><p><strong>强大的 CRUD 操作</strong>: 内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求. 继承一个类就好了!</p>
</li>
<li><p><strong>支持 Lambda 形式调用</strong>: 通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</p>
</li>
<li><p><strong>支持主键自动生成</strong>: 支持多达 4 种主键策略(内含分布式唯一 ID 生成器 - Sequence)，可自由配 置，完美解决主键问题</p>
</li>
<li><p><strong>支持 ActiveRecord 模式</strong>: 支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大 的 CRUD 操作</p>
</li>
<li><p><strong>支持自定义全局通用操作</strong>: 支持全局通用方法注入( Write once, use anywhere )</p>
</li>
<li><p><strong>内置代码生成器</strong> (pojo、dao、xml、service、…..):采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来 使用</p>
</li>
<li><p><strong>内置分页插件</strong>: 基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同 于普通 List 查询<br>分页插件</p>
</li>
<li><p><strong>支持多种数据库</strong>: 支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、 Postgre、SQLServer 等多种数据库</p>
</li>
<li><p><strong>内置性能分析插件</strong>: 可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢 查询</p>
</li>
<li><p><strong>内置全局拦截插件</strong>: 提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误 操作</p>
</li>
</ul>
<h4 id="新建Spring项目，引入依赖"><a href="#新建Spring项目，引入依赖" class="headerlink" title="新建Spring项目，引入依赖"></a>新建Spring项目，引入依赖</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--导入 对应的依赖 这里用3.0.5 官网上最新的是一个临时版temp的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模板引擎 记得加上不然后面自动生成代码会报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger 依赖 记得要加上，不然后面自动生成实体代码注解会爆红--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>提一下：spring 2.0x都是配置的mysql8的驱动，8.0以上的驱动需要配置数据库时区！</p>
<p>另外，注意官网上的这句话：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/09/Y1V5Ox.jpg"
                     
                ></p>
<h4 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h4><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-mbp</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_study?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></div>
<p>配完这些记得启动一下项目，看看是否有问题，及时处理掉报错！</p>
<h4 id="配置代码生成器"><a href="#配置代码生成器" class="headerlink" title="配置代码生成器"></a>配置代码生成器</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 模块名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">moduleName</span> <span class="operator">=</span> <span class="string">&quot;study&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="comment">// 获取当前项目根路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Echo&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>); <span class="comment">//不打开生产的文件</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">//不覆盖之前生成的文件</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%Service&quot;</span>);</span><br><span class="line">        gc.setIdType(IdType.AUTO);<span class="comment">// 主键策略 自增  注意要和数据库中表实际情况对应</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);<span class="comment">//自动开启swagger2的支持</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mp_study?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(moduleName);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.demo&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        <span class="comment">// strategy.setInclude(&quot;t_user&quot;);</span></span><br><span class="line">        <span class="comment">//可以用同配符号:表示生成t_开头的对应库下所有表</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;t&quot;</span>+<span class="string">&quot;_\\w*&quot;</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">// 下划线转驼峰</span></span><br><span class="line">        strategy.setTablePrefix(<span class="string">&quot;t_&quot;</span>);<span class="comment">//去掉t_这个前缀后生成类名</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>);<span class="comment">// 自动生成lombok注解  记住要有lombok依赖和对应的插件哈</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;is_deleted&quot;</span>);<span class="comment">//设置逻辑删除字段 要和数据库中表对应哈</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置创建时间和更新时间自动填充策略</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">created_date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;created_date&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">updated_date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;updated_date&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(created_date);</span><br><span class="line">        tableFills.add(updated_date);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 乐观锁策略</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);<span class="comment">//采用restful 风格的api</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">// controller 请求地址采用下划线代替驼峰</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当然代码生成器中写死的东西我们可以封装下，便于后面项目多的时候调用！或者项目中可以集成这些配置项到ui中，所有的东西都有实施人员来配置，调用接口直接生成到对应的基础框架代码中就好了！<br>题外话：bootdo 之前有用过，基础框架搭好后就是前端选择表和创建菜单后，可以基于表生成对应的基础的前后端的代码！</p>
<h4 id="运行验证"><a href="#运行验证" class="headerlink" title="运行验证"></a>运行验证</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y1GcKU.jpg"
                     
                ><br>可以看到在我们的包下生成来对应的各种包，这里我只建来<code>t_user</code>这一张表来演示；注意代码生成器里的逻辑都是基于表的配置来写的，要保持一致不然会报错！</p>
<h4 id="验证swagger"><a href="#验证swagger" class="headerlink" title="验证swagger"></a>验证swagger</h4><p>启动验证一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y1NeJA.jpg"
                     
                ><br>呃呃呃，没扫描到mapper包,那我们去加一个包扫描即可！<br><code>@MapperScan(&quot;com.demo.study.mapper&quot;)</code></p>
<p>我们去看对应的mapper 发现没有@Mapper注解，说明这东西还有点没完善哈，按理说其他的层的注解你都生成了，mapper注解没生成有点那啥了，哈哈！<br>注意加上<code>@EnableSwagger</code> 它开启了Swagger的注解是针对生成的代码的，启动类上还是得自己加！<br>另外记得加上咱们之前<strong><strong>Swagger食用详解</strong></strong> 中对应swagger的配置哈。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y1UDjP.jpg"
                     
                ></p>
<blockquote>
<p>小结：好了，mp的逆向工程使用说明就先说到这儿，接下来mp的crud操作准备再写一篇示例，加油！</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatisPlus 实践篇之CRUD操作</title>
    <url>/2021/0423/mybatisplus-crud-code.html</url>
    <content><![CDATA[<blockquote>
<p>上篇我们说了mybaits-plus的逆向工程的操作，这篇我们来说下CRUD操作吧，本来打算写一篇的，但是篇幅实在有点长；可读性不好，还是拆一下；</p>
</blockquote>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>这里就不重新建项目引入依赖了，我们直接在上篇的项目中开始<br>开始之前，我们需要开启打印下mybatis-plus在控制台打印的sql,只需要在yaml文件中加上如下配置即可</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></div>
<p>测试查询查看控制台输出：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y3UuPH.jpg"
                     
                ></p>
<p>我们先来看下BaseMapper中有哪些方法，如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y3N5VS.jpg"
                     
                ></p>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>添加分页拦截器,新建MpHandler如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.study.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpHandler</span> &#123;</span><br><span class="line">     <span class="comment">// 分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试查询</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询(使用的最多，单个，多个，数量，分页查询!)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectByIds</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 批量查询</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectByCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 查询数据量 SELECT COUNT(1) FROM user</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> userMapper.selectCount(<span class="literal">null</span>);</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 简单的条件查询!</span></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分页实现 limit(sql) PageHelper Mp内置分页插件(导入即可!)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123; <span class="comment">// 当前页、总页数</span></span><br><span class="line">    <span class="comment">//1、先查询总数</span></span><br><span class="line">    <span class="comment">//2、本质还是 LIMIT 0,10 (默认的)</span></span><br><span class="line">    <span class="comment">// 参数 (当前页，每个页面的大小!)</span></span><br><span class="line">    <span class="comment">// 以后做分页就使用Page对象即可!</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    System.out.println(page.hasNext());</span><br><span class="line">    System.out.println(page.hasPrevious());</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="新增操作"><a href="#新增操作" class="headerlink" title="新增操作"></a>新增操作</h3><p>user实体对应字段</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置主键自增策略 当然还有其他策略可以自行选择（还有雪花算法，手动设置，uuid等）</span></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;主键&quot;)</span></span><br><span class="line"><span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为上篇文章中我们配置了这两个时间字段的自动填充策略，</span></span><br><span class="line"><span class="comment">//那么我们在执行插入和更新操作的时候就会自动更新为当前时间</span></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createdDate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updatedDate;</span><br></pre></td></tr></table></figure></div>

<p>开始之前，我们还需要配置下注解处理器，处理时间的自动填充<br><code>MpHandler implements MetaObjectHandler </code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入的策略</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    <span class="comment">// this.setFieldValByName()设置当前字段的值!</span></span><br><span class="line">    <span class="comment">// String fieldName, Object fieldVal, MetaObject metaObjec</span></span><br><span class="line">    <span class="comment">// 以后只要是插入操作就会自动控制</span></span><br><span class="line">    <span class="comment">// createTime updateTime 使用 new Date() 进行填充</span></span><br><span class="line">    <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createdDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updatedDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 更新策略</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updatedDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试类中测试新增</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为这里我们主键配置的自增 时间配置了自动填充所以无需我们再处理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>).setName(<span class="string">&quot;如花&quot;</span>).setCreatedBy(<span class="string">&quot;echo&quot;</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="comment">// mp 插入成功后主键会自动回显</span></span><br><span class="line">    System.out.println(userMapper.selectById(user.getId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>注意：mp 没有提供批量插入，我们需要自己写xml sql来实现！<br>这里来回顾下，批量插入的写法</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        insert into user</span><br><span class="line">        (name, age) values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;item.name,jdbcType=VARCHAR&#125;,</span><br><span class="line">                #&#123;item.age,jdbcType=INTEGER&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除(单个，多个)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteBatchIds(Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>一般，我们删除都采用逻辑删除，即将is_deleted改为1即可！</p>
<h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><p>开始之前我们先来了解下乐观锁、悲观锁！<br>乐观锁 : 非常乐观，无论什么操作都不加锁!(分布式环境怎么处理冲突问题呢?版本号)<br>悲观锁 : 非常悲观，无论什么操作都加锁!(性能问题)<br>当要更新一条记录的时候，希望这条记录没有被别人更新过，通常的方式就增加一个乐观锁字段即可 (version)</p>
<p>MP 对乐观锁也进行了支持!</p>
<ul>
<li>1、添加version注解到字段上面</li>
<li>2、添加 乐观锁插件即可!</li>
<li>3、测试就自动带上了版本号!<br>数据库新增version字段我们设置初始值为1，那么它每次都会去上一次值做比较，如果是原值就证明没被改动过就更新，如果非原值就更新失败！<br>对应的user实体及数据库中我们也新增此version字段加上@version注解<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></div>
这里我们在MpHandler中加入 乐观锁拦截器<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
接下来我们测试更新操作：<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLock</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">2</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;老铁&quot;</span>);</span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y3WUFs.jpg"
                     
                ><br>可以看到更新的时候它帮我们自动加上了这个version 字段</li>
</ul>
<p>接下来我们来模仿下并发的情况下，因为version加锁更新失败的情况：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLockFail</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 老铁-&gt; 狂铁</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">initUser</span> <span class="operator">=</span> userMapper.selectById(<span class="number">2</span>);</span><br><span class="line">    initUser.setName(<span class="string">&quot;狂铁&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x 先修改为 打铁</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">xUser</span> <span class="operator">=</span> userMapper.selectById(<span class="number">2</span>);</span><br><span class="line">    xUser.setName(<span class="string">&quot;打铁&quot;</span>);</span><br><span class="line">    userMapper.updateById(xUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改成 狂铁</span></span><br><span class="line">    userMapper.updateById(initUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>执行查看控制台输出<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y3IgRs.jpg"
                     
                ><br>可以看到并发的情况下若是版本号被修改类，initUser则会更新失败！</p>
<h3 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除(单个，多个)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteBatchIds(Arrays.asList(<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简单的条件删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>但是我们实际开发中基本不这么干，只是更新is_deleted字段，改成逻辑删除！</p>
<p>然后我们查询的时候只会把没有删除的查询出来，添加<code>@TableLogic</code></p>
<p>这里因为我们在代码生成器中指定了删除标识字段，所以这个注解自动加上了</p>
<p><code>@TableLogic</code> 所标注的字段是一个逻辑删除字段</p>
<p>另外我们还需在yaml中增加逻辑删除值的配置</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment">#删除</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment">#未删除</span></span><br></pre></td></tr></table></figure></div>
<p>MpHandler 中新增逻辑删除插件</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ISqlInjector <span class="title function_">sqlInjector</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogicSqlInjector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这两步完了之后，我们再测一下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.selectById(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/10/Y3qdMj.jpg"
                     
                ><br>可以看到删除的数据我们这里已经查不到了，查询的时候自动给我们带上了<code>is_deleted=0</code>的条件</p>
<h3 id="sql-性能分析插件"><a href="#sql-性能分析插件" class="headerlink" title="sql 性能分析插件"></a>sql 性能分析插件</h3><p>MpHandler 中加入以下拦截器，就可以拦截慢sql</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL执行效率插件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="comment">// 设置 dev test 环境开启</span></span><br><span class="line"><span class="keyword">public</span> PerformanceInterceptor <span class="title function_">performanceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PerformanceInterceptor</span> <span class="variable">performanceInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PerformanceInterceptor</span>();</span><br><span class="line">    <span class="comment">// 允许执行的sql的最长时间 ，默认的单位是ms</span></span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里就不演示了，感兴趣的可以自行试下，<code>maxTime</code>改成1 试下，哈哈</p>
<p>根据控制台的报错信息或者说你配置了统一日志打印的话，可以根据里面的报错信息找到对应的慢sql</p>
<p>然后，我们就可以分析对应的问题（分库分表，索引，缓存等）</p>
<h3 id="常用的条件构造器"><a href="#常用的条件构造器" class="headerlink" title="常用的条件构造器"></a>常用的条件构造器</h3><p>就是大于，等于，小于，包含，不包含，子查询等</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件查询器</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLogicDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    wrapper <span class="comment">//</span></span><br><span class="line">    .isNotNull(<span class="string">&quot;name&quot;</span>) .ge(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>); <span class="comment">// 大于等于</span></span><br><span class="line">    .eq(<span class="string">&quot;age&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    userMapper.delete(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边界查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> userMapper.selectCount(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精准匹配</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    wrapper.allEq(map);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectMaps</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    wrapper.notLike(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;e&quot;</span>)</span><br><span class="line">    .likeRight(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;t&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; = userMapper.selectMaps(wrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectObjs</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    <span class="comment">// 条件in查询</span></span><br><span class="line">    wrapper.in(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 子查询!</span></span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id &lt; 3&quot;</span>);</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// and or</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 修改值</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">99</span>).setName(<span class="string">&quot;老佛爷&quot;</span>);</span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 在一些新的框架中，链式编程，lambda表达式，函数式接口十分常用!</span></span><br><span class="line">    updateWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    .or(i-&gt;i.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">    .eq(<span class="string">&quot;age&quot;</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">selectList</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    wrapper.orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 多表查询解决方案 last (不建议使用，相当于直接拼接到sql 后面)</span></span><br><span class="line">    <span class="comment">// 尽量使用单表查询</span></span><br><span class="line">    <span class="comment">// 如果要多表查询，没有简便方法，就只有xml 中自己写了!</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    wrapper.last(<span class="string">&quot;limit 1&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>好了，至此我们已经完成了mybatis-plus crud语法的学习和常用插件的配置，那么就尽快使用起来吧；</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>初窥SpringSecurity安全框架</title>
    <url>/2021/0423/first-see-security.html</url>
    <content><![CDATA[<blockquote>
<p>作为一名开发怎能不知道大名顶顶的安全框架呢？市面上流行的安全框架有：shiro和springSecurity。那么你经常用哪个框架做安全访问控制呢？因为SpringBoot集成了SpringSecurity,所以我们这次来聊聊它</p>
</blockquote>
<h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p>
<p>SpringSecurity官网：<a class="link"   href="https://spring.io/projects/spring-security"  target="_blank">官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/28/GkT0MT.png"
                     
                ></p>
<h3 id="对应依赖"><a href="#对应依赖" class="headerlink" title="对应依赖"></a>对应依赖</h3><p>pom依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>SpringSecurity包含的模块:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/28/GkHLKf.png"
                     
                ><br>继续我们可以看到这么一幅图，可以知道它是基于servlet过滤器实现的：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/28/Gkbgij.png"
                     
                ><br>http配置相关：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/28/GkOYoF.png"
                     
                ><br>用户密码验证：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/28/GAOvK1.png"
                     
                ></p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>1.创建新的项目，选择thymelaef和SpringWeb依赖<br>2.新增静态资源(代码省略，主要是各角色页面，需要此部分代码可私我)<br>3.添加路由控制页面跳转</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过restful 实现复用</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">level1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">level12</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">level3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>4.启动项目查看页面效果（默认登陆用户名是user,登陆密码在控制台）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/29/GEMfD1.png"
                     
                ><br>后面我们要实现对应的权限控制效果！</p>
<h3 id="自定义登陆用户和密码"><a href="#自定义登陆用户和密码" class="headerlink" title="自定义登陆用户和密码"></a>自定义登陆用户和密码</h3><p>老是这样登不行啊，我么来自定义配置一下登陆用户名和密码</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除thymeleaf缓存 这使得我们改动html代码不用重启项目 build一下即可生效</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">admin</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></div>
<h3 id="新增SecurityConfig配置类"><a href="#新增SecurityConfig配置类" class="headerlink" title="新增SecurityConfig配置类"></a>新增SecurityConfig配置类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springstudy.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以再这里导入userService相关配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 不同用户访问内容不同！ 这里，过滤器，登录注销规则，安全配置，OAuth2配置</span></span><br><span class="line">        <span class="comment">// 我们平时只需要配置一些基本的规则即可！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首页是允许所有人访问的！</span></span><br><span class="line">        <span class="comment">// 定制授权规则： 那些请求，哪些人可以访问！</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;guest&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;svip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义登录页 配置后默认登陆页将失效</span></span><br><span class="line">        <span class="comment">// login跳转到登录页  /login?error 登录失败</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登陆表单提交请求！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果注销404，因为 Security 默认是防止 csrf 跨站伪请求！</span></span><br><span class="line">        <span class="comment">// http.csrf().disable(); // 可能会让我们系统不安全</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注销 开启默认的注销功能！</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>); <span class="comment">// 注销成功后跳转至首页！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义的登录页需要配置 rememberMe 的参数名,就可以绑定到我们前端的！</span></span><br><span class="line">        <span class="comment">// 记住我功能</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义用户的认证规则 （角色，密码....）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 定义user1 uer2 user3 三个用户的角色权限</span></span><br><span class="line">        <span class="comment">// 这里我们一般在用户角色表里存储用户的角色信息</span></span><br><span class="line">        <span class="comment">// 密码没有加密会报500错误，这里我们只定义了用户的密码加密，但是没有定义用户的认证规则的加密方式</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">                <span class="comment">// 一个人可以拥有多个角色！</span></span><br><span class="line">                .withUser(<span class="string">&quot;user1&quot;</span>)</span><br><span class="line">                .password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;guest&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;user2&quot;</span>)</span><br><span class="line">                .password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;guest&quot;</span>,<span class="string">&quot;vip&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;user3&quot;</span>)</span><br><span class="line">                .password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;guest&quot;</span>,<span class="string">&quot;vip&quot;</span>,<span class="string">&quot;svip&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="修改前台配置"><a href="#修改前台配置" class="headerlink" title="修改前台配置"></a>修改前台配置</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test/css/qinstyle.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index-header-nav&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;nav-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--核心类：Authentication--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 如果未登录就显示登陆按钮 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 如果已登录，显示用户的信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--&lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt;--&gt;</span></span><br><span class="line">                        用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="symbol">&amp;nbsp;</span></span><br><span class="line">                        角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 将注销请求也改成post提交即可！ --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;button type=&quot;submit&quot; class=&quot;def-log-out&quot;&gt;注销&lt;/button&gt;--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:underline;&quot;</span>&gt;</span></span><br><span class="line">                            注销</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui three column stackable grid&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;div sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot;&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;guest&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;div sec:authorize=&quot;hasRole(&#x27;vip2&#x27;)&quot;&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;div sec:authorize=&quot;hasRole(&#x27;vip3&#x27;)&quot;&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;svip&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/test/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/test/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="重启项目验证"><a href="#重启项目验证" class="headerlink" title="重启项目验证"></a>重启项目验证</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/29/GV10wn.png"
                     
                ><br>可以看到3个用户，可以看到不同的模块，实现了权限的控制。<br>注：在我们配置注销时，可以看到springSecurity已经帮我们配置好了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/29/GV3g4P.png"
                     
                ><br>当然我们实际的处理方式是不同的角色配置不同的菜单，不会这么控制！这里只是举例说明Security权限控制以及thymeleaf权限控制语法</p>
<h3 id="登陆页配置记住我"><a href="#登陆页配置记住我" class="headerlink" title="登陆页配置记住我"></a>登陆页配置记住我</h3><blockquote>
<p>功能:用户没有登录的时候，就只显示导航栏!如果登录了，只显示自己权限能够看到的东西 根据不同的权限，前端展示不同的功能!</p>
</blockquote>
<p>springsecrity 和 thymealef 结合:</p>
<p>添加依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras- springsecurity5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>前端代码：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span> 记住我</span><br></pre></td></tr></table></figure></div>
<p>后端代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义的登录页需要配置 rememberMe 的参数名,就可以绑定到我们前端的!</span></span><br><span class="line"><span class="comment">// 记住我功能</span></span><br><span class="line">http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定制登陆页</span></span><br><span class="line">http.formLogin()</span><br><span class="line">   .usernameParameter(<span class="string">&quot;username&quot;</span>) <span class="comment">// 前端用户名提交参数</span></span><br><span class="line">   .passwordParameter(<span class="string">&quot;password&quot;</span>) <span class="comment">// 前端密码提交参数</span></span><br><span class="line">   .loginPage(<span class="string">&quot;/toLogin&quot;</span>) <span class="comment">// 登录页面</span></span><br><span class="line">   .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登陆表单提交请求!</span></span><br></pre></td></tr></table></figure></div>
<p>启动测试看用户信息是否存如cookie:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/29/GVY7sU.png"
                     
                ><br>可以删除cookie后刷新页面看看是否自动退出了！</p>
<h3 id="退出的问题"><a href="#退出的问题" class="headerlink" title="退出的问题"></a>退出的问题</h3><p>点击退出发现报错了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/29/GVY7sU.png"
                     
                ></p>
<p>这是为什么呢？<br>原来SpringSecurity禁止了get方式的退出,以防止 csrf 跨站伪请求！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果注销404，因为 Security 默认是防止 csrf 跨站伪请求！</span></span><br><span class="line"><span class="comment">// http.csrf().disable(); // 可能会让我们系统不安全</span></span><br></pre></td></tr></table></figure></div>
<p>那我们把退出操作改成表单提交的post方式请求即可；</p>
<p>修改index.html注销代码：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;def-log-out&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;a class=&quot;item&quot; th:href=&quot;@&#123;/logout&#125;&quot; style=&quot;text-decoration:underline;&quot;&gt;</span></span><br><span class="line"><span class="comment">        注销</span></span><br><span class="line"><span class="comment">    &lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>build 后再次点击注销可以验证下！</p>
<blockquote>
<p>小结：Spring集成Security后，sercurity就变得轻巧了很多，且因为功能强大所以在SpringBoot中面对shrio优势明显，<br>像我们常见的功能：单点登陆，微信qq登陆认证等它都作了对应的支持！本次只是分享Security的初步使用!</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot 中的那些“开关”</title>
    <url>/2021/0423/springboot-switch.html</url>
    <content><![CDATA[<blockquote>
<p>在之前我们就Swagger使用篇，可以了解到根据不同环境更改为不同的配置，让不同的配置逻辑生效的处理办法。其实吧，有没有觉得这东西就像是一个开关，那么SpringBoot 我们可以怎么获取当前环境（获取其他配置相同）从而进行判断做一个开关呢？今天我们就来总结下(以下列举的是常用的几种方式)：</p>
</blockquote>
<h3 id="方式一：-Value-注解"><a href="#方式一：-Value-注解" class="headerlink" title="方式一：@Value 注解"></a>方式一：@Value 注解</h3><p>代码如下（基本容器启动什么地方都可以用）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.profiles.active&#125;&quot;)</span></span><br><span class="line">    String active;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, active env is: [&quot;</span>+active+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="方式二：Spring-配置上下文"><a href="#方式二：Spring-配置上下文" class="headerlink" title="方式二：Spring 配置上下文"></a>方式二：Spring 配置上下文</h3><p>代码如下（启动时获取）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringStudyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(SpringStudyApplication.class, args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">active</span> <span class="operator">=</span> context.getEnvironment().getProperty(<span class="string">&quot;spring.profiles.active&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; active env is: [&quot;</span>+active+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="comment">// FileHelper.xmlName = active+&quot;.xml&quot;;</span></span><br><span class="line">        <span class="comment">// FileHelper.ReaderXml();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>题外话：现在用了springBoot 后各种简化了的配置，properties，yaml；那你还写xml 吗？</p>
</blockquote>
<p>个人觉得如果配置多了，yaml 和properties 的这种配置反而有点不直观（一行就可以写清楚的，一直往下点很多个…），可能还是得用一些xml 配置；当然不用也不是不可以，比如你们用了Apollo 自动配置，那实时修改不用发包就能生效，肯定所有的配置都整成yaml 格式的要好啊！</p>
<p>但是xml配置我们也得知道，看如下代码读取xml 配置文件并组装成key,value使用；对应的环境配置也可以从此处读取</p>
<p>引入dom4j依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在resources下新增文件夹configuration,新增配置文件dev.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span> <span class="attr">name</span>=<span class="string">&quot;env-context&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;环境相关&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;active&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;dev 环境&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span> <span class="attr">name</span>=<span class="string">&quot;def-config&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;自定义配置&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;主机ip&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;端口号&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;账号&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">explain</span>=<span class="string">&quot;密码&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>添加工具读取配置文件FileHelper类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileHelper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">xmlName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,String &gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ReaderXml</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 创建SAXReader的对象reader</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过reader对象的read方法加载configuration.xml文件,获取docuemnt对象。</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(xmlName);</span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(file);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!resource.exists()) &#123;</span><br><span class="line">                <span class="comment">//jar同级目录加载目录下还是找不到，那就直接用classpath下的</span></span><br><span class="line">                resource = resourceLoader.getResource(<span class="string">&quot;classpath:configuration/&quot;</span>+xmlName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(resource.getInputStream());</span><br><span class="line">            <span class="comment">// 通过document对象获取根节点bookstore</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">bookStore</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">            <span class="comment">// 通过element对象的elementIterator方法获取迭代器</span></span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> bookStore.elementIterator();</span><br><span class="line">            <span class="comment">// 遍历迭代器</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">keyName</span> <span class="operator">=</span> <span class="string">&quot;name&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">keyValue</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="type">Element</span> <span class="variable">str</span> <span class="operator">=</span> (Element) it.next();</span><br><span class="line">                <span class="comment">// 获取属性名以及属性值</span></span><br><span class="line">                List&lt;Attribute&gt; strAttrs = str.attributes();</span><br><span class="line">                <span class="keyword">for</span> (Attribute attr : strAttrs) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(attr.getName().equals(keyName))&#123;</span><br><span class="line">                        name = attr.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//解析子节点的信息</span></span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">itt</span> <span class="operator">=</span> str.elementIterator();</span><br><span class="line">                <span class="keyword">while</span> (itt.hasNext()) &#123;</span><br><span class="line">                    <span class="type">Element</span> <span class="variable">strChild</span> <span class="operator">=</span> (Element) itt.next();</span><br><span class="line">                    List&lt;Attribute&gt; bookChildList = strChild.attributes();</span><br><span class="line">                    <span class="keyword">for</span> (Attribute attr : bookChildList) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(attr.getName().equals(keyName))&#123;</span><br><span class="line">                            key = name +<span class="string">&quot;.&quot;</span> + attr.getValue();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(attr.getName().equals(keyValue))&#123;</span><br><span class="line">                            map.put(key,attr.getValue());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;读取配置文件内容如下：&quot;</span>+map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新加载xml配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title function_">RestReaderXml</span><span class="params">()</span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">        ReaderXml();</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>读取配置文件内容如下：<code>&#123;def-config.account=root, def-config.host=xxx.xxx.xxx.xxx, def-config.password=123456, env-context.active=dev, def-config.port=22&#125;</code></p>
<p>那么,我们就可以根据对应的key 获取对应的配置了。</p>
<h3 id="方式三：自定义SpringContextUtil工具类"><a href="#方式三：自定义SpringContextUtil工具类" class="headerlink" title="方式三：自定义SpringContextUtil工具类"></a>方式三：自定义SpringContextUtil工具类</h3><p>代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* (non Javadoc)</span></span><br><span class="line"><span class="comment">     * @Title: setApplicationContext</span></span><br><span class="line"><span class="comment">     * @Description: spring获取bean工具类</span></span><br><span class="line"><span class="comment">     * @param applicationContext</span></span><br><span class="line"><span class="comment">     * @throws BeansException</span></span><br><span class="line"><span class="comment">     * @see org.springframework.context.ApplicationContextAware#setApplicationContext(org.springframework.context.ApplicationContext)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入线程中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 国际化使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getMessage(key, <span class="literal">null</span>, Locale.getDefault());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取当前环境</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getActiveProfile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEnvironment().getActiveProfiles()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="方式四：Environment-类"><a href="#方式四：Environment-类" class="headerlink" title="方式四：Environment 类"></a>方式四：Environment 类</h3><p>代码如下（在bean中使用，例如之前Swagger 的配置，其实只要初始化配置能够读到的地方都可以这样用)：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Profiles</span> <span class="variable">pro</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="comment">// 判断是否是对应的环境</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">enable</span> <span class="operator">=</span> env.acceptsProfiles(pro);</span><br></pre></td></tr></table></figure></div>

<p>详见之前的博客：<a src="https://blog.csdn.net/iME_cho/article/details/105573318" target="_blank">Swagger食用方法详解</a></p>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>springBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>springweb自动配置分析及flyway插件使用</title>
    <url>/2021/0423/springboot-auto-config.html</url>
    <content><![CDATA[<blockquote>
<p>springboot 创建web项目只需要引入对应的web-starter，自己定义好moudel层，再采用相应的模版引擎技术（view层）就可以将数据渲染到模版中，从而生成一个单体的web应用！那这些视图是如何解析的呢？最常用的模版引擎语法有哪些呢？</p>
</blockquote>
<p>新建一个空的项目，我们选择对应的web依赖，工具相关我三个都勾选上，数据库驱动选mysql驱动！具体见我的另一篇博客:springboot集成mybatis和druid监控<br>此处不再赘述：</p>
<p>创建好项目后，我们来分析下源码：</p>
<h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><p>首先我们都知道，springboot初始化的项目下面都是没有webapp这样一个模块的，那我们的web相关的一些资源，该放在哪里呢？为何对应的放置就可以生效呢？</p>
<p>我们尝试从源码中寻求答案</p>
<p>SpringMVC 整个 SSM 都是基于它的，所以我们第一步应该去研究 SpringBoot 关于Mvc的自动配置!</p>
<ul>
<li>1、所有mvc相关的配置都在 WebMvcAutoConfiguration (视图解析器、静态资源过滤!)</li>
<li>2、addResourceHandlers 静态资源处理方法<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//禁用默认规则的一个配置，如果你手动的添加了资源映射路径的配置,那么这些自动配置就会直接失效!</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">   logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缓存控制</span></span><br><span class="line"><span class="type">Duration</span> <span class="variable">cachePeriod</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line"><span class="type">CacheControl</span> <span class="variable">cacheControl</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line"><span class="comment">// 分析源代码，需要掌握看对象的方法调用!</span></span><br><span class="line"><span class="comment">// localhost:8080/webjars/jquery.js</span></span><br><span class="line"><span class="comment">// 判断是否存在一个映射路径 /webjars/**，</span></span><br><span class="line"><span class="comment">// addResourceHandler 处理逻辑 /webjars/a.js</span></span><br><span class="line"><span class="comment">// addResourceLocations 处理资源的地址 classpath:/META-INF/resources/webjars/a.js</span></span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">    .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">    .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取静态资源路径!</span></span><br><span class="line"><span class="type">String</span> <span class="variable">staticPathPattern</span> <span class="operator">=</span> <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(); <span class="comment">// localhost:8080/</span></span><br><span class="line"><span class="comment">// 如果访问映射的路径是 staticPathPattern = &quot;/**&quot;;</span></span><br><span class="line"><span class="comment">// this.resourceProperties.getStaticLocations())</span></span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">    .addResourceLocations(getResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">    .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对应的资源加载先后顺序 优先级：META-INF &gt; resources &gt; static &gt; public</span></span><br><span class="line"><span class="comment">// 对于怎么验证这个优先级，可以建对于的文件加，放些静态资源，页面直接访问测试</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS =</span><br><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">     <span class="string">&quot;classpath:/resources/&quot;</span>,</span><br><span class="line">     <span class="string">&quot;classpath:/static/&quot;</span>,</span><br><span class="line">     <span class="string">&quot;classpath:/public/&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
我们一句句的解读，就可以读懂源码！可以看到这段源码中就这个webjars我们不怎么熟悉</li>
</ul>
<h3 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h3><blockquote>
<p>什么是 webjars？</p>
</blockquote>
<p><a class="link"   href="https://www.webjars.org/"  target="_blank">webjars官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>webjars是一个前端依赖管理工具，集成了前端主流的一些框架，使得我们只需引入对应的jar包就可以在项目中使用它！<br>我们引入jquery的依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>看下生成的依赖：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/21/8WzgOA.png"
                     
                ><br>我们看下是否可以直接通过路径访问：<a class="link"   href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js" >http://localhost:8080/webjars/jquery/3.4.1/jquery.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/21/8fS4BR.png"
                     
                ><br>很明显，这样是可以直接访问的。那这些可以常用的框架等静态资源我们可以这样引入，我们自定义的东西例如css 图片等该如何使用呢？<br>我常用的规则推荐如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="comment">// 在 starter 中使用! SWAGGER-UI</span></span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span>, <span class="comment">// 文件资源</span></span><br><span class="line"><span class="string">&quot;classpath:/static/&quot;</span>, <span class="comment">// 静态资源</span></span><br><span class="line"><span class="string">&quot;classpath:/public/&quot;</span> <span class="comment">// 公共的，图标......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>当然我们也可以更改spring的默认资源路径配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一旦自己配置了  那么默认的就会失效</span></span><br><span class="line"><span class="string">spring.resources.static-locations=xxx</span></span><br></pre></td></tr></table></figure></div>
<h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><ul>
<li>1.官网:<a class="link"   href="https://www.thymeleaf.org/documentation.html" >https://www.thymeleaf.org/documentation.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>2.github:<a class="link"   href="https://github.com/thymeleaf/thymeleaf/blob/3.0-master" >https://github.com/thymeleaf/thymeleaf/blob/3.0-master <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>引入依赖,在spring中采用jar一般都是使用对应的starter</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>任何starter都有一个xxxProperties 我们去其依赖下看看源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafProperties</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_ENCODING</span> <span class="operator">=</span> StandardCharsets.UTF_8;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看出thymeleaf的默认配置路径是templates下，默认文件格式是html的<br>我们要改只需要<code>spring.thymeleaf.prefix=xxx</code>，当然更改了默认的便不会生效了。</p>
<blockquote>
<p>测试thymeleaf</p>
</blockquote>
<p>templates新增一个页面test.html</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello,thymeleaf!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>controller中新增一个接口：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blog.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;test&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>启动项目可见：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/21/8fu1DP.png"
                     
                ></p>
<h3 id="thymeleaf语法"><a href="#thymeleaf语法" class="headerlink" title="thymeleaf语法"></a>thymeleaf语法</h3><p>了解了基本的页面渲染规则后，我们来看下thymeleaf的语法：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/21/8fQ3Hx.png"
                     
                ><br>我们还可以编写哪些表达式呢?<br>Variable Expressions: ${…} 获取一些基本的变量值! OGNL;</p>
<ol>
<li>对象的属性，调用方法</li>
<li>使用内置的基本对象<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#ctx.locale&#125;</span><br><span class="line">$&#123;param.foo&#125;</span><br><span class="line">$&#123;session.foo&#125;</span><br><span class="line">$&#123;application.foo&#125;</span><br><span class="line">$&#123;#request.getAttribute(&#x27;foo&#x27;)&#125;</span><br><span class="line">$&#123;#servletContext.contextPath&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>工具对象<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;#messages.msg(&#x27;msgKey&#x27;)&#125;</span><br><span class="line">$&#123;#uris.escapePath(uri)&#125;</span><br><span class="line">$&#123;#conversions.convert(object, &#x27;java.util.TimeZone&#x27;)&#125; $&#123;#dates.format(date, &#x27;dd/MMM/yyyy HH:mm&#x27;)&#125; $&#123;#calendars.format(cal)&#125;</span><br><span class="line">$&#123;#numbers.formatInteger(num,3)&#125;</span><br><span class="line">$&#123;#strings.toString(obj)&#125;</span><br><span class="line">$&#123;#arrays.toArray(object)&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></div>
4.其他<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Selection Variable Expressions: *&#123;...&#125; 选择表达式，和 $&#123;&#125; 是一样的;</span><br><span class="line"> Message Expressions: #&#123;...&#125; 国际化内容获取!</span><br><span class="line">Link URL Expressions: @&#123;...&#125; URL表达式;th:href=“@&#123;/login&#125;”</span><br><span class="line">Fragment Expressions: ~&#123;...&#125; 组件化表达式;</span><br><span class="line">Literals (字面量)</span><br><span class="line">Text literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,... (字符串)</span><br><span class="line">Number literals: 0 , 34 , 3.0 , 12.3 ,...</span><br><span class="line">Boolean literals: true , false</span><br><span class="line">Null literal: null</span><br><span class="line">Literal tokens: one , sometext , main ,...</span><br><span class="line">Text operations: (文本操作)</span><br><span class="line">String concatenation: +</span><br><span class="line">Literal substitutions: |The name is $&#123;name&#125;| Arithmetic operations: (数学运算)</span><br><span class="line">Binary operators: + , - , * , / , %</span><br><span class="line">Minus sign (unary operator): -</span><br><span class="line">Boolean operations: (布尔运算)</span><br><span class="line">Binary operators: and , or</span><br><span class="line">Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality: (比较运算)</span><br><span class="line">Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators: (条件运算符)</span><br><span class="line">If-then: (if) ? (then)</span><br><span class="line">If-then-else: (if) ? (then) : (else)</span><br><span class="line">Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">Page 17 of 104**No-Operation:** _</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="springmvc-启动配置原理"><a href="#springmvc-启动配置原理" class="headerlink" title="springmvc 启动配置原理"></a>springmvc 启动配置原理</h3><p>我们来看官方文档，虽然都是英文但是不要怂，慢慢的翻的多了也就认识了！</p>
<p>地址：<a class="link"   href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/"  target="_blank">官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>找到对应的Spring MVC Auto-configuration<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/21/8fGKmj.png"
                     
                ><br>我们来解读下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring MVC Auto-configuration</span><br><span class="line">// SpringBoot为SpringMVC 提供提供了自动配置，他可以很多好的工作于大多数的应用!</span><br><span class="line">Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</span><br><span class="line">// 自动配置在Spring默认配置的基础上添加了以下功能:</span><br><span class="line">The auto-configuration adds the following features on top of Spring’s defaults: // 包含视图解析器</span><br><span class="line">Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</span><br><span class="line">// 支持静态资源文件的路径吗，包含webjar的支持</span><br><span class="line">Support for serving static resources, including support for WebJars (covered later in this document)).</span><br><span class="line">// 自动注册了转换器</span><br><span class="line">// 转换器 网页提交的前端对象，到后台自动封装为具体的对象;&quot;1&quot; 自动转换为 数字 1; // 格式化器Formatter 【2020-03-18 后台可以自动封装为Date】</span><br><span class="line">Automatic registration of Converter, GenericConverter, and Formatter beans. // 支持消息转换</span><br><span class="line">// request、response，对象自动转换为 json对象</span><br><span class="line">Support for HttpMessageConverters (covered later in this document).</span><br><span class="line">// 定错代码生成规则</span><br><span class="line">Automatic registration of MessageCodesResolver (covered later in this document). // 支持首页定制</span><br><span class="line">Static index.html support.</span><br><span class="line">// 支持自定义图标</span><br><span class="line">Custom Favicon support (covered later in this document).</span><br><span class="line">//配置web数据绑定</span><br><span class="line">Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).</span><br><span class="line"></span><br><span class="line">// 如果你希望保持 Spring Boot MVC 一些功能，并且希望添加一些其他的 MVC配置(拦截器、格式化 器、视图控制器、或其他的配置)，你可以添加自己的配置类 (类型为WebMvcConfigurer) 需要添加注 解@Configuration ，一定不能拥有注解@EnableWebMvc.</span><br><span class="line">If you want to keep those Spring Boot MVC customizations and make more MVC customizations (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</span><br><span class="line"></span><br><span class="line">//如果要提供RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义实例，并且仍然保留Spring Boot MVC自定义，则可以声明WebMVCregistration类型的bean，并使用它来提供这些组件的自定义实例</span><br><span class="line">If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.</span><br><span class="line"></span><br><span class="line">// 全面接管Spring MVC，自己配置配置类的时候加上 @EnableWebMvc即可!</span><br><span class="line">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.</span><br></pre></td></tr></table></figure></div>
<p>我们先分析下为什么加了@EnableWebMvc注解，视图解析器就不生效了，也就是说springmvc这一套东西都不好使了！这个很神奇</p>
<p>源码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果这个bean不存在，这个类才生效!~</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="comment">// @EnableWebMvc 源码</span></span><br><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc</span><br><span class="line"><span class="comment">// 点进DelegatingWebMvcConfiguration继承了WebMvcConfigurationSupport</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其实 @EnableWebMvc 就是导入了一个类 WebMvcConfigurationSupport ，但是源码中，一旦导入了 这个类，我们自动配置类就会全部失效!</span></span><br><span class="line"><span class="comment">//如果我们要扩展springmvc</span></span><br><span class="line"><span class="comment">//扩展mvc的方法：</span></span><br><span class="line"><span class="comment">//1、编写一个自己的config配置类</span></span><br><span class="line"><span class="comment">//2、实现一个接口WebMvcConfigurer</span></span><br><span class="line"><span class="comment">//3、重写里面的方法即可!</span></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="comment">//public class MyMvcConfig implements WebMvcConfigurer &#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>试图解析器</p>
<blockquote>
<p>ContentNegotiatingViewResolver</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ViewResolver.class)</span> <span class="comment">// 自动配置了 ViewResolver，就是SpringMVC中的视图解析器</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span></span><br><span class="line"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title function_">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="type">ContentNegotiatingViewResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">ContentNegotiatingViewResolver</span>();</span><br><span class="line">resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationMan ager.class));</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to ocate</span></span><br><span class="line">    <span class="comment">// a view so it should have a high precedence</span></span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver 使用其他所有的视图解析器定位视图，因此它应该具有一 个高的优先级!</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>解析视图名字</p>
<blockquote>
<p>resolveViewName</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 参数可以为空</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">attrs</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());</span><br><span class="line">    <span class="keyword">if</span> (requestedMediaTypes != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取所有候选的视图!</span></span><br><span class="line">        List&lt;View&gt; candidateViews = getCandidateViews(viewName, locale,</span><br><span class="line">        requestedMediaTypes); <span class="comment">// 获取最好的视图</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">bestView</span> <span class="operator">=</span> getBestView(candidateViews, requestedMediaTypes, attrs); <span class="comment">// 返回最好的视图</span></span><br><span class="line">        <span class="keyword">if</span> (bestView != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bestView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mediaTypeInfo</span> <span class="operator">=</span> logger.isDebugEnabled() &amp;&amp; requestedMediaTypes != <span class="literal">null</span> ? <span class="string">&quot; given &quot;</span> + requestedMediaTypes.toString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.useNotAcceptableStatusCode) &#123; <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Using 406 NOT_ACCEPTABLE&quot;</span> + mediaTypeInfo); &#125;</span><br><span class="line">        <span class="keyword">return</span> NOT_ACCEPTABLE_VIEW;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;View remains unresolved&quot;</span> + mediaTypeInfo); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>既然他是从容器中加载所有的视图解析器，那么我们可以猜想，我们自己写一个视图解析器，也可以被 扫描并加载!</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自己写一个 bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ViewResolver <span class="title function_">myViewResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyViewResolver</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyViewResolver</span> <span class="keyword">implements</span> <span class="title class_">ViewResolver</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="flyway插件"><a href="#flyway插件" class="headerlink" title="flyway插件"></a>flyway插件</h3><p>一直知道这么个东西，很好用单独写一篇博客又显得很浪费；那就跟着这篇博客一并说了吧</p>
<blockquote>
<p>概念：</p>
</blockquote>
<p>Flyway是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具，说白了就是Flyway可以像Git管理不同人的代码那样，管理不同人的sql脚本，从而做到数据库同步</p>
<blockquote>
<p>食用方法</p>
</blockquote>
<p>如果新建项目可以直接勾选上flyway插件依赖，我们这里没勾选就自己手动添加：</p>
<ul>
<li>添加依赖<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>配置<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"># 默认不开启flyway</span><br><span class="line">spring.flyway.enabled=<span class="literal">false</span></span><br><span class="line">spring.flyway.baseline-on-migrate=<span class="literal">true</span></span><br><span class="line"># flyway字符编码</span><br><span class="line">spring.flyway.encoding=UTF-<span class="number">8</span></span><br><span class="line"># flyway文件位置</span><br><span class="line">spring.flyway.locations=classpath:db/migration</span><br><span class="line"># ִV1__xxx.sql v开头默认执行一次</span><br><span class="line"># R1__xxx 开头的脚本则会在项目启动时每次都会清除表后执行</span><br><span class="line">spring.flyway.clean-disabled=<span class="literal">false</span></span><br><span class="line"># flyway 历史记录表</span><br><span class="line">spring.flyway.table=flyway_schema_history</span><br></pre></td></tr></table></figure></div></li>
<li>新建文件夹</li>
</ul>
<p>如下图 启动项目可以看到数据库中出现对应的flyway_schema_history表还有按脚本生成的表和数据，flyway_schema_history表中记录的脚本的变更历史<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/21/8fWHnH.png"
                     
                ></p>
<blockquote>
<p>小结：至此springMvc的配置原理及flyway的使用我们已经了解了，代码撸起来吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>springBoot</category>
      </categories>
      <tags>
        <tag>flyway,thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装jdk11动态指定运行版本</title>
    <url>/2021/0423/mac-jdk8-jdk11.html</url>
    <content><![CDATA[<blockquote>
<p>之前自己用halo搭建了个人博客，想着自己把源码拉下来学习研究下的，包下到本地后发现在终端中执行 <code>java -jar halo.jar --spring.profiles.active=dev</code>时,报<code>Application has been compiled by a more recent version of the Java Runtime (class file version 55.0), this versions up to 52.0</code>;what? 应用被最新的java版本执行过了，当前版本是52.0；一番搜索说jdk版本太低了，那就装个jdk11吧；</p>
</blockquote>
<h3 id="安装前的疑问"><a href="#安装前的疑问" class="headerlink" title="安装前的疑问"></a>安装前的疑问</h3><p>安装jdk11?那我之前安装的jdk8要删了吗？肯定不用吧，然后带着疑问去找了下解决办法，果然可以动态指定运行版本</p>
<h3 id="下载jdk11"><a href="#下载jdk11" class="headerlink" title="下载jdk11"></a>下载jdk11</h3><p><a class="link"   href="https://www.oracle.com/index.html" >oracle网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>oracle下载东西，需要注册；懒得注册了，网上找一个注册好的账号用一下吧；<br><em><strong><a class="link"   href="mailto:&#50;&#x36;&#x39;&#54;&#x36;&#55;&#x31;&#50;&#56;&#x35;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;" >&#50;&#x36;&#x39;&#54;&#x36;&#55;&#x31;&#50;&#56;&#x35;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  密码：Oracle123</strong></em><br>[jdk11下载地址]（<a class="link"   href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html%EF%BC%89" >https://www.oracle.com/java/technologies/javase-jdk11-downloads.html） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>下载如下所示macos对应的jdk11:<br><a href="https://imgtu.com/i/6ahdXt"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ax1x.com/2021/03/13/6ahdXt.png"
                      alt="6ahdXt.png"
                ></a></p>
<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p>直接按步骤下一步就好，安装好后；可能你会说为啥不用homebrew安装啊，其实我也试了；这东西吧，安装贼慢，大家都懂!所以还是下安装包，自己手动安装下就好；<br>接下来我们配置下环境变量，因为我们本地安装了两个版本的jdk,所以我们需要配置下不同的环境变量；当我们需要指定那个版本时，只需要在环境变量中指定对应的版本就好；</p>
<p>步骤如下：</p>
<p>-1.- 打开终端：执行<code>open .bash_profile</code></p>
<p>-2.- 在访达中，前往文件夹<code>/Library/Java/JavaVirtualMachines/</code> 即可看到我们本地已经安装好了两个版本的java,如图所示：</p>
<p><a href="https://imgtu.com/i/6a4dC4"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ax1x.com/2021/03/13/6a4dC4.png"
                      alt="6a4dC4.png"
                ></a></p>
<p>-3- 在.bash_profile文件中配置对应的环境变量：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br><span class="line">export JAVA_11_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.10.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">export PATH=$COCOS_CONSOLE_ROOT:$JAVA_11_HOME/bin:$PATH:.</span><br><span class="line">export CLASSPATH=$JAVA_11_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br></pre></td></tr></table></figure></div>
<p>-4- 配置好保存后，执行<code>source ~/.bash_profile</code>即可切换到对应的版本了；如图：<br><a href="https://imgtu.com/i/6a425D"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ax1x.com/2021/03/13/6a425D.png"
                      alt="6a425D.png"
                ></a></p>
<h3 id="try-again"><a href="#try-again" class="headerlink" title="try again!"></a>try again!</h3><p>再次运行一下对应的jar文件看下，果然ok了！<br><a href="https://imgtu.com/i/6a4ort"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.ax1x.com/2021/03/13/6a4ort.png"
                      alt="6a4ort.png"
                ></a></p>
<blockquote>
<p>小结：本次我们在mac上安装了不同版本的jdk,并且达到了动态指定运行版本的目的；因为jdk版本目前国内还是比较常用的，我们为了以后可以简单切换做了兼容处理；需要切换的时候修改一下配置即可！好了，终于可以运行halo了,接下来就是研究下这个框架，试着做个自己喜欢的主题出来。</p>
</blockquote>
<p>念念不忘必有回xiang，你要睡前想，上班路上想，吃饭时想，不断琢磨就一定能做出东西来！</p>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>mbp</tag>
      </tags>
  </entry>
  <entry>
    <title>idea项目同步到gitee及github</title>
    <url>/2024/0116/push-project-to-gitee-github.html</url>
    <content><![CDATA[<blockquote>
<p>最近一小老弟问我怎么将idea中的项目上传到gitee，他说网上看的都有坑，啊这。。。好吧，本篇文章来实践一下</p>
</blockquote>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-gitee上新增仓库"><a href="#1-gitee上新增仓库" class="headerlink" title="1.gitee上新增仓库"></a>1.gitee上新增仓库</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/test_upload.png"
                     
                ></p>
<h3 id="2-idea中选择vcs，项目下生成-git-文件"><a href="#2-idea中选择vcs，项目下生成-git-文件" class="headerlink" title="2.idea中选择vcs，项目下生成.git 文件"></a>2.idea中选择vcs，项目下生成.git 文件</h3><p>vcs-&gt;import into Version control-&gt;create git repository<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/version_control.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/local.png"
                     
                ></p>
<h3 id="3-commit-pom文件到本地仓库"><a href="#3-commit-pom文件到本地仓库" class="headerlink" title="3.commit pom文件到本地仓库"></a>3.commit pom文件到本地仓库</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/pom_commit.png"
                     
                ></p>
<h3 id="4-push本地文件到远程仓库，并填写远程仓库地址"><a href="#4-push本地文件到远程仓库，并填写远程仓库地址" class="headerlink" title="4.push本地文件到远程仓库，并填写远程仓库地址"></a>4.push本地文件到远程仓库，并填写远程仓库地址</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/git_push.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/define_remote.png"
                     
                ></p>
<h3 id="5-push-rejected"><a href="#5-push-rejected" class="headerlink" title="5.push rejected"></a>5.push rejected</h3><blockquote>
<p>这一步，我看很多博客都说直接执行命令&#x3D;&#x3D;git push -f origin master&#x3D;&#x3D;强制push,其实这样做有很大的风险；一定要merge哈，保持和远程仓库一致才对</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/push_reject.png"
                     
                ></p>
<h3 id="6-执行git命令"><a href="#6-执行git命令" class="headerlink" title="6. 执行git命令"></a>6. 执行git命令</h3><blockquote>
<p>每一步操作都有说明，按操作来就好</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">echo@echodeMacBook-Pro test-upload % git pull #push失败是因为远程仓库有东西没有拉下来，.gitignore和LICENSE文件</span><br><span class="line">remote: Enumerating objects: 4, done.</span><br><span class="line">remote: Counting objects: 100% (4/4), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">展开对象中: 100% (4/4), 4.93 KiB | 1.23 MiB/s, 完成.</span><br><span class="line">来自 https://gitee.com/viEcho/test-upload</span><br><span class="line"> * [新分支]          master     -&gt; origin/master</span><br><span class="line">当前分支没有跟踪信息。</span><br><span class="line">请指定您要合并哪一个分支。</span><br><span class="line">详见 git-pull(1)。</span><br><span class="line"></span><br><span class="line">    git pull &lt;远程&gt; &lt;分支&gt;</span><br><span class="line"></span><br><span class="line">如果您想要为此分支创建跟踪信息，您可以执行：</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;分支&gt; master</span><br><span class="line"></span><br><span class="line">echo@echodeMacBook-Pro test-upload % git branch --set-upstream-to=origin/master #按提示执行此命令，表示和远端保持一致</span><br><span class="line">分支 &#x27;master&#x27; 设置为跟踪 &#x27;origin/master&#x27;。</span><br><span class="line">echo@echodeMacBook-Pro test-upload % git pull origin master #拉取远端主分支的文件</span><br><span class="line">来自 https://gitee.com/viEcho/test-upload</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">提示：您有偏离的分支，需要指定如何调和它们。您可以在执行下一次</span><br><span class="line">提示：pull 操作之前执行下面一条命令来抑制本消息：</span><br><span class="line">提示：</span><br><span class="line">提示：  git config pull.rebase false  # 合并</span><br><span class="line">提示：  git config pull.rebase true   # 变基</span><br><span class="line">提示：  git config pull.ff only       # 仅快进</span><br><span class="line">提示：</span><br><span class="line">提示：您可以将 &quot;git config&quot; 替换为 &quot;git config --global&quot; 以便为所有仓库设置</span><br><span class="line">提示：缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，</span><br><span class="line">提示：或者 --ff-only 参数覆盖缺省设置。</span><br><span class="line">致命错误：需要指定如何调和偏离的分支。</span><br><span class="line">echo@echodeMacBook-Pro test-upload % git config pull.rebase false #说明有文件没有同步，配置为合并</span><br><span class="line">echo@echodeMacBook-Pro test-upload % git pull origin master #在拉一次，发现是历史存在的和当前本地分支新增关联前就有的</span><br><span class="line">来自 https://gitee.com/viEcho/test-upload</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">致命错误：拒绝合并无关的历史</span><br><span class="line">echo@echodeMacBook-Pro test-upload % git pull origin master --allow-unrelated-histories #表示允许没关联的文件也同步拉取</span><br><span class="line">来自 https://gitee.com/viEcho/test-upload</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Merge made by the &#x27;ort&#x27; strategy.</span><br><span class="line"> .gitignore |  23 +++++++++++++++++++</span><br><span class="line"> LICENSE    | 201 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"> 2 files changed, 224 insertions(+)</span><br><span class="line"> create mode 100644 .gitignore</span><br><span class="line"> create mode 100644 LICENSE</span><br><span class="line">echo@echodeMacBook-Pro test-upload % git push #merge完，push 就ok了</span><br><span class="line">枚举对象中: 6, 完成.</span><br><span class="line">对象计数中: 100% (6/6), 完成.</span><br><span class="line">使用 16 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (4/4), 完成.</span><br></pre></td></tr></table></figure></div>

<h3 id="7-merge操作"><a href="#7-merge操作" class="headerlink" title="7.merge操作"></a>7.merge操作</h3><p>执行拉取远端文件时，要合并；直接输入</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">:wq! #代表确认合入并退出vim编辑模式</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/merge.png"
                     
                ></p>
<p>——————————–分割线———————————</p>
<blockquote>
<p>号外：接着以前博客，新增点内容</p>
</blockquote>
<p>tips: 最近在家准备面试，整理了个人博客；也准备写点代码，之前个人本地代码都是上传到gitee上了，自从搭了梯子后访问github也不成问题了；一个想法浮现在我的脑海里，能不能即把项目上传到gitee又把项目上传到github呢？开整吧</p>
<h3 id="8-在github上新建同名的工程"><a href="#8-在github上新建同名的工程" class="headerlink" title="8.在github上新建同名的工程"></a>8.在github上新建同名的工程</h3><blockquote>
<p>这里需要说明一下，github现在默认分支是main,所以新建仓库之前如果要修改默认分支为master;得去设置一下：<code>点击个人github头像-&gt;Settings-&gt;Repositories</code>,在Repository default branch中填master然后update这样新建的仓库默认就是master是默认分支了</p>
</blockquote>
<p>另外在github上新建项目时，不要选择新增额外的readme,ignore,LICENSE文件，因为已经有的项目很有可能有这样的文件了，若新建了合并的时候将会有冲突。</p>
<h3 id="9-idea中add-remotes"><a href="#9-idea中add-remotes" class="headerlink" title="9.idea中add remotes"></a>9.idea中add remotes</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/remotes.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/add_remotes.png"
                     
                ><br>然后push，选择github,然后不出意外又要出意外了；push被拒绝了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/switch_github.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/toolsSetting/24/1/16/push_error.png"
                     
                ><br>不要慌，我们push前先pull合并一下github上master的仓库，虽然毛也没有但就是要这样操作一下，emm怪怪的</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后就会出现要你合并的操作，键入:wq!回车保存即可</span></span><br></pre></td></tr></table></figure></div>
<p>合并完，然后我们再push一遍发现就ok了；</p>
<blockquote>
<p>小结：好了，至此我们将上传到gitee的项目也同步上传到了github；愉快的玩耍去吧</p>
</blockquote>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
  </entry>
  <entry>
    <title>mac终端常用命令及环境配置</title>
    <url>/2022/0317/mac-command-shell.html</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>查看文件下列表 <code>sl</code></li>
<li>查看端口占用 <code>lsof -i:8080</code></li>
<li>杀掉某pid对应的进程 <code>kill pid</code></li>
<li>启动redis<code>redis-server</code></li>
<li>启动redis客户端<code>redis-cli</code></li>
<li>查看redis相关的后台进程<code>ps -ef | grep redis</code></li>
<li>检测6379端口是否在监听 <code>netstat -anvp tcp |grep 6379</code></li>
</ul>
<h3 id="mysql修改密码"><a href="#mysql修改密码" class="headerlink" title="mysql修改密码"></a>mysql修改密码</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入root 用户下</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="comment">#输入密码</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">//在root用户下进入mysql</span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure></div>

<h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">open -e .bash_profile</span><br><span class="line"><span class="comment"># 修改完后更新生效</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>mbp</tag>
      </tags>
  </entry>
  <entry>
    <title>idea 常用快捷键</title>
    <url>/2021/0423/idea-shortcut-key.html</url>
    <content><![CDATA[<h3 id="Ctrl-xxx-操作"><a href="#Ctrl-xxx-操作" class="headerlink" title="Ctrl + xxx 操作"></a><strong>Ctrl + xxx 操作</strong></h3><p>———————————————————&gt;&gt;&gt;</p>
<p><strong>Ctrl + J</strong> 插入代码模板</p>
<p>　　通过代码模板可以快速创建main函数，for循环等。</p>
<p>　　直接输入缩写 <strong>按tab</strong> 也可以插入代码模板：</p>
<p>　　　　① <strong>psvm</strong> main函数（public static void main的首字母）</p>
<p>　　　　② <strong>sout</strong> 输出语句（System.out.println()）</p>
<p>　　　　③ <strong>fori</strong> for循环（递增）</p>
<p>　　　　④ <strong>forr</strong> for反向循环（递减）</p>
<p>-——————————————————–</p>
<p><strong>CTRL + E</strong> 查看最近打开的文件</p>
<p>-——————————————————–</p>
<p><strong>Ctrl+Y</strong>，删除当前行</p>
<p>-——————————————————–</p>
<p><strong>CTRL + F</strong>  本文件查找</p>
<p>-——————————————————–</p>
<p><strong>CTRL + ~</strong>  快速切换（界面外观、代码风格、快捷键映射等菜单）</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Tab</strong> 快速选择拆分器</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + W</strong> 快速选择</p>
<p>　　按语法选中代码，从光标处开始，选择范围逐渐扩大，从单词到词组、到语句、到代码行、到代码块、直到全选。同样的也有反向的快速选择【 <strong>Ctrl + Shift + W</strong> 】，用法和快速选择相反。</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + F9</strong>  重新编译</p>
<p>-——————————————————–&gt;&gt;&gt;</p>
<h3 id="Ctrl-Shift-xxx-操作"><a href="#Ctrl-Shift-xxx-操作" class="headerlink" title="Ctrl + Shift + xxx 操作"></a><strong>Ctrl + Shift + xxx 操作</strong></h3><p>-——————————————————–&gt;&gt;&gt;</p>
<p><strong>Ctrl + Shift + F</strong> 全工程查找关键字（和 <strong>Ctrl + F</strong> 本文件查找关键字对应）</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Shift + R</strong> 全工程替换关键字 （和 <strong>Ctrl + R</strong> 本文件替换关键字对应）</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Shift + N</strong> 查找资源文件（和 <strong>Ctrl + N</strong> 查找类对应）</p>
<p>　　比SHIFT + SHIFT检索速度上要快，更精确一些，但是后者可以检索数据库的表，检索范围上要更大一点。</p>
<p>-——————————————————–</p>
<p><strong>CTRL + SHIFT + O</strong> 重写&#x2F;实现超类的方法</p>
<p>-——————————————————–</p>
<p><strong>CTRL + SHIFT + E</strong> 查看最近编辑过的文件</p>
<p>-——————————————————–</p>
<p><strong>Ctrl+Shift+F7</strong>，高亮显示选中的所有文本，按 Esc 高亮消失</p>
<p>-——————————————————–</p>
<p><strong>Ctrl+Shift+Backspace</strong>，跳转到上次编辑的地方</p>
<p>-——————————————————–</p>
<p><strong>CTRL + SHIFT + U</strong> 切换大小写</p>
<p>-——————————————————–</p>
<p><strong>CTRL + SHIFT + C</strong> 复制路径</p>
<p>-——————————————————–&gt;&gt;&gt;</p>
<h3 id="Ctrl-Alt-xxx-操作"><a href="#Ctrl-Alt-xxx-操作" class="headerlink" title="Ctrl + Alt + xxx 操作"></a><strong>Ctrl + Alt + xxx 操作</strong></h3><p>-——————————————————–&gt;&gt;&gt;</p>
<p><strong>Ctrl + Alt + T</strong>  Surround with 选中代码被什么包裹</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Alt + ←</strong> 光标跳转到上一个编辑的位置</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Alt + →</strong> 光标跳转到下一个编辑的位置</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Alt + ↑</strong>  选择代码后上移</p>
<p>-——————————————————–</p>
<p><strong>ALT + ALT+ ↓</strong> 选中代码后下移</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + ALT + V</strong> 快速提取返回值</p>
<p>-——————————————————–</p>
<p><strong>Ctrl + Alt + L</strong> 格式化代码</p>
<p>-——————————————————–&gt;&gt;&gt;</p>
<h3 id="Shift-、Alt操作"><a href="#Shift-、Alt操作" class="headerlink" title="Shift 、Alt操作"></a><strong>Shift 、Alt操作</strong></h3><p>-——————————————————–&gt;&gt;&gt;</p>
<p><strong>Shift + F6</strong> 重构改名</p>
<p>-——————————————————–</p>
<p><strong>Shift连点两下</strong> 全工程查找文件</p>
<p>　　Search Everywhere功能，搜索范围包括类、资源、配置项、方法等。</p>
<p>-——————————————————–</p>
<p><strong>Alt + F7</strong> 查看方法调用</p>
<p>-——————————————————–&gt;&gt;&gt;</p>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>idea类和方法配置注释模板</title>
    <url>/2021/0522/idea-template-comment.html</url>
    <content><![CDATA[<blockquote>
<p>很多开源的代码，人家注释写的那叫个工整啊，一直知道idea可以配置各种模板，但是觉得简单一直没去弄；今天看了些博客配置，发现自己按照上面来配还是没有达到自己想要的要求，改动调整后才达到；</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>我们要自己定义方法注释的模板，在<code>Live Templates</code>添加即可,但是我们要改默认的类上模板则需要<code>File and Code Templates</code>的<code>File Header</code>中增加配置，这样在类创建时就会按我们配置的生成注释；</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: $&#123;USER&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: $&#123;DATE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>
<p><a href="https://imgtu.com/i/gq56BR"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/22/gq56BR.png"
                     
                ></a></p>
<p><code>preferences</code>–&gt;<code>Live Templates</code> 点击右侧加号添加模板组，以我这里的配置为例，我自定义为<code>definedTemplates</code></p>
<p>分别定义了类上注释和方法上的注释模板；<br><a href="https://imgtu.com/i/gq65ct"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/22/gq65ct.png"
                     
                ></a></p>
<p>类模板(注意：第一个*号要最左，不是写错！)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> * <span class="meta">@description</span>: TODO</span><br><span class="line"> * <span class="meta">@auther</span>: $user$</span><br><span class="line"> * <span class="meta">@date</span>: $date$</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></div>
<p><a href="https://imgtu.com/i/gqWrwV"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/22/gqWrwV.png"
                     
                ></a></p>
<p>方法模板</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> * <span class="meta">@description</span>: TODO</span><br><span class="line"> * <span class="meta">@author</span>: $user$</span><br><span class="line"> * <span class="meta">@date</span>: $date$</span><br><span class="line"> $params$</span><br><span class="line"> * <span class="meta">@return</span>: $<span class="keyword">return</span>$</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></div>
<p>$params$参数对应配置：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">groovyScript</span>(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27;* @param: &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\r\\n &#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, <span class="title function_">methodParameters</span>())</span><br></pre></td></tr></table></figure></div>
<p><a href="https://imgtu.com/i/gqh9D1"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/22/gqh9D1.png"
                     
                ></a><br>配置完，使他在java的配置中生效<br><a href="https://imgtu.com/i/gqTMh6"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/22/gqTMh6.png"
                     
                ></a><br>注意📢 ：我们配置的类名和方法名的缩写分别是<code>*c</code>,<code>*f</code></p>
<p>那么我们在类上添加注释的方式就是输入<code>/**</code>+c和enter键,在方法上添加注释的方式是输入<code>/**</code>+f和enter键;</p>
<p>其实我们在<code>File and Code Templates</code>的<code>File Header</code>中增加了类的注释模板，类在创建时就如同我们<code>/**</code>+c和enter的效果一致，但很多时候我们用一些工具生成或者拷贝别人代码的时候，并不会重新创建类，当我们需要修改时就可以用到这个快捷键了；</p>
<p>效果如下，很多注释属性觉得没用，只保留了个人认为重要的一些注释：<br><a href="https://imgtu.com/i/gqIYxe"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/05/22/gqIYxe.png"
                      alt="gqIYxe.png"
                ></a></p>
<blockquote>
<p>小结：本篇简要的介绍了类及方法上配置注释模板的方法，快配置完舒服一波吧；</p>
</blockquote>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>idea 无法加载识别本地类</title>
    <url>/2021/0423/idea-can-not-find-class.html</url>
    <content><![CDATA[<blockquote>
<p>idea 的影响力在java开发中的地位自不用说，但是它也经常“作妖”。今天我就遇到了它居然无法识别本地的一个实体和工具类的情况；本来不想写篇博客，但是觉得算是个坑点，遂记录在此！</p>
</blockquote>
<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/27/JWi5sf.png"
                     
                ></p>
<p>从截图我们可以看出，idea无法识别我本地自己定义的一个错误码提示类；</p>
<h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><ul>
<li><p>重新pull 代码，maven clean –&gt; compile 清理编译，发现还是不ok；</p>
</li>
<li><p>比对同事代码,代码一样。同事那边没问题，说明不是代码问题，可以确定idea在作妖！</p>
</li>
<li><p>借助搜索引擎，果然有人遇到了我一样的问题，删除工程下的.idea 再看，特么还是不ok啊！</p>
</li>
</ul>
<p>呃呃呃，这个咋整啊！</p>
<p>不急，我们细细想下idea 运行的文件是编译后文件，那么删除.idea后是不是还要再删除target文件呢？</p>
<p>诶，骚等。我clean–&gt;compile不是删除过再生成了吗？</p>
<p>算了，关闭idea 手动再删除一次target和.idea试下！删除后重启，wtf什么鬼 居然ok了；idea你咋酱紫作妖嘞（很有可能是idea 缓存导致的，但是很多时候重启确实能解决很多问题）！</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>所以,以后再遇到这种问题，解决办法：<code>删除.idea</code> + <code>手动删除编译后的target文件</code> ，再次编译构建；毕竟用的是cracked的（小声说），就不要白嫖还骂咧咧的说真香了！</p>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>jemeter 压测入门篇</title>
    <url>/2021/0423/jemeter-introduction.html</url>
    <content><![CDATA[<blockquote>
<p>最近改了些接口压测的bug, 无非就是逻辑和sql 层面的优化；改完后进行压测，接口性能基本满足了需要；发现jemeter 这个工具还是蛮强大的，我们平时都是用postman测试接口，所以很多小伙伴也没用过，网上很多教程看的都模棱两可的；还是动手自己写篇入门级操作步骤吧；</p>
</blockquote>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><a class="link"   href="https://pan.baidu.com/s/1kgNJO61wSglbyyvskwMOHQ"  target="_blank">百度盘链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  提取码：2thy</p>
<h3 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/14/Gx7UyT.png"
                      alt="jemeter.bat"
                ></p>
<p>注意：点击运行后，会有个cmd窗口打开着，不要关；</p>
<h3 id="3-选择中文"><a href="#3-选择中文" class="headerlink" title="3.选择中文"></a>3.选择中文</h3><p>软件启动后，我们先不急着操作，把语言改变过来再说；option-&gt;Choose Language-&gt;Chinese，选择简体中文即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/14/GxHicV.png"
                      alt="Choose Language"
                ></p>
<h3 id="4-新增线程组"><a href="#4-新增线程组" class="headerlink" title="4.新增线程组"></a>4.新增线程组</h3><p>右键TestPlan 新增一个线程组，设置线程组名称 和 线程数，还有两个参数Ramp Up时间代表多少秒启动这些线程，循环次数是这些线程 执行次数，后两个参数基本无需修改，了解即可！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/14/Gx7zkj.png"
                      alt="TestPlan"
                ></p>
<h3 id="5-新增http-https-测试接口"><a href="#5-新增http-https-测试接口" class="headerlink" title="5.新增http&#x2F;https 测试接口"></a>5.新增http&#x2F;https 测试接口</h3><p>右键线程组名称 添加-&gt;取样器-&gt;http请求  如下设置你的接口请求</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/14/GxLStH.png"
                      alt="GxLStH.png"
                ></p>
<h3 id="6-新增监控项"><a href="#6-新增监控项" class="headerlink" title="6.新增监控项"></a>6.新增监控项</h3><p>http 请求添加好了，我们需要新增监听器 查看监听结果，如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/14/GxLQcq.png"
                      alt="http_item"
                ></p>
<h3 id="7-启动测试"><a href="#7-启动测试" class="headerlink" title="7.启动测试"></a>7.启动测试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/14/GxO1Gd.png"
                      alt="test"
                ></p>
<p>一般我们选择用表格查看结果，1.清理上次操作记录  2.启动  3.各线程响应时间</p>
<blockquote>
<p>好了，基本入门就是酱紫了，愉快的玩耍去吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>jemeter</tag>
      </tags>
  </entry>
  <entry>
    <title>navicat安装教程（附带工具）</title>
    <url>/2021/0423/navicat-install.html</url>
    <content><![CDATA[<blockquote>
<p>所在公司目前使用的数据库主要是mysql 和hive, 所以选择的数据库客户端工具是sqlYog和xshell了。但是最近一个可视化系统需要支持配置多数据源，包括mysql,orcale,sqlServer，这就有个问题sqlYog连不了oracle 和sqlServer。然后不得不换到navicat,安装navicat 的时候遇到一些问题，现将步骤说明如下，避免入坑！</p>
</blockquote>
<p>题外话，本来想把软件放到CSDN 资源只需要1个积分即可下载，没想到审核不同过。。。好吧，还是弄个百度盘链接吧！本来也没想赚积分的，想着放CSDN自己以后下也方便一点的，百度不开会员下载速度太坑了!</p>
<h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><p>百度盘链接：<a class="link"   href="https://pan.baidu.com/s/1NcBqUZRBZ9J87j7VAMvayA"  target="_blank">百度盘链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>提取码：3em7</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>解压</p>
<p> 解压下载后的文件，然后安装navicat 安装包，默认安装到C盘即可；</p>
</li>
<li><p>关闭杀毒软件（避免杀毒软件会把【注册机】默认为病毒程序进行清理）</p>
</li>
<li><p>注册机的使用</p>
<p>将注册机程序移动到navicat 安装包的根路径下，如图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/12/YtFZrR.png"
                     
                ></p>
</li>
</ul>
<h3 id="注册机注册激活"><a href="#注册机注册激活" class="headerlink" title="注册机注册激活"></a>注册机注册激活</h3><p>运行navicat 桌面快捷方式，点击注册</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/12/YtA4KJ.jpg"
                     
                ></p>
<p>然后可以看到需要我们输入序列号，我们找到注册机程序双击运行，点击Patch看到以下界面表示注册机破解成功！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/12/YtVw0s.png"
                     
                ></p>
<p>点击确定，然后点击Generate自动生成填写序列号，要自动填充到navicat 的许可证框框中，不要手动复制过去！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/12/YtE4W8.png"
                     
                ></p>
<p>点击激活，将请求码复制到注册机中点击Generate生成激活码，可以看到激活码已经自动填充了，点击激活即可（激活后不要升级软件哈，不然你懂的）！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/12/YtVjHA.jpg"
                     
                ></p>
<h3 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h3><p>可以看到我这里mysql，oracle,sqlServer 都可以链接上了；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/05/09/YlyuIf.png"
                     
                ></p>
<p>注意：链接oracle 时要选择SID, 如果测试链接不上的话，可以先点<code>确认</code>进去然后双击对应的连接，会显示下载oracle对应的组件！下载后再点连接基本就ok啦！</p>
<h3 id="解决oracle-oic链接报错问题"><a href="#解决oracle-oic链接报错问题" class="headerlink" title="解决oracle oic链接报错问题"></a>解决oracle oic链接报错问题</h3><p>详见下载的“oracle连接oci问题报错解决方法”文档！</p>
<blockquote>
<p>好了，以后mysql ，oracle ，sqlServer一个连接工具就都可以搞定了；那就开干吧，加油呐！</p>
</blockquote>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>vsCode vue开发配置</title>
    <url>/2021/0423/vscode-vue-config.html</url>
    <content><![CDATA[<blockquote>
<p>之前说了前端框架的演进，那就开干吧！开干之前我们初始化vue项目后需要做些什么呢？</p>
</blockquote>
<h3 id="下载检查插件"><a href="#下载检查插件" class="headerlink" title="下载检查插件"></a>下载检查插件</h3><blockquote>
<p>vetur</p>
</blockquote>
<p>Vetur支持.vue文件的语法高亮显示，除了支持template模板以外，还支持大多数主流的前端开发脚本和插件，比如Sass和TypeScrip<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/01/Gl0BQK.png"
                      alt="Vetur插件"
                ></p>
<blockquote>
<p>eslint</p>
</blockquote>
<ul>
<li>1.审查代码是否符合编码规范和统一的代码风格；</li>
<li>2.审查代码是否存在语法错误<br><code>npm install eslint --save-dev</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/01/GlBpmF.png"
                      alt="eslint插件"
                ><br>注意：这里之所以安装了对应的依赖还安装插件是因为后面我们的配置需要插件来协助，不然是无法识别的！</li>
</ul>
<h3 id="setting-json配置"><a href="#setting-json配置" class="headerlink" title="setting.json配置"></a>setting.json配置</h3><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.rendererType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 打开代码自动提示</span></span><br><span class="line">    <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 文件格式</span></span><br><span class="line">    <span class="attr">&quot;emmet.syntaxProfiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vue-html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// tab 自动补全标签</span></span><br><span class="line">    <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vue-html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 代码缩进修改成4个空格 如果同时设置了eslint缩进会和其冲突(如果你不要eslint 可以放开下面三个配置)</span></span><br><span class="line">    <span class="comment">// &quot;editor.tabSize&quot;: 4,</span></span><br><span class="line">    <span class="comment">// &quot;editor.formatOnType&quot;: true, // 代码格式化 同eslint冲突</span></span><br><span class="line">    <span class="comment">// &quot;editor.formatOnSave&quot;: true, // 代码保存时自动格式化 同eslint冲突</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不檢查縮進，保存后統一按設置項來設置</span></span><br><span class="line">    <span class="attr">&quot;editor.detectIndentation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制 Markdown 预览中使用的字号(以像素为单位)。</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制终端的字号(以像素为单位)。</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 切换文件时自动保存</span></span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFocusChange&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 文件保存时自动去除多余的空格</span></span><br><span class="line">    <span class="attr">&quot;files.trimTrailingWhitespace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 终端选中即复制</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.copyOnSelection&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 換行</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 設置行高</span></span><br><span class="line">    <span class="attr">&quot;editor.lineHeight&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// &quot;eslint.autoFixOnSave&quot;: true,</span></span><br><span class="line">    <span class="comment">// &quot;eslint.validate&quot;: [</span></span><br><span class="line">    <span class="comment">//     &quot;javascript&quot;,</span></span><br><span class="line">    <span class="comment">//     &quot;javascriptreact&quot;,</span></span><br><span class="line">    <span class="comment">//     &quot;html&quot;,</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         &quot;language&quot;: &quot;vue&quot;,</span></span><br><span class="line">    <span class="comment">//         &quot;autoFix&quot;: true</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    <span class="attr">&quot;eslint.options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;html&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.validation.template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js-beautify-html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;js-beautify-html&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 属性强制折行对齐</span></span><br><span class="line">            <span class="attr">&quot;wrap_attributes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;force-aligned&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//空格</span></span><br><span class="line">    <span class="attr">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="eslintrc-js配置"><a href="#eslintrc-js配置" class="headerlink" title=".eslintrc.js配置"></a>.eslintrc.js配置</h3><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://eslint.org/docs/user-guide/configuring</span></span><br><span class="line"></span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//此项是用来告诉eslint找当前配置文件不能往父级查找</span></span><br><span class="line">    root<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析</span></span><br><span class="line">    parser<span class="punctuation">:</span> <span class="string">&quot;babel-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式</span></span><br><span class="line">    parserOptions<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块</span></span><br><span class="line">        sourceType<span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ecmaFeatures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此项指定环境的全局变量，下面的配置指定为浏览器环境</span></span><br><span class="line">    env<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commonjs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;es6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amd&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// https://github.com/standard/standard/blob/master/docs/RULES-en.md</span></span><br><span class="line">    <span class="comment">// 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错</span></span><br><span class="line">    extends<span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的</span></span><br><span class="line">    plugins<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;flow-vars&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;react&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin-</span></span><br><span class="line"><span class="comment">    主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致</span></span><br><span class="line"><span class="comment">    &quot;off&quot; -&gt; 0 关闭规则</span></span><br><span class="line"><span class="comment">    &quot;warn&quot; -&gt; 1 开启警告规则</span></span><br><span class="line"><span class="comment">    &quot;error&quot; -&gt; 2 开启错误规则</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    rules<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;indent&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;warn&quot;</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 缩进4个空格</span></span><br><span class="line">        <span class="attr">&quot;consistent-return&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// return 后面是否允许省略</span></span><br><span class="line">        <span class="attr">&quot;quotes&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 强制一致使用反引号，双引号或单引号</span></span><br><span class="line">        <span class="attr">&quot;prefer-const&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 如果一个变量从不重新分配，使用const声明更好</span></span><br><span class="line">        <span class="attr">&quot;space-before-function-paren&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 函数定义时括号前面要不要有空格</span></span><br><span class="line">        <span class="comment">// &quot;space-before-function-paren&quot;: [&quot;error&quot;, &#123; // 函数括号前端需要一个空格</span></span><br><span class="line">        <span class="comment">//     &quot;anonymous&quot;: &quot;always&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;named&quot;: &quot;always&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;asyncArrow&quot;: &quot;ignore&quot;</span></span><br><span class="line">        <span class="comment">// &#125;],</span></span><br><span class="line">        <span class="attr">&quot;camelcase&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span><span class="comment">//强制驼峰法命名</span></span><br><span class="line">        <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;always&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 语句后面添加的分号</span></span><br><span class="line">        <span class="attr">&quot;no-unneeded-ternary&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 当存在更简单的选择时不允许三元运算符</span></span><br><span class="line">        <span class="attr">&quot;no-return-assign&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">//</span></span><br><span class="line">        <span class="attr">&quot;object-curly-spacing&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 在大括号内强制执行一致的间距</span></span><br><span class="line">        <span class="attr">&quot;padded-blocks&quot;</span><span class="punctuation">:</span> &#x27;off&#x27;<span class="punctuation">,</span> <span class="comment">// 要求或不允许块内的填充</span></span><br><span class="line">        <span class="attr">&quot;arrow-parens&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 它也将有助于找到箭头函数（=&gt;），这些函数可能被错误地包含在一个条件中，如果这样的比较&gt;=是有意的。</span></span><br><span class="line">        <span class="attr">&quot;generator-star-spacing&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 围绕*生成器函数（generator-star-spacing）强制执行间距</span></span><br><span class="line">        <span class="attr">&quot;no-debugger&quot;</span><span class="punctuation">:</span> process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="number">2</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// &quot;semi-spacing&quot;: [&quot;error&quot;, &#123;&quot;before&quot;: false, &quot;after&quot;: false&#125;], // 分号前后不准有空格</span></span><br><span class="line">        <span class="attr">&quot;no-trailing-spaces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;skipBlankLines&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 允许在空行上结尾空白</span></span><br><span class="line">        <span class="attr">&quot;no-multiple-empty-lines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;max&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="comment">// &quot;max&quot;（默认2：）强制连续空行的最大数量</span></span><br><span class="line">            <span class="attr">&quot;maxEOF&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="comment">// &quot;maxEOF&quot; 在文件末尾强制执行最大数量的连续空行</span></span><br><span class="line">            <span class="attr">&quot;maxBOF&quot;</span><span class="punctuation">:</span> <span class="number">2</span> <span class="comment">// &quot;maxBOF&quot; 在文件的开头强制执行最大数量的连续空行</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="comment">//开启对.vue文件中错误的检查</span></span><br><span class="line">            <span class="string">&quot;javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;javascriptreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="editorconfig配置"><a href="#editorconfig配置" class="headerlink" title=".editorconfig配置"></a>.editorconfig配置</h3><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"># EditorConfig文件使用INI格式。斜杠(/)作为路径分隔符，#或者;作为注释。路径支持通配符<span class="punctuation">:</span></span><br><span class="line"># 表明是最顶层的配置文件，发现设为<span class="literal"><span class="keyword">true</span></span>时，才会停止查找.editorconfig文件</span><br><span class="line">root = <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line"># * 匹配除/之外的任意字符</span><br><span class="line"># **    匹配任意字符串</span><br><span class="line"># ? 匹配任意单个字符</span><br><span class="line"># <span class="punctuation">[</span>name<span class="punctuation">]</span>    匹配name字符</span><br><span class="line"># <span class="punctuation">[</span>!name<span class="punctuation">]</span>   不匹配name字符</span><br><span class="line"># <span class="punctuation">[</span>s1<span class="punctuation">,</span>s2<span class="punctuation">,</span>s3<span class="punctuation">]</span>    匹配给定的字符串</span><br><span class="line"># <span class="punctuation">[</span>num1..num2<span class="punctuation">]</span>  匹配num1到mun2直接的整数</span><br><span class="line"><span class="punctuation">[</span>*<span class="punctuation">]</span></span><br><span class="line"># 文件的charset。有以下几种类型：latin1<span class="punctuation">,</span> utf<span class="number">-8</span><span class="punctuation">,</span> utf<span class="number">-8</span>-bom<span class="punctuation">,</span> utf<span class="number">-16</span>be<span class="punctuation">,</span> utf<span class="number">-16</span>le</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line"># 缩进使用 tab 或者 space</span><br><span class="line">indent_style = space</span><br><span class="line"># 缩进为 space 时，缩进的字符数</span><br><span class="line">indent_size = <span class="number">4</span></span><br><span class="line"># 换行符的类型。lf<span class="punctuation">,</span> cr<span class="punctuation">,</span> crlf三种</span><br><span class="line">end_of_line = lf</span><br><span class="line"># 是否将行尾空格自动删除</span><br><span class="line">trim_trailing_whitespace = <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"># 是否使文件以一个空白行结尾</span><br><span class="line">insert_final_newline = <span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure></div>
<h3 id="eslintignore配置"><a href="#eslintignore配置" class="headerlink" title=".eslintignore配置"></a>.eslintignore配置</h3><p>一般默认的，我们无需修改</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">build<span class="comment">/*.js</span></span><br><span class="line"><span class="comment">config/*.js</span></span><br><span class="line"><span class="comment">node_modules/*.js</span></span><br><span class="line"><span class="comment">static/*/</span>*.js</span><br><span class="line">src/vendor/plugins<span class="comment">/*.js</span></span><br></pre></td></tr></table></figure></div>
<h3 id="js修改"><a href="#js修改" class="headerlink" title="js修改"></a>js修改</h3><p>一般，我们需要编译时就校验而不是webpack打包时再校验，可以注释掉webpack.dev.conf.js中的此段js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createLintingRule</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// test: /\.(js|vue)$/,</span></span><br><span class="line">        <span class="comment">// loader: &#x27;eslint-loader&#x27;,</span></span><br><span class="line">        <span class="comment">// enforce: &#x27;pre&#x27;,</span></span><br><span class="line">        <span class="comment">// include: [resolve(&#x27;src&#x27;), resolve(&#x27;test&#x27;)],</span></span><br><span class="line">        <span class="comment">// options: &#123;</span></span><br><span class="line">        <span class="comment">//   formatter: require(&#x27;eslint-friendly-formatter&#x27;),</span></span><br><span class="line">        <span class="comment">//   emitWarning: !config.dev.showEslintErrorsInOverlay</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>而我们如果需要禁用eslint只需要在config下的index.js中将<code>useEslint: true,</code>改为false即可！</p>
<h3 id="配置vue-模版"><a href="#配置vue-模版" class="headerlink" title="配置vue 模版"></a>配置vue 模版</h3><p>操作如下图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/01/GlBz9I.png"
                     
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Create vue template&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  &lt;div class=\&quot;container\&quot;&gt;\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  &lt;/div&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  name: &#x27;c&#x27;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  data () &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    return &#123;\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  &#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  props: &#123;&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  components: &#123;&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  watch: &#123;&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  computed: &#123;&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  created () &#123;&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  mounted () &#123;&#125;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;  methods: &#123;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;style scoped lang=\&quot;scss\&quot;&gt;\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;$2&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Create vue template&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>那么我们只需要新建一个.vue的页面就可以得到一个模版如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/01/GlDeCn.png"
                     
                ><br>注：这里我们配置模版，尽量按vue的生命周期，从前向后配置！引入的组件和定义的数据还是按在script最上层，这样使得数据层结构一目了然！</p>
<blockquote>
<p>小结：工欲善其事，必先利其器！vue撸起，后面将继续总结es6语法，数据的双向绑定，父子组件通信，函数异步调用，bus、store、路由等配置及用法。奥利给，前端代码也撸起来吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
      <tags>
        <tag>vue,eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>mac虚拟机搭建&amp;设置静态ip</title>
    <url>/2022/0418/mac-virtual-machine-static-ip.html</url>
    <content><![CDATA[<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="mac下载VMwareFunction"><a href="#mac下载VMwareFunction" class="headerlink" title="mac下载VMwareFunction"></a>mac下载VMwareFunction</h3><p><a href="%22https://www.vmware.com/%22">下载地址</a><br>vMware针对个人开发者是免费的，用邮箱填写一个账号，填写个人信息即可获取激活码，这个自己摸索即可</p>
<h3 id="下载虚拟机镜像"><a href="#下载虚拟机镜像" class="headerlink" title="下载虚拟机镜像"></a>下载虚拟机镜像</h3><p><a class="link"   href="https://mirrors.aliyun.com/centos-vault/6.10/isos/x86_64/" >ali镜像 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="镜像安装"><a href="#镜像安装" class="headerlink" title="镜像安装"></a>镜像安装</h3><p>启动vMware，将下载的镜像拖到vMware中即可，为了保证方便数据传输，注意勾选下面的与<br>本机共享读写即可，输入账号密码后，傻瓜式安装即可；</p>
<h3 id="读取ip"><a href="#读取ip" class="headerlink" title="读取ip"></a>读取ip</h3><p>虚拟机安装后，会提示你输入密码进入，输入之前自己设置的密码即可进入虚拟机桌面<br>进入虚拟机桌面后，右键-》open in Terminal输入ipconfig即可看到虚拟机的ip</p>
<h3 id="设置虚拟机静态ip"><a href="#设置虚拟机静态ip" class="headerlink" title="设置虚拟机静态ip"></a>设置虚拟机静态ip</h3><p>你搭建了虚拟机，为了后面搭建集群啥的方便，肯定要设置这个静态ip的；如果你不小心没配置，那么恭喜你，你后面集群搭好了，mac地址随着时间过期，或者网络断了重连，那么ip就会变化，那么你辛辛苦苦搞的配置也要重新配了；</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开mac终端</span></span><br><span class="line"><span class="built_in">cat</span> /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf | grep <span class="string">&quot;ip = &quot;</span></span><br><span class="line"><span class="built_in">cat</span> /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf | grep <span class="string">&quot;netmask = &quot;</span></span><br><span class="line">ip = 172.14.2.2 <span class="comment">#mac的网管</span></span><br><span class="line">netmask = 255.255.255.0 <span class="comment">#子网掩码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mac终端连接虚拟机</span></span><br><span class="line">ssh root@172.14.2.xxx <span class="comment">#你在虚拟机中ifconfig看到的ip</span></span><br><span class="line"><span class="comment">#输入密码连接上后</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">#BOOTPROTO=&quot;dhcp&quot; #注释掉</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">IPADDR=配置为你想配置的ip</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.2.2</span><br><span class="line">DNS=8.8.8.8 <span class="comment">#可以不配置，你也打开你网络看下DNS那里是多少给配上</span></span><br><span class="line"></span><br><span class="line">HWADDR=<span class="string">&quot;00:0C:29:9E:B3:45&quot;</span> <span class="comment">#不要轻易修改</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="comment">#NM_CONTROLLED=&quot;yes&quot; #注释掉</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;069c3a30-4ea0-46fc-805c-300c282cda75&quot;</span> <span class="comment">#一定不能改,虚拟机安装的唯一标识，否则出现不可预料的问题只有重装虚拟机镜像了</span></span><br><span class="line"><span class="comment"># 保存后执行如下命令，重启虚拟机网络测试</span></span><br><span class="line">service restart network</span><br><span class="line">ping www.baidu.com</span><br><span class="line"><span class="comment">#发现ping不通了，使用如下命令</span></span><br><span class="line"><span class="built_in">echo</span> nameserver 8.8.8.8 &gt; /etc/resolv.conf</span><br><span class="line"><span class="built_in">echo</span> nameserver 8.8.4.4 &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure></div>
<p><a class="link"   href="https://blog.csdn.net/hahachenchen789/article/details/52295087" >linux的nameserver-域名服务器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>toolsSetting</category>
      </categories>
  </entry>
  <entry>
    <title>前端架构演进及主流UI</title>
    <url>/2021/0423/web-ui-evolution.html</url>
    <content><![CDATA[<blockquote>
<p>前端演进到现在，各种技术框架已经层出不穷了，作为一名开发少不了要干一些前端的活儿，那么整个前端的架构体系是怎样的呢？让我们一起来了解回顾一下</p>
</blockquote>
<h3 id="前端三要素"><a href="#前端三要素" class="headerlink" title="前端三要素"></a>前端三要素</h3><ul>
<li>HTML(结构):超文本标记语言(Hyper Text Markup Language)，决定网页的结构和内容</li>
<li>CSS(表现):层叠样式表(Cascading Style Sheets)，设定网页的表现样式</li>
<li>JavaScript(行为):是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行， 用于控制网页的行为</li>
</ul>
<p><em><strong>HTML</strong></em> 称为<a class="link"   href="https://baike.baidu.com/item/超文本/2832422"  targer="_blank">超文本 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>标记语言，是一种标识性的语言。它通过一系列标签组合，组成一个个不同结构的页面！关于html标签的学习可以去<a class="link"   href="https://www.runoob.com/html/html-tutorial.html"  targer="_blank">菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>学习，此处不再赘述！</p>
<p><em><strong>CSS层叠样式表</strong></em> 也是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说<br>就是不具备任何语法支持，它主要缺陷如下：</p>
<ul>
<li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器;</li>
<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难 以维护;</li>
</ul>
<p>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为 【CSS 预处理器】 的工具，提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护 性。大大提高了前端在样式上的开发效率。</p>
<p>什么是CSS 预处理器呢？</p>
<p>CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的 特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行 CSS 的编码工作。转化成通俗易 懂的话来说就是“用一种专门的编程语言，进行 Web 页面样式设计，再通过编译器转化为正常的 CSS 文 件，以供项目使用”。</p>
<p>常用的 CSS 预处理器有哪些？</p>
<ul>
<li>SASS:基于 Ruby，通过服务端处理，功能强大。解析效率高。需要学习 Ruby 语言，上手难度高于 LESS。</li>
<li>LESS:基于 NodeJS，通过客户端处理，使用简单。功能比 SASS 简单，解析效率也低于 SASS，但在实际开发中足够了，所以我们后台人员如果需要的话，建议使用 LESS。</li>
</ul>
<p><em><strong>JavaScript</strong></em> 一门弱类型脚本语言，其源代码在发往客户端运行之前不需经过编译，而是将文本格式的字 符代码发送给浏览器由浏览器解释运行。</p>
<p><strong>Native 原生 JS 开发</strong><br>原生 JS 开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。</p>
<p>ES 标准已发布如下版本：</p>
<ul>
<li>ES3</li>
<li>ES4(内部，未正式发布)</li>
<li>ES5(全浏览器支持)</li>
<li>ES6(常用，当前主流版本:webpack打包成为ES5支持!)</li>
<li>ES7</li>
<li>ES8</li>
<li>ES9(草案阶段)</li>
</ul>
<p>从 ES6 开始每年发布一个版本，以年份作为名称，区别就是逐步增加新特性。</p>
<p><strong>TypeScript 微软的标准</strong><br>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这 个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格(C#、Delphi、 TypeScript 之父;.NET 创立者)主导。</p>
<h3 id="JavaScript-框架"><a href="#JavaScript-框架" class="headerlink" title="JavaScript 框架"></a>JavaScript 框架</h3><p><em><strong>1.jQuery库</strong></em></p>
<p>大家最熟知的 JavaScript库，优点是简化了 DOM 操作，缺点是 DOM 操作太频繁，影响前端性能;在 前端眼里使用它仅仅是为了兼容 IE6、7、8;</p>
<p><em><strong>2.Angular库</strong></em></p>
<p>Google 收购的前端框架，由一群 Java 程序员开发，其特点是将后台的 MVC 模式搬到了前端并增加了模 块化开发的理念，与微软合作，采用 TypeScript 语法开发;对后台程序员友好，对前端程序员不太友 好;最大的缺点是版本迭代不合理(如:1代 -&gt; 2代，除了名字，基本就是两个东西;已推出了 Angular6)</p>
<p><em><strong>3.React</strong></em></p>
<p>Facebook 出品，一款高性能的 JS 前端框架;特点是提出了新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，有效的提升了前端渲染效率;缺点是使用复杂，因为需要额外学习一 门 【JSX】 语言;</p>
<p><em><strong>4.Vue</strong></em></p>
<p>一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态 管理等新特性。</p>
<p><strong>其特点是综合了 Angular(模块化) 和 React(虚拟 DOM) 的优点;</strong></p>
<p><em><strong>5.Axios</strong></em></p>
<p>前端通信框架;因为 Vue 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额 外使用一个通信框架与服务器交互;当然也可以直接选择使用 jQuery 提供的 A JAX 通信功能;</p>
<p><strong>JavaScript 构建工具</strong></p>
<ul>
<li>Babel:JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript</li>
<li>WebPack:模块打包器，主要作用是打包、压缩、合并及按序加载</li>
</ul>
<h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境,说白了就是运行在服务端的JavaScript;</p>
<p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复 杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。NodeJS 的作者已经声称放弃 NodeJS(说是架构做的不好再加上笨重的node_modules，可能让作者不爽了吧)，开始开发全新架构的 <a class="link"   href="http://www.fly63.com/article/detial/6137"  target="_blank">Deno <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下:</p>
<ul>
<li>Express: NodeJS 框架</li>
<li>Koa: Express 简化版</li>
<li>NPM: 项目综合管理工具，类似于 Maven</li>
<li>YARN: NPM 的替代方案，类似于 Maven 和 Gradle 的关系</li>
</ul>
<h3 id="常用UI框架"><a href="#常用UI框架" class="headerlink" title="常用UI框架"></a>常用UI框架</h3><ul>
<li>Ant-Design:阿里巴巴出品，基于 React 的 UI 框架</li>
<li>ElementUI、MintUi、iview、ic、:饿了么出品，基于 Vue 的 UI 框架</li>
<li>Bootstrap:Twitter 推出的一个用于前端开发的开源工具包</li>
<li>AmazeUI:又叫“妹子 UI”，一款 HTML5 跨屏前端框架</li>
<li>Layui:轻量级框架(Layer)</li>
</ul>
<p><strong>Ant-Design</strong></p>
<p>ant.design是基于react开发的一个解放ui和前端的工具，它提供了一致的设计方便我们快速开发和减少不必要的设计与代码，很多实用react框架的开发者都已经在使用ant.design了，且其在github上的star数也早已上万，足见其火热程度。</p>
<p>ant.design的目的也在于提高用户、开发者等多方的体验与幸福感。</p>
<p>ant.design设计很精妙，vue的iview就是模仿ant.design来实现的</p>
<ul>
<li><a href="https://ant.design/index-cn" target="_blank">官网地址<a>：<code>https://ant.design/index-cn</code></li>
<li><a href="https://github.com/ant-design/ant-design/" target="_blank">github地址<a>：<code>https://github.com/ant-design/ant-design/</code></li>
</ul>
<p><strong>ElementUI</strong></p>
<p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲 解详细，例子也很丰富。主要用于开发PC端的页面，是一个质量比较高的Vue UI组件库。</p>
<ul>
<li><a class="link"   href="http://element-cn.eleme.io/#/zh-CN"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>http://element-cn.eleme.io/#/zh-CN</code></li>
<li><a href="https://github.com/ElementUI/element-starter" target="_blank">github地址<a>：<code>https://github.com/ElementUI/element-starter</code></li>
<li><a class="link"   href="https://github.com/PanJiaChen/vue-element-admin"  target="_blank">vue-element-admin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/PanJiaChen/vue-element-admin</code></li>
</ul>
<p><strong>MintUi</strong></p>
<p>MintUi是由饿了么前端团队推出的一个基于 Vue.js的移动端组件库，组件比较单一，功能简单易上手！</p>
<ul>
<li><a class="link"   href="https://mint-ui.github.io/#!/zh-cn"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://mint-ui.github.io/#!/zh-cn</code></li>
<li><a class="link"   href="https://github.com/ElemeFE/mint-ui"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/ElemeFE/mint-ui</code></li>
</ul>
<p><strong>iview</strong></p>
<p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p>
<ul>
<li><a class="link"   href="https://www.iviewui.com/"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://www.iviewui.com/</code></li>
<li><a class="link"   href="https://github.com/TalkingData/iview-weapp"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/TalkingData/iview-weapp</code></li>
<li><a class="link"   href="https://github.com/iview/iview-admin"  target="_blank">iview-admin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>: <code>https://github.com/iview/iview-admin</code></li>
</ul>
<p>备注:属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</p>
<p><strong>ICE</strong></p>
<p>飞冰是阿里巴巴团队基于 React&#x2F;Angular&#x2F;Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多 个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建 属于自己的中后台应用。</p>
<ul>
<li><a class="link"   href="https://alibaba.github.io/ice"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://alibaba.github.io/ice</code></li>
<li><a class="link"   href="https://github.com/alibaba/ice"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ：<code>https://github.com/alibaba/ice</code></li>
</ul>
<p>备注:主要组件还是以 React 为主，对 Vue 的支持还不太完善， 目前尚处于观望阶段</p>
<p><strong>VantUI</strong></p>
<p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组 件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p>
<ul>
<li><a class="link"   href="https://youzan.github.io/vant/#/zh-CN/intro"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>： <code>https://youzan.github.io/vant/#/zh-CN/intro</code></li>
<li><a class="link"   href="https://github.com/youzan/vant"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>： <code>https://github.com/youzan/vant</code></li>
</ul>
<p><strong>AtUi</strong></p>
<p>at-ui是一款基于Vue 2.x的前端UI组件库，主要用于快速开发PC网站产品。 它提供了一套npm + webpack + babel 前端开发工作流程，CSS样式独立，即使采用不同的框架实现都能保持统一的 UI风格。</p>
<ul>
<li><a class="link"   href="https://at-ui.github.io/at-ui/#/zh"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://at-ui.github.io/at-ui/#/zh</code></li>
<li><a class="link"   href="https://github.com/at-ui/at-ui"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>： <code>https://github.com/at-ui/at-ui</code></li>
</ul>
<p><strong>CubeUI</strong><br>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活; 扩展性强，可以方便地基于现有组件实现二次开发.</p>
<ul>
<li><a class="link"   href="https://didi.github.io/cube-ui/#/zh-CN "  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://didi.github.io/cube-ui/#/zh-CN</code></li>
<li><a class="link"   href="https://github.com/didi/cube-ui/"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/didi/cube-ui/</code></li>
</ul>
<p><strong>Flutter</strong></p>
<p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。 Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p>
<ul>
<li><a class="link"   href="https://flutter.dev/docs"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://flutter.dev/docs</code></li>
<li><a class="link"   href="https://github.com/flutter/flutter"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/flutter/flutter</code></li>
</ul>
<p>备注:Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</p>
<p><strong>Ionic</strong></p>
<p>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发 框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS&#x2F;Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动 开发者的共同选择。</p>
<ul>
<li><a class="link"   href="https://ionicframework.com/"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://ionicframework.com/</code></li>
<li><a class="link"   href="https://github.com/ionic-team/ionic"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/ionic-team/ionic</code></li>
</ul>
<p><strong>mpvue</strong></p>
<p>mpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程 序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。</p>
<ul>
<li><a class="link"   href="http://mpvue.com/"  target="_blank"> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>http://mpvue.com/</code></li>
<li><a class="link"   href="https://github.com/Meituan-Dianping/mpvue"  target="_blank"> <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/Meituan-Dianping/mpvue</code></li>
</ul>
<p>备注:完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</p>
<p><strong>WeUi</strong></p>
<p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序 量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元 素。</p>
<ul>
<li><a class="link"   href="https://weui.io/"  target="_blank">官网地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://weui.io/</code></li>
<li><a class="link"   href="https://github.com/weui/weui.git"  target="_blank">github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<code>https://github.com/weui/weui.git</code></li>
</ul>
<h3 id="前后端分离的演进"><a href="#前后端分离的演进" class="headerlink" title="前后端分离的演进"></a>前后端分离的演进</h3><p>为了降低开发的复杂度，以后端为出发点，比如:Struts、SpringMVC 等框架的使用，就是后端的 MVC 时代;</p>
<p>以 SpringMVC 流程为例:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/30/Gu24Y9.png"
                     
                ></p>
<ul>
<li>1.发起请求到前端控制器(DispatcherServlet)</li>
<li>2.前端控制器请求HandlerMapping查找 Handler （可以根据xml配置、注解进行查找）</li>
<li>3.处理器映射器HandlerMapping向前端控制器返回Handler，HandlerMapping会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象，多个HandlerInterceptor拦截器对象），通过这种策略模式，很容易添加新的映射策略</li>
<li>4.前端控制器调用处理器适配器去执行Handler</li>
<li>5.处理器适配器HandlerAdapter将会根据适配的结果去执行Handler</li>
<li>6.Handler执行完成给适配器返回ModelAndView</li>
<li>7.处理器适配器向前端控制器返回ModelAndView （ModelAndView是springmvc框架的一个底层对象，包括 Model和view）</li>
<li>8.前端控制器请求视图解析器去进行视图解析 （根据逻辑视图名解析成真正的视图(jsp)），通过这种策略很容易更换其他视图技术，只需要更改视图解析器即可</li>
<li>9.视图解析器向前端控制器返回View</li>
<li>10.前端控制器进行视图渲染 （视图渲染将模型数据(在ModelAndView对象中)填充到request域）</li>
<li>11.前端控制器向用户响应结果</li>
</ul>
<p><em><strong>优点:</strong></em></p>
<p>MVC 是一个非常好的协作模式，能够有效降低代码的耦合度，从架构上能够让开发者明白代码应该写在 哪里。为了让 View 更纯粹，还可以使用 Thymeleaf、Freemarker 等模板引擎，使模板里无法写入 Java 代码，让前后端分工更加清晰。单体应用!</p>
<p><em><strong>缺点:</strong></em></p>
<p>前端开发重度依赖开发环境，开发效率低，这种架构下，前后端协作有两种模式:</p>
<p>1、第一种是前端写 DEMO，写好后，让后端去套模板。好处是 DEMO 可以本地开发，很高效。不足是 还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大;</p>
<p>2、另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发。好处是 UI 相关的 代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开 发效率的重要因素。</p>
<p>前后端职责纠缠不清:模板引擎功能强大，依旧可以通过拿到的上下文变量来实现各种业务逻辑。但这样只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是，页面路由等功能本应该是前端最关注的，但却是由后端来实现。</p>
<blockquote>
<p>ajax 的时代<br>时间回到 2005 年 AJAX (Asynchronous JavaScript And XML，异步 JavaScript 和 XML，老技术新 用法) 被正式提出并开始使用 CDN 作为静态资源存储，于是出现了 JavaScript 王者归来(在这之前 JS 都是用来在网页上贴狗皮膏药广告的)的 SPA(Single Page Application)单页面应用时代。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/30/GufxfJ.png"
                     
                ><br>优点:<br>这种模式下，前后端的分工非常清晰，前后端的关键协作点是 A JAX 接口。看起来是如此美妙，但回过 头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器 端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/31/GuhEkD.png"
                     
                ><br>缺点:</p>
<ul>
<li>前后端接口的约定: 如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很 痛苦;不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的 接口 规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。</li>
<li>前端开发的复杂度控制: SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情</li>
</ul>
<blockquote>
<p>前端为主的 MV* 时代<br>此处的 MV* 模式如下:</p>
</blockquote>
<ul>
<li>MVC(同步通信为主):Model、View、Controller</li>
<li>MVP(异步通信为主):Model、View、Presenter</li>
<li>MVVM(异步通信为主):Model、View、ViewModel</li>
</ul>
<p>为了降低前端开发复杂度，涌现了大量的前端框架，比如: AngularJS 、 React 、Vue.js 、 EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/31/Gu4mUU.png"
                     
                ></p>
<p>优点:</p>
<ul>
<li>前后端职责很清晰: 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测 试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful等接 口。</li>
<li>前端开发的复杂度可控: 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思 的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代 码应该如何组织，所有这一切设计，得花一本书的厚度去说明。<br>-部署相对独立: 可以快速改进产品体验</li>
</ul>
<p>缺点:</p>
<ul>
<li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可 以复用，那么后端的数据校验可以相对简单化。</li>
<li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。 性能并非最佳，特别是移动互联网环境下。</li>
<li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。</li>
</ul>
<blockquote>
<p>NodeJS 带来的全栈时代<br>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴 起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/31/Gu48Dx.png"
                     
                ></p>
</blockquote>
<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职:</p>
<ul>
<li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功 能，HTML 的生成也可以放在这层，具体看应用场景。</li>
<li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱 对展现的强关注，转而可以专心于业务逻辑层的开发。</li>
</ul>
<p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可 以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不 足，通过这种模式几乎都能完美解决掉。</p>
<p>与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋 上升式的回归。</p>
<p>基于 NodeJS 的全栈模式，依旧面临很多挑战:</p>
<ul>
<li>需要前端对服务端编程有更进一步的认识。比如 TCP&#x2F;IP 等网络知识的掌握。</li>
<li>NodeJS 层与 Java 层的高效通信。NodeJS 模式下，都在服务器端，RESTful HTTP 通信未必高效， 通过 SOAP 等方式通信更高效。一切需要在验证中前行。</li>
<li>对部署、运维层面的熟练了解，需要更多知识点和实操经验。</li>
<li>大量历史遗留问题如何过渡。这可能是最大最大的阻力。</li>
</ul>
<h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>什么是MVVM模式呢？</p>
<p>MVVM(Model-View-ViewModel)是一种软件架构设计模式，由微软 WPF(用于替代 WinForm，以 前就是用这个技术开发桌面应用程序的)和 Silverlight(类似于 Java Applet，简单点说就是在浏览器上 运行的 WPF) 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。 由 John Gossman(同样也是 WPF 和 Silverlight 的架构师)于 2005 年在他的博客上发表。</p>
<p>MVVM 源自于经典的 MVC(Model-View-Controller)模式。MVVM 的核心是 ViewModel 层，负责转 换 Model 中的数据对象来让数据变得更容易管理和使用，其作用如下:</p>
<ul>
<li>该层向上与视图层进行双向数据绑定</li>
<li>向下与 Model 层通过接口请求进行数据交互<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/31/Gu4sqP.png"
                     
                ><br>MVVM 已经相当成熟了，当下流行的 MVVM 框架有 Vue.js ， AngularJS 等。</li>
</ul>
<p>为什么要用MVVM模式？</p>
<p>所有的架构本质都是为了解耦!</p>
<p>MVVM 模式和 MVC 模式一样，主要目的是分离视图(View)和模型(Model)，有几大好处:</p>
<ul>
<li>低耦合: 视图(View)可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>
<li>可复用: 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>
<li>独立开发: 开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页 面设计。</li>
<li>可测试: 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>
</ul>
<blockquote>
<p>mvvm的整体结构图：</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/31/Gu4f2j.png"
                     
                ></p>
<p><em><strong>View:</strong></em></p>
<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、 Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置 模板语言。</p>
<p><em><strong>Model:</strong></em></p>
<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里<br>的难点主要在于需要和前端约定统一的 接口规则</p>
<p><em><strong>ViewModel:</strong></em></p>
<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p>
<p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而Model层的数据模型是只包含状态的。</p>
<ul>
<li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态(展示)</li>
<li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为(交 互)</li>
</ul>
<p>视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。</p>
<p>由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这样前端开发者再也不必低效又麻烦地通过操纵DOM去更新视图。</p>
<p>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据然后视图就会自动得到相应更新，真正实现事件驱动编程。</p>
<p>View层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方<br>案实施的重要一环。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>互联网诞生初期是没有前后端这个概念的，几乎所有的工作都是由后台开发人员来完成，后来视图层技术发展越来越好,对页面的渲染支持越来越好，诞生了前端这一专注于视图层技术的开发人员。处于时代浪潮中的我们如果现在还是停留在单一的技术层面，难免市场和视野都变得狭窄，故全栈这一说又被提上了很多开发者的日程，正所谓天下大势 分久必合，合久必分，那么是时候研究学习一波大前端了！好，前端的回顾与概览就先介绍到这里！</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目搭建</title>
    <url>/2021/0423/vue-project-build.html</url>
    <content><![CDATA[<h4 id="1：安装node"><a href="#1：安装node" class="headerlink" title="1：安装node"></a>1：安装node</h4><p>端开发框架和环境都是需要 Node.js ，先安装node.js开发环境，vue的运行是要依赖于node的npm的管理工具来实现，下载<a class="link"   href="https://nodejs.org/en/%EF%BC%8C%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%89%93%E5%BC%80cmd%E5%BC%80%E5%A7%8B%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E3%80%82%EF%BC%88%E6%88%91%E7%94%A8%E7%9A%84%E6%98%AFwin10%E7%B3%BB%E7%BB%9F%EF%BC%8C%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%EF%BC%8C%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E4%BB%A5%E7%AE%A1%E7%90%86%E5%91%98%E8%BA%AB%E4%BB%BD%E8%BF%90%E8%A1%8Ccmd%EF%BC%89%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%BE%88%E5%A4%9A%E6%8A%A5%E9%94%99%E3%80%82" >https://nodejs.org/en/，安装完成之后，打开cmd开始输入命令。（我用的是win10系统，所以需要管理员权限，右键点击以管理员身份运行cmd），不然会出现很多报错。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="2：查看node的版本号"><a href="#2：查看node的版本号" class="headerlink" title="2：查看node的版本号"></a>2：查看node的版本号</h4><p>下载好node之后，以管理员身份打开cmd管理工具，，输入 node -v ，回车，查看node版本号，出现版本号则说明安装成功。</p>
<p>输入命令： node -v</p>
<h4 id="3：安装淘宝npm镜像"><a href="#3：安装淘宝npm镜像" class="headerlink" title="3：安装淘宝npm镜像"></a>3：安装淘宝npm镜像</h4><p>由于npm是国外的，使用起来比较慢，我们这里使用淘宝的cnpm镜像来安装vue.<br>淘宝的cnpm命令管理工具可以代替默认的npm管理工具。<br>输入命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<h4 id="4：安装全局vue-cli脚手架"><a href="#4：安装全局vue-cli脚手架" class="headerlink" title="4：安装全局vue-cli脚手架"></a>4：安装全局vue-cli脚手架</h4><p>淘宝镜像安装成功之后，我们就可以全局vue-cli脚手架，输入命令：cnpm install –global vue-cli 回车；验证是否安装成功，在命令输入vue，出来vue的信息，及说明安装成功；<br>输入命令：<code>cnpm install --global vue-cli</code></p>
<h4 id="5：建一个新项目"><a href="#5：建一个新项目" class="headerlink" title="5：建一个新项目"></a>5：建一个新项目</h4><p>搭建完手脚架之后，我们要开始建一个新项目，这个时候我建议，尽量不要装在C盘，因为vue下载下来的文件比较大，如果要改盘的话，直接输入D：回车就可以直接改盘<br>输入命令：<code>vue init webpack my-project-first</code><br>回车，my-project-first是我自己的文件夹的名字，是基于webpack的项目，输入之后就一直回车，直到出现是否要安装vue-route，<br>这个我们在项目要用到，所以就输入y 回车</p>
<h4 id="6：注意"><a href="#6：注意" class="headerlink" title="6：注意"></a>6：注意</h4><p>下面会出现是否需要js语法检测，这个我们暂时用不到，就可以直接输入no，后面的都可以直接输入no，都是我们暂时用不到的<br>打开D盘查看一下，会发现多了一个刚刚创建的文件夹</p>
<h4 id="7：进入项目文件夹"><a href="#7：进入项目文件夹" class="headerlink" title="7：进入项目文件夹"></a>7：进入项目文件夹</h4><p>文件夹已经下载好了，现在就可以进入文件夹，输入： <code>cd my-project-first</code> 回车进入新建的项目。</p>
<h4 id="8：在项目里安装依赖"><a href="#8：在项目里安装依赖" class="headerlink" title="8：在项目里安装依赖"></a>8：在项目里安装依赖</h4><p>因为各个模板之间都是相互依赖的，所以现在我们要安装依赖，在项目里输入以下命令。<br>输入命令： <code>cnpm install</code></p>
<h4 id="9：运行"><a href="#9：运行" class="headerlink" title="9：运行"></a>9：运行</h4><p>一切环境依赖安装准备就绪，我们来测试一下自己新建的vue项目的运行情况，输入命令：cnpm run dev直接回车。会弹出一个浏览器访问地址默认为localhost:8080。（我将地址修改为8081进行访问）<br>输入命令：<code>cnpm run dev</code></p>
<h4 id="10：在浏览器输入localhost-8081"><a href="#10：在浏览器输入localhost-8081" class="headerlink" title="10：在浏览器输入localhost:8081"></a>10：在浏览器输入localhost:8081</h4><p>8080是默认的端口，要访问的话，直接在浏览器输入localhost:8080就可以打开默认的模板了；（我的电脑上8080端口有需要，被另外一个项目占用，故而使用8081的端口）<br>在浏览器输入localhost:8081，显示如下，到此为止，vue开发环境搭建完毕。<br>但是在最后一步的时候，有些人会遇到这样的报错：</p>
<p>不要着急，我也遇到过这样的情况，总结了一个非常完美的解决方案。<br>解决方案：</p>
<h5 id="1：在项目里执行这样的命令"><a href="#1：在项目里执行这样的命令" class="headerlink" title="1：在项目里执行这样的命令"></a>1：在项目里执行这样的命令</h5><p><code>npm i prettier@~1.12.0</code></p>
<h5 id="2：重新开启运行即可成功："><a href="#2：重新开启运行即可成功：" class="headerlink" title="2：重新开启运行即可成功："></a>2：重新开启运行即可成功：</h5><p><code>npm run dev</code></p>
<blockquote>
<p>小结：最后如何修改默认的端口？<br>既然提到自己修改了默认的端口，那就说明一下:<br>根目录下有一个config文件夹，看名字就知道与配置有关，打开config目录下的index.js，这里不仅可以改变端口，还可以根据需要改变其他配置信息。</p>
</blockquote>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>es6语法示例(待填坑)</title>
    <url>/2021/0423/es6-grammar-sample.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>vue 组件间传值(待填坑)</title>
    <url>/2021/0423/vue-compent-transfer-value.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>vue store状态管理(待填坑)</title>
    <url>/2021/0423/vue-store-statue-manage.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>架构师进阶</title>
    <url>/2021/0423/jia-gou-shi.html</url>
    <content><![CDATA[<blockquote>
<p>如果你已经工作了，可以根据公司的业务需求有针对性的去学习，下面的列表仅仅起一个参考的作用，当你想学的时候，知道有哪些东西需要学习</p>
</blockquote>
<h3 id="java-基础"><a href="#java-基础" class="headerlink" title="java 基础"></a>java 基础</h3><blockquote>
<p>第一层主要包括如下部分（已经列好顺序）：</p>
</blockquote>
<ol>
<li>Java 基础语法</li>
<li>Java 面向对象</li>
<li>Java 常用类详解</li>
<li>Java 异常机制</li>
<li>Java 集合与数据结构</li>
<li>Java IO</li>
<li>Java 多线程</li>
<li>Java 网络编程</li>
<li>Java 注解+反射</li>
<li>23 种设计模式</li>
<li>正则表达式</li>
<li>XML 解析&#x2F; JSON 解析</li>
<li>Java 10、11、12 新特性</li>
<li>AIO、BIO、NIO</li>
</ol>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote>
<p>第二层主要是修炼数据库，从基本用法到查询优化、读写分离等等都需要掌握，这里以 MySQL 数据库为例：</p>
</blockquote>
<ol>
<li>数据库的基本概念</li>
<li>数据库和表的基本操作</li>
<li>索引与数据完整性约束</li>
<li>数据库中的各种复杂查询操作</li>
<li>MySQL 中常见函数的使用</li>
<li>存储过程、触发器以及事件等</li>
<li>数据库的备份与恢复</li>
<li>数据库用户管理与数据库安全性</li>
<li>事务和多用户</li>
<li>读写分离环境搭建+实践</li>
<li>JDBC</li>
<li>常见数据库连接池的配置+使用</li>
</ol>
<h3 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h3><blockquote>
<p>第三层主要是修炼 Web 基础，主要包括前端的基础知识，先不用深入学习前端，后端的 Jsp&#x2F;Servlet，有人会说现在公司都不用 Jsp&#x2F;Servlet 了，还学这些干嘛？但是万变不离其宗，哪个顶尖高手不是从扎马步开始的？这些掌握好了，框架的原理才好理解。</p>
</blockquote>
<ol>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
<li>jQuery</li>
<li>Tomcat</li>
<li>Servlet（基本用法，Session、Cookie 等）</li>
<li>Jsp（原理、九大内置对象等）</li>
<li>EL 和 JSTL</li>
<li>过滤器&#x2F;监听器等</li>
<li>Ajax</li>
<li>EasyUI</li>
<li>ECharts</li>
<li>BootStrap</li>
<li>Git&#x2F;Svn</li>
<li>WebSocket<br>前三层练好后，做个大学的毕设应该是够用了。</li>
</ol>
<h3 id="框架-工具"><a href="#框架-工具" class="headerlink" title="框架&amp;工具"></a>框架&amp;工具</h3><blockquote>
<p>第四层主要是修炼各种框架以及工具：</p>
</blockquote>
<ol>
<li>Spring</li>
<li>SpringMVC</li>
<li>MyBatis</li>
<li>Maven&#x2F;Gradle</li>
<li>Freemarker&#x2F;Thymeleaf</li>
<li>Linux</li>
<li>ActiveMQ&#x2F;RabbitMQ&#x2F;Kafka</li>
<li>Netty</li>
<li>Zookeeper</li>
<li>Dubbo</li>
<li>Redis</li>
<li>RBAC</li>
<li>Shiro</li>
<li>Elasticsearch</li>
<li>Nginx</li>
<li>SSO</li>
<li>Activiti</li>
<li>Quartz</li>
<li>Spring Batch</li>
<li>MongoDB</li>
<li>Spring Cache</li>
<li>Jpa<br>这一层修炼完，你已经基本上达到了阳顶天的水平了，阳顶天是明教教主，那你出去找个项目经理的位置坐坐估计差不多吧。</li>
</ol>
<h3 id="微服务相关"><a href="#微服务相关" class="headerlink" title="微服务相关"></a>微服务相关</h3><blockquote>
<p>最后还不得不说 Java 目前最火的微服务，这也是一项必备技能：</p>
</blockquote>
<ol>
<li>Spring Boot 基本原理</li>
<li>Spring Boot 基础配置</li>
<li>Spring Boot 整理视图层技术</li>
<li>Spring Boot 整合 Web 开发</li>
<li>Spring Boot 整合持久层技术</li>
<li>Spring Boot 整合 NoSQL</li>
<li>Spring Boot 构建 RESTful 服务</li>
<li>Spring Boot 整合各种缓存</li>
<li>Spring Boot 安全管理</li>
<li>Spring Boot 整合 WebSocket</li>
<li>Spring Boot 整合消息服务</li>
<li>Spring Boot 整合 Swagger、邮件等</li>
<li>Spring Boot 应用监控</li>
<li>Spring Cloud Eureka、Consul</li>
<li>微服务注册与消费</li>
<li>Spring Cloud OpenFeign</li>
<li>服务容错保护 Resilience4j</li>
<li>Spring Cloud Zuul&#x2F;Gateway</li>
<li>Spring Cloud Config</li>
<li>Spring Cloud Bus</li>
<li>Spring Cloud Stream</li>
<li>Spring Cloud Sleuth&#x2F;Zipkin</li>
<li>Spring Cloud Admin</li>
<li>Spring Cloud Alibaba<br>第五层修炼成功后，让老板加波薪水应该是可以的吧！</li>
</ol>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><blockquote>
<p>第六层主要是修炼前端，前端这几年发展的非常快，早已经不是画页面了,JavaScript 被玩的越来越溜了，所以前端不可小觑：</p>
</blockquote>
<ol>
<li>HTML5 新特性</li>
<li>CSS3</li>
<li>ES6</li>
<li>JS 模块化</li>
<li>less</li>
<li>NodeJS</li>
<li>Webpack</li>
<li>Grunt</li>
<li>Gulp</li>
<li>Zepto</li>
<li>mpvue</li>
<li>AngularJS&#x2F;Vue&#x2F;React（非专业前端建议修炼其中一个即可）</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
        <category>self</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>my616</title>
    <url>/2021/0423/my-616.html</url>
    <content><![CDATA[<blockquote>
<p>当时日远去，总有些记忆依旧闪烁！<br>—— ——my616, 愿大家都能各得其所，得偿所愿！</p>
</blockquote>
<embed src="https://www.56.com/u47/v_MTMwNjc1ODEy.html?from=groupmessage&refer2=direct" width="800" height="600"/>

<p>视频链接：<a class="link"   href="https://www.56.com/u47/v_MTMwNjc1ODEy.html?from=groupmessage&refer2=direct" >my616 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>other</category>
        <category>self</category>
      </categories>
      <tags>
        <tag>616</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈最近的感想</title>
    <url>/2021/0423/recent-think.html</url>
    <content><![CDATA[<blockquote>
<p>欲买桂花同载酒, 终不似, 少年游</p>
</blockquote>
<h4 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于<span style="color:red">工作</span></h4><p>前面博客中也提到了，最近在改一些bug;接了一口锅，目前公司的治理管理平台，基本就我一个人在搞了，之前的人离职了…近40个bug 改的还剩4个了，有个功能没按需求要求做，这也提bug我真是日了狗了，测试都测过的东西！你现在才说做的不对，这特么要重新做知道吗？！哎，心累。</p>
<p>新入职的一哥们儿，来干了快一个月辞职了，下班路上他吐槽坑有点多填不动了，谁说不是呢？</p>
<p>这个星期，剩下的4个bug还都是牵扯到其他系统的！其他系统的人又没有人，所以就停了下来，暂时我也被抽去做别的项目的开发！倒也乐的去做点新功能，疫情期间形势不好，还是要认真做好本职工作，然后多学点东西！且行且珍惜，且苟且努力吧！</p>
<h4 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于<span style="color:red">学习</span></h4><p>老实说，最近搬了家！东西实在太多了，花了近一千大洋找搬家公司搬到市内了，房租也是涨了不少！然后就是收拾东西了，我和老婆两个人收拾了一个星期，当然都是每天晚上回来收拾。就这样折腾来折腾去，基本房子已经焕然一新了，期间还和媳妇儿因为物品的摆放争执过，事后证明我对空间感的把握还是不错滴！</p>
<p>网还没好，我不得不每天在公司中午休息时间和下班后的时间，学点东西或者写点东西什么的，工作一天没点输出总感觉这一天白过了！当然工作时偶尔也可以摸下鱼，但是总是会被叫去干其他的，写什么东西的话也不得劲!</p>
<p>五一尽快把网搞好吧，把落下的网课补起来!</p>
<h4 id="关于接私活儿"><a href="#关于接私活儿" class="headerlink" title="关于接私活儿"></a>关于<span style="color:red">接私活儿</span></h4><p>有时候在想，自己还能干多少年呢？</p>
<p>CSDN上很多关于程序猿35岁的文章阅读量都还不错，说明大家都有这方面的焦虑。是啊，焦虑总是有的。最近一哥们儿找我，说手上有些私活儿的单.一个6000的单是做微信小程序分销商城的，另一个2000的单是Quartz做定时调度做数据处理的，同时还要改其他的bug，这种可能是同行扔过来的单明显是坑！</p>
<p>你要知道一套完善的分销商城代码可以卖6万的，还有这个2000的这个单明显是运维的活儿！然后和我那哥们儿聊了一会儿，然后找理由推了！对于微信小程序，之前还专门花了一段时间学习的，只是没有去实践。这个看来可以是私活的一个方向，那么就学起来吧；很多东西真的是“因为你没用，所以你不会”！其实，之前搞过一段时间私活儿，被坑了所以对这个有点戒备心了！哈哈，暂时的目标就是玩转SpringBoot这套东西，然后再做点开源的东西出来！然后学学主流的中间件，学学linux!至于接私活，暂时就先放一放吧，很长一段时间主要还是多修炼修炼内功！</p>
<h4 id="关于读书"><a href="#关于读书" class="headerlink" title="关于读书"></a>关于<span style="color:red">读书</span></h4><p>搬家时发现买了很多书真的还没好好看过（很多都是买回来翻翻，有需要查询或者写相关的东西的时候才去翻翻），编程方面的书就买了10来本，《大话数据结构》，《大话设计模式》，《重新定义SpringCloud实战》，《hadoop大数据挖掘》，《深入浅出SpringBoot》，《springCloud 与Docker 微服务架构实战》，《springBoot+vue 全栈开发实战》，《Java开发手册》，《深入理解java虚拟机》,《重构改善既有代码的设计》，《linux就该这么学》等等，这10来本书就躺在手边的书架上，还有其他的书被收到箱子里了，其实这些书里有些我买的是二手的，新书是真的贵啊！这样列举出来，其实也是我想推荐的书单！</p>
<p>真的要去多看书了，看现阶段和自己学的相关的书，这样最有效率，用中学，然后有时间再学中用；然后就是输出倒逼输入了，坚持写博客吧；不管有没有人看，就当作是自己的积累，不积硅步无以至千里，不积小流无以成江海！</p>
<h4 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于<span style="color:red">生活</span></h4><p>学习，绝不仅仅是为了工作的需求，充实自己的同时其实也是让自己变得更加自信的一个过程；人自信了，真的各种正能量就会汇聚过来，好事就会发生，我们习惯把这种东西称为好运！</p>
<p>平衡好工作生活，很重要；年岁越大，你会发现这是一个慢慢剔除的过程，回归家庭找到工作之外家庭中的定位，人慢慢变得简单也许这就是幸福的模样吧；愿你们也能在生活中找到自己的归属，承担起自己该承担的责任，压力是有的但你扛过去了你就强大了。</p>
<p>最后老话重提，好好吃饭，好好照顾好自己的身体，真的很重要！生活是一场长跑，路上的风景很重要，带自己去看风景的身体很重要，愿你有有趣的灵魂和一个强健的体魄！</p>
<p>加油，奥利给！</p>
]]></content>
      <categories>
        <category>other</category>
        <category>self</category>
      </categories>
      <tags>
        <tag>聊聊</tag>
      </tags>
  </entry>
  <entry>
    <title>mac pro初体验</title>
    <url>/2021/0423/mac-pro-experience.html</url>
    <content><![CDATA[<blockquote>
<p>年前一直想买台mb的，想着过年再说，不巧过年因疫情没回去成！媳妇儿是医院的，她们医院的所有假期都取消然后回去上班了！因为过年快递又停业了，所以就想着年后再买，就这样时间来到了二月中旬在家办公的我，实在忍受不了我的旧电脑的运行速度，去苹果官网上订购了一台macpro.</p>
</blockquote>
<h4 id="下决心买"><a href="#下决心买" class="headerlink" title="下决心买"></a>下决心买</h4><p>年前和媳妇儿讨论说，我的就thinkpad都用7年了，要不我买台新的电脑吧！</p>
<p>媳妇听后说要多少钱，我伸出三根手指，她说三千？我摇摇头，“天啦，三万，你是真的需要吗？这个电脑不是还可以用吗？我用的也不多，顶多做下ppt.我看你也没用多少啊，最多的时候写写博客，好像也没干啥吧！“</p>
<p>”怎么没干什么，我打开idea说，你看这个卡的样子我都不愿开，你也知道我去年买了个固态换上，重装了玩indow7系统，你看家里一个电脑实在有点不够用，这段时间我在家上班，远程办公真的很卡，你晚上回来时不时的还要用它做ppt，我就又干不了活儿了！我们真的需要买一个，最近我考虑了很久，还是决定买个mac,我看了很多教程和评价。再说这点钱，你想想我要用这东西至少7&#x2F;8年吧，一年也就几千块钱。你看我这thinkpad我不也用了7年多了吗，现在不是也还在用！“</p>
<p>tips:一直认为window7最好用，之前用的window10老是提醒更新，不更新不行！一气之下备份了重要文件，重装并且换了个固态，就这好了不少了，开机还是有点慢但是好在打开个什么东西没那么卡了！开会声会影，ps什么的就算了,电脑风扇分分钟发狂！</p>
<p>“非要3万多吗？为什么这么贵？”</p>
<p>“64g的内存啊，并且它是苹果啊！我这thinkpad和它比起来就是老爷车比兰博基尼，这样说你知道了吧！？”</p>
<p>“内存是啥，你现在这个不也可以用吗？”</p>
<p>“内存就是程序指令等运行的地方，就比方你手机上有个运行时内存，这个大手机才能运行的快”</p>
<p>“那你用的了这么大的吗？你这个电脑不也才12g内存，我还是觉得好贵！买个两万多的不行吗？！“</p>
<p>”我想着一步到位来着，怕以后不够用了还要加配置麻烦“</p>
<p>“不行，太贵了！我不同意，最多买两万的”</p>
<p>我故作惋惜，“好吧，我看看两万多的；你看这款两万5的可以吗？教育优惠买的话便宜近1800，我问同学借个教师资格证买个吧！”</p>
<p>“还是好贵啊，不行！除非以后洗衣做饭拖地都你做才行！”</p>
<p>“…我现在不是么，好好好，我答应还不行吗”</p>
<p>。。。就这样软磨硬泡终于下单来，媳妇刷了码(我和媳妇儿的逗比日常over)</p>
<p>然后就是漫长的等待审核，然后审核通过显示要等待15天才能发货，我了个xx…早知道就早点买了！</p>
<h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><p>买了本子回来，媳妇儿打趣说家里多个来情敌，天天回来抱着它！笑try~…</p>
<p>嗯，虽然这么多年用的是thinkpad,window系统操作习惯是真的有点不习惯，以至于我让她尝试用下mac，她表示用不惯，不想用！打字真心没有thinkpad那种高键位有手感！所以买回来一直是我独善其身了，哈哈！</p>
<p>废话不多说，先聊聊是否真的有必要拥有一台mac:</p>
<ul>
<li>如果你喜欢苹果，买它！毕竟喜欢才是第一位的，千金难买我喜欢嘛！</li>
<li>如果你经济允许，你熟悉ubantu操作系统或者愿意付出一定的学习成本的话，买它！</li>
<li>如果你的工作和设备配置息息相关，电脑的响应速度已经严重影响了的工作和学习，那还是买一个吧；</li>
<li>如果你不想那些讨厌的广告打扰到你，处于安全的考虑或者你想使用更加专业的设计软件，那么一定要买一个！</li>
</ul>
<p>好，个人觉得如果以上你都不满足，真心没必要换！因为这东西还真的是蛮贵的，并且mac的生态（免费的软件）并没有window系统的那么多，你要有这样的心理预期！<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/03/22/8IVjyR.png"
                     
                ><br>以上是我mac配置的基本信息，至于为啥没买16g的，是真的觉得16g越来越满足不了需求了！至于硬盘选择了1T的，2T觉得完全没必要，你可以外接个高速固态硬盘。你要知道加1T加了3000多软妹币啊！当然人家的固态盘是真的很好，比如我搜索个文件a,含a的文件有可能几万个，它能秒级响应！</p>
<p>买了它，也是第一次知道idea居然可以秒开的，除了从程序坞那里抖几下，然后进度跳居然不停的就过去了，然后编译运行个普通项目！公司电脑：13S,我的mac:2.1秒左右！特意看了下，当然idea有个坑，host需要你自己配置下！不然你起项目，会发现编译运行怎么会比你的老本子还慢！没改之前，我的mac16s，一度让我怀疑哪里出了问题！</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//控制台没报错，但你有个提示：获取本机地址，走到了DNS解析，DNS递归解析不到本机域名，耗时5s左右</span></span><br><span class="line"><span class="comment">// 解决办法如下，个人建议按1方法，因为2方法，相当于写死了配置</span></span><br><span class="line"><span class="comment">//1. 就是把本机的hostname 添加到 hosts 中，例如:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 127.0.0.1 localhost</span></span><br><span class="line"><span class="comment">// 127.0.0.1 loulldeMacBook-Pro.local</span></span><br><span class="line"><span class="comment">// 255.255.255.255 broadcasthost</span></span><br><span class="line"><span class="comment">// ::1 localhost</span></span><br><span class="line"><span class="comment">// ::1 loulldeMacBook-Pro.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 执行scutil --set HostName &quot;localhost&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>然后就是开10几20多个窗口，切换很顺畅，再也没有卡顿感！不过有天电脑莫名风扇抽风，时不时的疯转。我去检查监视器，发现把所有软件都关了还是响！然后查各种资料找原因差点就打官网电话询问了，后来网上睡觉前更新系统（一直提醒我更新来着没更新，当然你不更新它不会一直提醒你，只是系统那个软件位置会有个提示需更新，我这强迫症必须要点开更新），然后风扇就恢复正常了！估计是系统有什么运行的问题，更新时一并被修复了！</p>
<p>然后我每次使用它都不用关机，按任意一个健等屏幕亮后指纹解锁即可！开机后，之前常用的软件依旧打着很方便！<br>最重要的是它渲染视频真的很快，2&#x2F;3分钟一个半个小时的视频就渲染完成了！实在不得不说，香，是真香！</p>
<h4 id="关于软件"><a href="#关于软件" class="headerlink" title="关于软件"></a>关于软件</h4><blockquote>
<p>做开发常用的：</p>
</blockquote>
<ul>
<li>idea</li>
<li>vscode,</li>
<li>googlechrome,</li>
<li>navicat</li>
<li>postman<blockquote>
<p>推荐几个其他的,关键是免费</p>
</blockquote>
</li>
<li>有道云笔记（之前一直用的印象笔记，后来老本子系统重装了再装就一直报错，查资料说是本地注册表没清理干净，然后费了老大劲儿还是不行。加之这个笔记软件同步是真的慢，就换了有道）</li>
<li>Typora,这个没啥可说的基本都会用</li>
<li>eZip 压缩解压软件</li>
<li>Tinypic 图片压缩软件，你也可以选择在线压缩：<a class="link"   href="https://www.yasuotu.com/"  target="_blank">压缩图 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Ominiplyer 必须推荐，基本各种格式的视频都能播放</li>
<li>ReadCHM 一款专门查看chm文件的软件 比如打开jdk手册就用它</li>
<li>截图 顾名思义，一款为截图而生的软件</li>
<li>GitKraken git客户端软件</li>
<li>Skim 一款免费的pdf阅读器软件</li>
<li>网易云音乐</li>
<li>Proxyee down 高速下载器</li>
<li>FinalShell 免费的ssh和ftp客户端集成者  必须推荐</li>
<li>VMware 虚拟机客户端</li>
<li>wps 作为国产软件，必须拥有姓名</li>
</ul>
<p>好了，基本如此。其他的视频处理软件，mac自带的iMovie剪辑已经够用了</p>
]]></content>
      <categories>
        <category>other</category>
        <category>self</category>
      </categories>
      <tags>
        <tag>mbp</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 语法</title>
    <url>/2021/0423/md-grammar.html</url>
    <content><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><p>：   <code># 这是一级标题</code><br>    <code>## 这是二级标题</code><br>   <code>### 这是三级标题</code><br>  <code>#### 这是四级标题</code><br> <code>##### 这是五级标题</code><br><code>###### 这是六级标题</code></p>
<h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h1><p>  <code>**加粗**</code><br>  <code>*倾斜*</code><br>  <code>***倾斜加粗***</code><br>  <code>~~删除线~~</code><br>效果如下：<br>  <strong>加粗</strong><br>  <em>倾斜</em><br>  <em><strong>倾斜加粗</strong></em><br>  <del>删除线</del></p>
<h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h1><p>  <code>&gt;这是引用的内容</code><br>  <code>&gt;&gt;这是引用的内容</code><br>  <code>&gt;&gt;&gt;&gt;&gt;这是引用的内容</code><br>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h1><h2 id="三个或者三个以上的-或者-都可以-效果如下："><a href="#三个或者三个以上的-或者-都可以-效果如下：" class="headerlink" title="  三个或者三个以上的 - 或者 * 都可以  ---  ----  ***  ***** 效果如下："></a>  三个或者三个以上的 - 或者 * 都可以<br>  <code>---</code><br>  <code>----</code><br>  <code>***</code><br>  <code>*****</code><br> 效果如下：</h2><hr>
<hr>
<hr>
<h1 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h1><p>  ![图片alt](图片地址 ‘’图片title’’)<br>  图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>  图片title是图片的标题，当鼠标移到图片上时显示的内容，title可加可不加<br>  <code>![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</code><br>  效果如下：<br>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg"
                      alt="blockchain" title="区块链"
                ></p>
<h1 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h1><p>  <a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接名</a><br>  title可加可不加<br>  <code>[简书](http://jianshu.com)</code><br>  <code>[百度](http://baidu.com)</code><br>  效果如下：<br>  <a class="link"   href="http://jianshu.com/" >简书 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>  <a class="link"   href="http://baidu.com/" >百度 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>  <strong>注意：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替</strong><br>  <code>&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</code><br>  效果如下：<br>  <a class="link"   href="https://www.jianshu.com"  target="_blank">简书 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h1><p>  无序列表用 - + * 任何一种都可以，注意：- + * 跟内容之间都要有一个空格<br>  <code>- AAA</code><br>  <code>+ BBB</code><br>  <code>* CCC</code></p>
<p>  效果如下：</p>
<ul>
<li>AAA</li>
</ul>
<ul>
<li>BBB</li>
</ul>
<ul>
<li>CCC</li>
</ul>
<p>  有序列表用 数字加点<br>  <code>1. 列表内容</code><br>  <code>2. 列表内容</code><br>  <code>3. 列表内容</code></p>
<p>  效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h1 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h1><p>注意：表格与正文需空两行…表格才能展示（hexo markdown失效问题），详见<a class="link"   href="https://www.jianshu.com/p/e19eff4311f4" >https://www.jianshu.com/p/e19eff4311f4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><code>name | 价格 |  数量</code><br><code>-|-|-</code><br><code>香蕉 | $1 | 5 |</code><br><code>苹果 | $1 | 6 |</code><br><code>草莓 | $1 | 7 |</code><br>效果如下：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>价格</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>香蕉</td>
<td>$1</td>
<td>5</td>
</tr>
<tr>
<td>苹果</td>
<td>$1</td>
<td>6</td>
</tr>
<tr>
<td>草莓</td>
<td>$1</td>
<td>7</td>
</tr>
</tbody></table>
<h1 id="9-代码"><a href="#9-代码" class="headerlink" title="9.代码"></a>9.代码</h1><p>单行代码：代码之间分别用一个反引号包起来 (反引号输出：shift +左上方~键)<br>`String autor &#x3D; “Echo”`</p>
<p>效果如下：</p>
<p><code>String autor = &quot;Echo&quot;</code></p>
<p>多行代码：前后&#96;&#96;&#96;</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(a==b)&#123;</span><br><span class="line">  String author1 = &quot;Echo&quot;;</span><br><span class="line">  String author2 = &quot;Echo&quot;;</span><br><span class="line">  String author3 = &quot;Echo&quot;;</span><br><span class="line">  String author4 = &quot;Echo&quot;;</span><br><span class="line">  String author5 = &quot;Echo&quot;;</span><br><span class="line">  String author6 = &quot;Echo&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10. 流程图"></a>10. 流程图</h1><p>1.mermaid 形式<br>  本博客使用的是3-hexo主题  需在对应的配置文件_config.yml中开启mermaid支撑<br>  <code>&lt;pre class=&quot;mermaid&quot;&gt;graph LR</code><br>    <code>A[Bob&lt;br&gt;输入明文P] --&gt;|P|B[&quot;Bob的私钥PRbob&lt;br&gt;加密算法(如RSA)&lt;br&gt;C=E(PRbob,P)&quot;];</code><br>    <code>B --&gt;|传输数字签名C|C[&quot;Alice的公钥环&#123;PUbob,……&#125;&lt;br&gt;解密算法(如RSA)&lt;br&gt;P=D(PUbob,C)&quot;];</code><br>    <code>C --&gt;|P|D[&quot;Alice&lt;br&gt;输出明文P&quot;];</code><br>  <code>&lt;/pre&gt;</code></p>
<p>效果如下：</p>
<pre class="mermaid">graph LR
  A[Bob<br>输入明文P] -->|P|B["Bob的私钥PRbob<br>加密算法(如RSA)<br>C=E(PRbob,P)"];
  B -->|传输数字签名C|C["Alice的公钥环{PUbob,……}<br>解密算法(如RSA)<br>P=D(PUbob,C)"];
  C -->|P|D["Alice<br>输出明文P"];
</pre>

<p>2.flowchart 形式<br>需要npm install –save hexo-filter-flowchart<br>在hexo的_config.yml文件（根目录的并非主题的）中，添加以下内容<br>flowchart:<br>  #raphael:   # optional, the source url of raphael.js<br>  #flowchart: # optional, the source url of flowchart.js<br>  options: # options used for <code>drawSVG</code><br>```flow<br>st&#x3D;&gt;start: 用户登陆<br>op&#x3D;&gt;operation: 登陆操作<br>cond&#x3D;&gt;condition: 登陆成功 Yes or No?<br>e&#x3D;&gt;end: 进入后台</p>
<p>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br>```</p>
<p>效果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
      <tags>
        <tag>md语法</tag>
      </tags>
  </entry>
  <entry>
    <title>三阶魔方还原公式</title>
    <url>/2021/0506/3-rubik-s-cube.html</url>
    <content><![CDATA[<blockquote>
<p>公司午休时间，大家都是点个外卖然后刷刷短视频玩儿，感觉时间就这样流逝啥都没学会，家里之前买了个魔方一直没学会，就找个视频学学，没想到学了一个星期记下公式就学会了；现把公式和还原步骤总结如下：</p>
</blockquote>
<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>开始之前我们需要魔方的一些手法及色块还有分布</p>
<blockquote>
<p>分布</p>
</blockquote>
<p>最上面的一层我们称为顶层，最下面的一层我们称为底层，其他四个面我们称为侧面；6色三阶魔方如果没被打散重装的话;</p>
<blockquote>
<p>对色</p>
</blockquote>
<p>两个相对面的颜色，我们称为对色；正常的三阶色块魔方，对色是黄色对白色，绿色对蓝色，红色对橙色；</p>
<blockquote>
<p>异色</p>
</blockquote>
<p>两个面凹字的颜色，和相应面的颜色互补</p>
<blockquote>
<p>手法</p>
</blockquote>
<p>上：将面对自己的这一面的最右侧一列顺时针旋转90度；<br>勾：将顶层一面顺时针旋转90度<br>下：将面对自己的这一面的最右侧一列逆时针旋转90度；<br>回：将顶层一面逆时针旋转90度<br>抵：将面对自己的这一面的最左侧一列逆时针旋转90度；<br>顶：将面对自己的这一面的最左侧一列顺时针旋转90度；<br>中：将面对自己的这一面的中间一列顺时针旋转90度；</p>
<h3 id="公式及步骤"><a href="#公式及步骤" class="headerlink" title="公式及步骤"></a>公式及步骤</h3><ul>
<li>黄白小花</li>
<li>白色十字</li>
<li>运用公式“上勾下回”还原白色底面</li>
<li>运用口诀”奥特曼打小怪兽”还原第二层</li>
<li>运用公式：”顺顺顺逆逆逆”构建顶层黄色十字</li>
<li>运用公式：”抵勾顶勾抵勾勾顶” 复原顶层黄色面</li>
<li>找到一侧面为凹字，黄色面对向自己<br>凹字在右侧公式：上上-底勾勾下，回上-底勾勾下，勾下<br>若任何一面都没有凹字，则也可以重复上面的公式构建侧面凹字（侧面三面凹字，侧面4面凹字）<blockquote>
<p>三面凹字</p>
</blockquote>
</li>
</ul>
<p>让完全还原的面背对自己，黄色面在上，白色面在底；</p>
<p>找到凹面的那个凹点是对色的面,凹点的颜色和侧面的颜色形成对色；</p>
<p>左侧是对色面运用公式：顶勾顶回，顶回顶勾，抵勾-抵90度或180度</p>
<p>右侧是对色面运用公式：上回上勾，上勾上回，下回-下90度或180度</p>
<blockquote>
<p>四面凹字</p>
</blockquote>
<p>临面异色运用公式：中回，中中回中中回，中回回，中中勾</p>
<p>对面异色运用公式：中中回，中中回回，中中回，中中</p>
<blockquote>
<p>四个侧面都不是凹字</p>
</blockquote>
<p>运用公式：”抵勾顶勾抵勾勾顶”即可还原</p>
]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
      <tags>
        <tag>魔方</tag>
      </tags>
  </entry>
  <entry>
    <title>图床的使用</title>
    <url>/2021/0423/picture-bad.html</url>
    <content><![CDATA[<blockquote>
<p>博客搭建好了，写博客就是图形加文字的解释，使人一目了然，那么这么多图片都放在本地吗？<br>你看网上那么多图片，前端加载时就是一个url地址，那也很快是不，静态资源少还好，比如一些简单的用户头像，菜单，按钮图标啥的放在本地就放在本地占不了太多的资源，但是博客那么多图片。。。都放在本地，不好管理不说，路径怎么写，以后md文件换了位置，你路径要不要换？再说放到本地你怎么管理呢？<br>所以最好有那种可以存放图片的地方—图床就是这样一个地方，可以生成url地址，我们只需要在特定的地方引入就好了。</p>
</blockquote>
<h4 id="1-图床靠谱不，如果图片被墙了，怎么办？"><a href="#1-图床靠谱不，如果图片被墙了，怎么办？" class="headerlink" title="1.图床靠谱不，如果图片被墙了，怎么办？"></a>1.图床靠谱不，如果图片被墙了，怎么办？</h4><p>   所以本地你需要备份一下，按你的菜单目录存一份。这样目录和对应的文章对应，一目了然。</p>
<h4 id="2-那图片命名有什么要求吗？"><a href="#2-那图片命名有什么要求吗？" class="headerlink" title="2.那图片命名有什么要求吗？"></a>2.那图片命名有什么要求吗？</h4><p>   当然，最好不要中文命名，英文加数字组合，例如本篇博客示例图片“tuchuang_091216_1,tuchuang_091216_2…” 因为生成的url地址可能包含你的文件名，那么编译器解码时可能转换异常，另外很多博客说中文名的url地址，markdown语法不支持。下面我会尝试验证一下！</p>
<p>– 本次我使用的时imgchr，为啥用他，因为百度出来他排第一还免费。。。主要是免费（留下来没有钱的眼泪！）</p>
<p>注册完咱就开干吧，先看下博客结构和本地文件结构—&gt;&gt;<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2019/12/16/Q5gIjP.jpg"
                      alt="本地文件结构"
                ></p>
<p>本地图片文件结构—&gt;&gt;<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2019/12/16/Q5gqAg.jpg"
                      alt="本地图片文件结构"
                ></p>
<p>对应的imgchr上咱也按对应的博客结构建立相册—&gt;&gt;<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2019/12/16/Q5gHHS.jpg"
                      alt="图床上图片相册"
                ></p>
<p>– 因为每篇博客，都会显示创建时间和月份，而生成的地址中都是带有时间的地址，所以这样即使被墙，后面补也可以快速定位到具体位置！</p>
<p>接下来测试下，中文命名“图床20191216_4”后的图片：哈哈 ，生成的没有地址中没有中文，但是哈尽量不要用中文<br><code>![测试中文](https://s2.ax1x.com/2019/12/16/Q5214H.jpg)</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.ax1x.com/2019/12/16/Q5214H.jpg"
                      alt="测试中文"
                ></p>
<p>ok,有了图床写博客还难吗？so, just do it!</p>
]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>halo 配置域名</title>
    <url>/2021/0423/halo-domain.html</url>
    <content><![CDATA[<blockquote>
<p>经过近一个月的域名备案，我的域名终于备案通过了！然后准备个人博客网站配置下的，最近再找房子然后觉得这个东东很简单就一直没搞！上周末找到房子租了下来，还是要把这些东西搞一下，然后配置的过程中发现还是有些坑在这里面，所以还是记录如下：</p>
</blockquote>
<p>题外话：阿里云，在你域名备案期间，你备案用了多少时间，阿里云会延长对应的使用时间，不得不说这点还是很人性化的，就冲这一点，阿里云我还会继续用下去！</p>
<h3 id="halo配置域名解析"><a href="#halo配置域名解析" class="headerlink" title="halo配置域名解析"></a>halo配置域名解析</h3><p>参考官网的来：<a class="link"   href="https://halo.run/archives/install-reverse-proxy.html"  target="_blank"> 配置域名访问 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>其实也就下面几步：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看是否安装nginx</span><br><span class="line">ps  -ef | grep nginx</span><br><span class="line"></span><br><span class="line"># 未安装，添加 Nginx 源</span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 未安装，安装 Nginx</span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"># 未安装，启动 Nginx</span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"># 未安装，设置开机自启 Nginx</span><br><span class="line">sudo systemctl enable nginx.service</span><br><span class="line"></span><br><span class="line"># 下载 Halo 官方的 Nginx 配置模板</span><br><span class="line">curl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf</span><br><span class="line"></span><br><span class="line"># 使用 vim 编辑 halo.conf</span><br><span class="line">vim /etc/nginx/conf.d/halo.conf</span><br></pre></td></tr></table></figure></div>

<p>打开后，我们需要修改<code>server_name</code> 和<code>proxy_pass</code> 即可，<em><strong>不要修改默认监听端口，不要修改默认监听端口,不要修改默认监听端口</strong></em>;</p>
<p>傻傻的我给修改为成我博客的配置的端口了；导致后面有坑，我们后面再说！</p>
<h3 id="访问不了，问题分析"><a href="#访问不了，问题分析" class="headerlink" title="访问不了，问题分析"></a>访问不了，问题分析</h3><p>本以为，就这样就ojbk!日，咋还是不行…别急，我们慢慢来分析一波，其实急的我直冒汗</p>
<p>问题分析：在阿里云上买的域名，为啥配置后不能直接访问域名呢？</p>
<ol>
<li>首先ping 对应的ip 确认是可以访问的，证明对应的ip 是公网可以访问的且防火墙是开的，访问链路没问题；</li>
<li>那么ping 对应的域名，发现域名ping 不通！</li>
</ol>
<p>我擦，什么情况；回想下我们本地，配置域名是怎么搞的？是不是要配置对应的host 映射呢？那么阿里云买了域名后，哪里配置这个host域名映射呢？</p>
<p>好了，不卖关子了；买了阿里云后要配置域名解析的，哥哥！好吧，我也是踩了坑才知道，那这个域名解析其实就是我们本地配置域名访问的时候配置的host 映射关系，实际还是通过ip 来访问的，只不过nginx配置了代理，就可以通过对于的域名访问啦；</p>
<h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/20/JlhRkF.png"
                     
                ></p>
<p>点击<code>阿里云DNS&gt;</code>进入DNS控制台，选择对应的域名进行<code>解析设置</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2020/04/20/Jl5929.png"
                     
                ></p>
<p>如果不清楚怎么设置右上角有<code>？如何设置解析</code>，可以了解解决；</p>
<p>哈哈，也可以直接点击新手引导添加我们的ip 即可；</p>
<p>配置好后，我们在ping 下我们的域名，你会发现域名已经可以ping 通了</p>
<p>然后这里我使用域名访问，我擦咋还是访问不了，直接到Centos 首页了，必须加上端口号才能访问自己的博客；呃呃呃，这咋玩的！域名加端口访问也不是不可以，只是好挫的有木有，啥时候看到网站把端口给暴露出来了。。。不行，肯定是哪里配置错了！然后我就我发现我手贱把默认80端口给改成我自己的博客端口了，改过来后再reload后通过域名访问就ok了！</p>
<p>注：域名配置好了，对应的halo后台管理中的域名也别忘了配置哈，再对应的系统-&gt;博客设置中！</p>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>时隔一天，猛然想起给这个主题的博主自推了友链。没给头像链接，赶紧过去看看，发现细心的大大已经加上了。。。然后我赶紧打开个人博客看看，看看图片地址。我去咋还是ip的形式访问的呢？这怎么行！<br>然后就新增篇文章查看，发现链接变成域名访问了，可是已经发布的博客还是ip访问的…那能怎么办呢？一个个的改呗，笑try(暂时没想到其他好的办法)</p>
<blockquote>
<p>哎，说那么多，其实还是对nginx 的配置的原理了解的不够透彻，我们项目中基本就是改几个配置，多的还是没深入了解！后面了解学习后再来一篇nginx配置篇学习博客吧！哦啦，就先酱紫吧!</p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
      <tags>
        <tag>halo</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress建站笔记</title>
    <url>/2021/0424/wordpress-site-note.html</url>
    <content><![CDATA[<blockquote>
<p>之前用halo搭的博客，因为阿里云到期而我却忘记了过期时间，没有及时备份，所以就悲催了，所有博客都没了；想着还好本地还有，那重新搭一个吧；听大佬说wordpress配合宝塔面板搭贼快，然后wordpressSEO和主题好看，就想着重新折腾一下吧；时至今日，5.1前总算弄好了；因为网上一堆搭建教程，就不想重复写了；这里就列明一下搭建的注意点：</p>
</blockquote>
<h3 id="配合宝塔面板搭建，事半工倍"><a href="#配合宝塔面板搭建，事半工倍" class="headerlink" title="配合宝塔面板搭建，事半工倍"></a>配合宝塔面板搭建，事半工倍</h3><p><a class="link"   href="https://www.bt.cn/bbs/thread-19376-1-1.html" >宝塔Linux面板安装教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="进入宝塔面板"><a href="#进入宝塔面板" class="headerlink" title="进入宝塔面板"></a>进入宝塔面板</h3><p><a href="https://imgtu.com/i/cvHx0I"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/04/25/cvHx0I.png"
                     
                ></a><br>一键部署即可，一定要选择这里的一键部署，一定要选择这里的一键部署，一定要选择这里的一键部署。<br>因为网上很多教程，说自己上传的包建一个文件夹解压进去，后面nginx配置不好，无法域名访问只能域名加端口访问（踩过坑）；搭建过程推荐博客<br><a class="link"   href="https://blog.csdn.net/arisono/article/details/108351131" >超详细宝塔面板搭建和安装wordpress网站图文教程(附案例) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,除了一键部署外后面的都可以参考此篇博客；</p>
<h3 id="博客搭好了，推荐插件"><a href="#博客搭好了，推荐插件" class="headerlink" title="博客搭好了，推荐插件"></a>博客搭好了，推荐插件</h3><ul>
<li>WP Github Md：一个为 WordPress 网站提供全功能 Markdown 语法的插件。</li>
<li>超级缓存：WordPress的快速缓存插件</li>
</ul>
<p>还有其他的插件，自己根据情况而定，并不是插件越多越好，用的上的适合的才是好的；</p>
<h3 id="html页面-怎么嵌入到自定义页面呢？"><a href="#html页面-怎么嵌入到自定义页面呢？" class="headerlink" title="html页面 怎么嵌入到自定义页面呢？"></a>html页面 怎么嵌入到自定义页面呢？</h3><p>一通折腾，我想你的博客菜单及主题设置基本弄好了，如果你和我一样想自定义一个友情链接页面，而又不了解php语法,那该怎么办呢？哈哈，办法还是有的；</p>
<p><code>宝塔文件中-&gt;www-&gt;wwwroot-&gt;xxx.xx.xx(你的域名)-&gt;wp content-&gt;themes-&gt;你的主题-&gt;pages-&gt;找到默认的模板页</code><br>例如默认友情链接的模板页：template-links.php(可能每个主题的命名不一样，自己推断下就能知道什么意思)</p>
<p>你可以不懂php,但是我想你和我一样，自己搞定一个html页面，问题应该不大吧；<br>再改这个模板页面之前，我们先在宝塔面板中新建一个template-links-back.php文件备份这个模板，以免误操作改坏了及时可以回退哈；</p>
<p>都备份了，那还不是想怎么折腾就怎么折腾；</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Template Name: 友情链接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $cats = get_post_meta($post-&gt;ID,&#x27;page_links_id&#x27;,true);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $links = pk_get_wp_links($cats);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $groups = array();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if(!empty($cats) &amp;&amp; $links &amp;&amp; count($links)&gt;0)&#123;</span></span><br><span class="line"><span class="comment">//     foreach ($links as $link)&#123;</span></span><br><span class="line"><span class="comment">//         if(!array_key_exists($link-&gt;term_id,$groups))&#123;</span></span><br><span class="line"><span class="comment">//             $groups[$link-&gt;term_id] = array(</span></span><br><span class="line"><span class="comment">//                     &#x27;id&#x27;=&gt;$link-&gt;term_id,</span></span><br><span class="line"><span class="comment">//                     &#x27;name&#x27;=&gt;$link-&gt;name,</span></span><br><span class="line"><span class="comment">//                     &#x27;links&#x27;=&gt;array()</span></span><br><span class="line"><span class="comment">//             );</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         $groups[$link-&gt;term_id][&#x27;links&#x27;][] = $link;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">get_header</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="comment">// - 加入你的html代码即可，注意去掉最外层的html标签，你看上面head头都给你引入进来了，说明肯定有最外层的html标签了</span></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">get_template_part</span>(<span class="string">&#x27;templates/module&#x27;</span>, <span class="string">&#x27;smiley&#x27;</span>) <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">get_footer</span>() <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="图片403？"><a href="#图片403？" class="headerlink" title="图片403？"></a>图片403？</h3><p>友链添加好了，怎么标签中的图片加载不出来，403？而我们刷新页面就可以了<br>这是因为很多博客都开启了防盗链，图片一般默认不加载；我们要解决这个单页面问题，只需要在我们的引入的html中加入<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code>即可</p>
<h3 id="移动端样式兼容"><a href="#移动端样式兼容" class="headerlink" title="移动端样式兼容"></a>移动端样式兼容</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*iponex 适配*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">   <span class="comment">/*再写一套屏幕尺寸小于1024的样式即可，简单粗暴，单页面用即可*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>小结：目前个人站基本搭建完毕，遇到的坑还不少，基本都是自己对wordpress的认知不足导致的，通过查阅文档都已解决；</p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加3d人物</title>
    <url>/2022/0219/hexo-3d-virtual-character.html</url>
    <content><![CDATA[<h3 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a>关于hexo</h3><p>hexo 是一个静态页面模板博客，功能完善简单，md的书写风格类似于写博客，开启hexo 博客之后要不要尝试一下live2d 人物插件呢？<br>so,do it！</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>npm install -save hexo-helper-live2d</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置后我们在config.yml文件中将对应的lived2d名称改为<code>live2d-widget-model-shizuku</code><br>如下图：<br><a href="https://imgtu.com/i/beLscd"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s4.ax1x.com/2022/02/27/beLscd.png"
                     
                ></a><br>插件下载后我们如果要调整其位置可根据如图上config配置文件的display属性进行配置，那肯定是代码里有配置.</p>
<h3 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h3><p>配置文件其实在：<br>在<code>node_modules/live2d_widget/elementMrt.js</code>中：<br>这句就是设置偏移量<code>newElem.style.setProperty(config.display.position,config.display.hOffset + &#39;px&#39;);</code>如下图：<br><a href="https://imgtu.com/i/beOwbq"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s4.ax1x.com/2022/02/27/beOwbq.png"
                     
                ></a></p>
<p>最终调整效果如下图：<br><a href="https://imgtu.com/i/bg6SSS"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2022/03/08/bg6SSS.png"
                     
                ></a></p>
]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>gitee上传远端意外挂断</title>
    <url>/2025/0316/gitee-upload-remote-abruptly-disconnected.html</url>
    <content><![CDATA[<blockquote>
<p>最近更新另一个面试题的博客，发现本地提交推送到github后，再自动推送到gitee做备份时，直接远程显示挂断了；WTF什么鬼，折腾了一会搞定了，水篇博客记录下吧</p>
</blockquote>
<h4 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h4><p>我折腾了两个hexo博客，一个是这个站，另一个是导航栏上的面试题对应的站，我习惯性的会把代码备份到github和gitee；一旦梯子用不了，我还能去gitee上找代码；之前有博客实践了怎么把代码同步到不同的两个git上，可自行查找</p>
<p>因为我写了个脚本，每次运行会自动：清理-》编译-》运行-》检查没问题——》推送github-》推送同步到gitee；年前都没有问题，就是最近发现推送gitee时，直接挂断；之前忙着别的事儿，就先没管；今天突然想起来，就非得研究一下了</p>
<p>可以看到16天前都可以，最近不行了；没有推送成功的记录<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../../images/other/25/3/16/gitee_push_his.png"
                     
                ><br><strong>报错如下</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../../images/other/25/3/16/gitee_upload_error.png"
                     
                ></p>
<h4 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h4><ol>
<li>排除ssh-key未配置的原因，因为之前都没有配置过；如果没配置，会是权限相关的报错</li>
<li>手动提交测试，发现还是压缩后上传的时候报错，说明是文件大小导致的；最近总结的面试题有点多</li>
<li>gitee上传时默认开启了压缩，所以压缩完说明还是太大了</li>
</ol>
<h4 id="调整git上传配置"><a href="#调整git上传配置" class="headerlink" title="调整git上传配置"></a>调整git上传配置</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 1048576000  # 设为1GB</span><br><span class="line">git config --global https.postBuffer 1048576000</span><br></pre></td></tr></table></figure></div>
<p>Git默认的HTTP缓冲区（postBuffer）可能不足，尤其推送大文时；调整为1G,重试推送成功，完美！又是美好的一天!</p>
]]></content>
      <categories>
        <category>other</category>
        <category>mess</category>
      </categories>
  </entry>
</search>
